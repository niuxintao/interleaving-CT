%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: options.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: xintao
%%CreationDate: 2016/3/13, 4:32:15
%%BoundingBox: 0 0 587 299
%%HiResBoundingBox: 0 0 586.8000 298.8000
%%CropBox: 0 0 586.8000 298.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-03-13T04:30:12-05:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -298.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 298.8 li
586.8 298.8 li
586.8 0 li
cp
clp
gsave
0 298.8 mo
587 298.8 li
587 -.200012 li
0 -.200012 li
cp
clp
0 298.8 mo
586.8 298.8 li
586.8 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
f
gsave
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
52.812 254.041 mo
89.6966 254.243 li
126.581 253.839 li
163.466 253.89 li
200.35 253.688 li
237.235 253.133 li
274.119 252.88 li
311.004 252.376 li
347.889 252.224 li
384.773 252.275 li
421.658 251.821 li
458.542 250.912 li
495.427 250.912 li
532.311 251.316 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
49.562 257.291 mo
56.062 257.291 li
56.062 250.791 li
49.562 250.791 li
cp
clp
49.812 257.041 mo
55.812 257.041 li
55.812 251.041 li
49.812 251.041 li
cp
f
.5 lw
0 lc
0 lj
49.812 257.041 mo
55.812 257.041 li
55.812 251.041 li
49.812 251.041 li
cp
@
grestore
gsave
86.4466 257.493 mo
92.9466 257.493 li
92.9466 250.993 li
86.4466 250.993 li
cp
clp
86.6966 257.243 mo
92.6966 257.243 li
92.6966 251.243 li
86.6966 251.243 li
cp
f
.5 lw
0 lc
0 lj
86.6966 257.243 mo
92.6966 257.243 li
92.6966 251.243 li
86.6966 251.243 li
cp
@
grestore
gsave
123.331 257.089 mo
129.831 257.089 li
129.831 250.589 li
123.331 250.589 li
cp
clp
123.581 256.839 mo
129.581 256.839 li
129.581 250.839 li
123.581 250.839 li
cp
f
.5 lw
0 lc
0 lj
123.581 256.839 mo
129.581 256.839 li
129.581 250.839 li
123.581 250.839 li
cp
@
grestore
gsave
160.216 257.14 mo
166.716 257.14 li
166.716 250.64 li
160.216 250.64 li
cp
clp
160.466 256.89 mo
166.466 256.89 li
166.466 250.89 li
160.466 250.89 li
cp
f
.5 lw
0 lc
0 lj
160.466 256.89 mo
166.466 256.89 li
166.466 250.89 li
160.466 250.89 li
cp
@
grestore
gsave
197.1 256.938 mo
203.6 256.938 li
203.6 250.438 li
197.1 250.438 li
cp
clp
197.35 256.688 mo
203.35 256.688 li
203.35 250.688 li
197.35 250.688 li
cp
f
.5 lw
0 lc
0 lj
197.35 256.688 mo
203.35 256.688 li
203.35 250.688 li
197.35 250.688 li
cp
@
grestore
gsave
233.985 256.383 mo
240.485 256.383 li
240.485 249.883 li
233.985 249.883 li
cp
clp
234.235 256.133 mo
240.235 256.133 li
240.235 250.133 li
234.235 250.133 li
cp
f
.5 lw
0 lc
0 lj
234.235 256.133 mo
240.235 256.133 li
240.235 250.133 li
234.235 250.133 li
cp
@
grestore
gsave
270.869 256.13 mo
277.369 256.13 li
277.369 249.63 li
270.869 249.63 li
cp
clp
271.119 255.88 mo
277.119 255.88 li
277.119 249.88 li
271.119 249.88 li
cp
f
.5 lw
0 lc
0 lj
271.119 255.88 mo
277.119 255.88 li
277.119 249.88 li
271.119 249.88 li
cp
@
grestore
gsave
307.754 255.626 mo
314.254 255.626 li
314.254 249.126 li
307.754 249.126 li
cp
clp
308.004 255.376 mo
314.004 255.376 li
314.004 249.376 li
308.004 249.376 li
cp
f
.5 lw
0 lc
0 lj
308.004 255.376 mo
314.004 255.376 li
314.004 249.376 li
308.004 249.376 li
cp
@
grestore
gsave
344.639 255.474 mo
351.139 255.474 li
351.139 248.974 li
344.639 248.974 li
cp
clp
344.889 255.224 mo
350.889 255.224 li
350.889 249.224 li
344.889 249.224 li
cp
f
.5 lw
0 lc
0 lj
344.889 255.224 mo
350.889 255.224 li
350.889 249.224 li
344.889 249.224 li
cp
@
grestore
gsave
381.523 255.525 mo
388.023 255.525 li
388.023 249.025 li
381.523 249.025 li
cp
clp
381.773 255.275 mo
387.773 255.275 li
387.773 249.275 li
381.773 249.275 li
cp
f
.5 lw
0 lc
0 lj
381.773 255.275 mo
387.773 255.275 li
387.773 249.275 li
381.773 249.275 li
cp
@
grestore
gsave
418.408 255.071 mo
424.908 255.071 li
424.908 248.571 li
418.408 248.571 li
cp
clp
418.658 254.821 mo
424.658 254.821 li
424.658 248.821 li
418.658 248.821 li
cp
f
.5 lw
0 lc
0 lj
418.658 254.821 mo
424.658 254.821 li
424.658 248.821 li
418.658 248.821 li
cp
@
grestore
gsave
455.292 254.162 mo
461.792 254.162 li
461.792 247.662 li
455.292 247.662 li
cp
clp
455.542 253.912 mo
461.542 253.912 li
461.542 247.912 li
455.542 247.912 li
cp
f
.5 lw
0 lc
0 lj
455.542 253.912 mo
461.542 253.912 li
461.542 247.912 li
455.542 247.912 li
cp
@
grestore
gsave
492.177 254.162 mo
498.677 254.162 li
498.677 247.662 li
492.177 247.662 li
cp
clp
492.427 253.912 mo
498.427 253.912 li
498.427 247.912 li
492.427 247.912 li
cp
f
.5 lw
0 lc
0 lj
492.427 253.912 mo
498.427 253.912 li
498.427 247.912 li
492.427 247.912 li
cp
@
grestore
gsave
529.061 254.566 mo
535.561 254.566 li
535.561 248.066 li
529.061 248.066 li
cp
clp
529.311 254.316 mo
535.311 254.316 li
535.311 248.316 li
529.311 248.316 li
cp
f
.5 lw
0 lc
0 lj
529.311 254.316 mo
535.311 254.316 li
535.311 248.316 li
529.311 248.316 li
cp
@
grestore
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
52.812 256.968 mo
569.196 256.968 li
1 /0 /CSD get_res sepcs
1 sep
@
569.196 256.968 mo
569.196 29.88 li
@
52.812 29.88 mo
569.196 29.88 li
@
52.812 256.968 mo
52.812 29.88 li
@
52.812 256.968 mo
52.812 252.968 li
f
.5 lw
0 lc
1 lj
52.812 256.968 mo
52.812 252.968 li
@
52.812 29.88 mo
52.812 33.88 li
f
52.812 29.88 mo
52.812 33.88 li
@
53.628 265.941 mo
53.064 265.941 52.62 266.097 52.296 266.397 cv
51.972 266.697 51.816 267.105 51.816 267.633 cv
51.816 268.161 51.972 268.581 52.296 268.881 cv
52.62 269.181 53.064 269.325 53.628 269.325 cv
54.18 269.325 54.624 269.181 54.948 268.869 cv
55.272 268.569 55.44 268.161 55.44 267.633 cv
55.44 267.105 55.272 266.697 54.96 266.397 cv
54.636 266.097 54.192 265.941 53.628 265.941 cv
52.44 265.437 mo
51.936 265.317 51.54 265.077 51.252 264.729 cv
50.964 264.381 50.832 263.961 50.832 263.457 cv
50.832 262.761 51.072 262.209 51.576 261.801 cv
52.068 261.393 52.752 261.189 53.628 261.189 cv
54.492 261.189 55.176 261.393 55.68 261.801 cv
56.172 262.209 56.424 262.761 56.424 263.457 cv
56.424 263.961 56.28 264.381 55.992 264.729 cv
55.704 265.077 55.32 265.317 54.816 265.437 cv
55.38 265.569 55.824 265.833 56.148 266.217 cv
56.46 266.601 56.628 267.081 56.628 267.633 cv
56.628 268.485 56.364 269.133 55.848 269.577 cv
55.32 270.033 54.588 270.249 53.628 270.249 cv
52.656 270.249 51.912 270.033 51.396 269.577 cv
50.88 269.133 50.628 268.485 50.628 267.633 cv
50.628 267.081 50.784 266.601 51.108 266.217 cv
51.42 265.833 51.864 265.569 52.44 265.437 cv
52.008 263.565 mo
52.008 264.021 52.14 264.381 52.428 264.633 cv
52.716 264.885 53.112 265.005 53.628 265.005 cv
54.132 265.005 54.528 264.885 54.816 264.633 cv
55.104 264.381 55.248 264.021 55.248 263.565 cv
55.248 263.109 55.104 262.761 54.816 262.509 cv
54.528 262.257 54.132 262.125 53.628 262.125 cv
53.112 262.125 52.716 262.257 52.428 262.509 cv
52.14 262.761 52.008 263.109 52.008 263.565 cv
f
89.6966 256.968 mo
89.6966 252.968 li
f
89.6966 256.968 mo
89.6966 252.968 li
@
89.6966 29.88 mo
89.6966 33.88 li
f
89.6966 29.88 mo
89.6966 33.88 li
@
87.9931 269.913 mo
87.9931 268.833 li
88.2811 268.977 88.5811 269.085 88.8931 269.157 cv
89.1931 269.229 89.4931 269.265 89.7931 269.265 cv
90.5611 269.265 91.1611 269.013 91.5691 268.485 cv
91.9771 267.957 92.2171 267.165 92.2891 266.085 cv
92.0491 266.421 91.7611 266.685 91.4251 266.865 cv
91.0771 267.045 90.6931 267.129 90.2731 267.129 cv
89.3851 267.129 88.6891 266.865 88.1851 266.337 cv
87.6811 265.809 87.4291 265.089 87.4291 264.165 cv
87.4291 263.277 87.6931 262.557 88.2211 262.005 cv
88.7491 261.465 89.4571 261.189 90.3451 261.189 cv
91.3531 261.189 92.1331 261.585 92.6611 262.353 cv
93.1891 263.133 93.4651 264.261 93.4651 265.725 cv
93.4651 267.117 93.1291 268.209 92.4811 269.025 cv
91.8211 269.841 90.9451 270.249 89.8411 270.249 cv
89.5411 270.249 89.2411 270.213 88.9411 270.165 cv
88.6291 270.117 88.3171 270.033 87.9931 269.913 cv
90.3451 266.205 mo
90.8731 266.205 91.2931 266.025 91.6051 265.665 cv
91.9171 265.305 92.0731 264.801 92.0731 264.165 cv
92.0731 263.541 91.9171 263.037 91.6051 262.677 cv
91.2931 262.317 90.8731 262.125 90.3451 262.125 cv
89.8171 262.125 89.3971 262.317 89.0851 262.677 cv
88.7731 263.037 88.6171 263.541 88.6171 264.165 cv
88.6171 264.801 88.7731 265.305 89.0851 265.665 cv
89.3971 266.025 89.8171 266.205 90.3451 266.205 cv
f
126.581 256.968 mo
126.581 252.968 li
f
126.581 256.968 mo
126.581 252.968 li
@
126.581 29.88 mo
126.581 33.88 li
f
126.581 29.88 mo
126.581 33.88 li
@
121.483 269.097 mo
123.415 269.097 li
123.415 262.425 li
121.315 262.845 li
121.315 261.765 li
123.403 261.345 li
124.591 261.345 li
124.591 269.097 li
126.523 269.097 li
126.523 270.093 li
121.483 270.093 li
121.483 269.097 li
f
131.443 262.125 mo
130.831 262.125 130.375 262.425 130.063 263.025 cv
129.751 263.625 129.607 264.525 129.607 265.725 cv
129.607 266.925 129.751 267.825 130.063 268.425 cv
130.375 269.025 130.831 269.325 131.443 269.325 cv
132.055 269.325 132.511 269.025 132.823 268.425 cv
133.123 267.825 133.279 266.925 133.279 265.725 cv
133.279 264.525 133.123 263.625 132.823 263.025 cv
132.511 262.425 132.055 262.125 131.443 262.125 cv
131.443 261.189 mo
132.415 261.189 133.159 261.585 133.687 262.353 cv
134.203 263.133 134.467 264.261 134.467 265.725 cv
134.467 267.201 134.203 268.329 133.687 269.097 cv
133.159 269.865 132.415 270.249 131.443 270.249 cv
130.459 270.249 129.703 269.865 129.187 269.097 cv
128.671 268.329 128.419 267.201 128.419 265.725 cv
128.419 264.261 128.671 263.133 129.187 262.353 cv
129.703 261.585 130.459 261.189 131.443 261.189 cv
f
163.466 256.968 mo
163.466 252.968 li
f
163.466 256.968 mo
163.466 252.968 li
@
163.466 29.88 mo
163.466 33.88 li
f
163.466 29.88 mo
163.466 33.88 li
@
158.571 269.097 mo
160.503 269.097 li
160.503 262.425 li
158.403 262.845 li
158.403 261.765 li
160.491 261.345 li
161.679 261.345 li
161.679 269.097 li
163.611 269.097 li
163.611 270.093 li
158.571 270.093 li
158.571 269.097 li
f
167.019 269.097 mo
171.147 269.097 li
171.147 270.093 li
165.591 270.093 li
165.591 269.097 li
166.035 268.641 166.647 268.017 167.427 267.225 cv
168.195 266.445 168.687 265.941 168.891 265.713 cv
169.275 265.293 169.539 264.933 169.683 264.633 cv
169.827 264.345 169.911 264.045 169.911 263.757 cv
169.911 263.301 169.743 262.917 169.419 262.629 cv
169.095 262.341 168.675 262.185 168.147 262.185 cv
167.775 262.185 167.379 262.257 166.971 262.377 cv
166.563 262.509 166.119 262.701 165.651 262.965 cv
165.651 261.765 li
166.131 261.573 166.575 261.429 166.983 261.333 cv
167.391 261.237 167.775 261.189 168.123 261.189 cv
169.023 261.189 169.743 261.417 170.283 261.873 cv
170.823 262.329 171.099 262.929 171.099 263.685 cv
171.099 264.045 171.027 264.393 170.895 264.705 cv
170.763 265.029 170.523 265.413 170.163 265.845 cv
170.067 265.965 169.755 266.289 169.227 266.829 cv
168.699 267.369 167.967 268.125 167.019 269.097 cv
f
200.35 256.968 mo
200.35 252.968 li
f
200.35 256.968 mo
200.35 252.968 li
@
200.35 29.88 mo
200.35 33.88 li
f
200.35 29.88 mo
200.35 33.88 li
@
195.237 269.097 mo
197.169 269.097 li
197.169 262.425 li
195.069 262.845 li
195.069 261.765 li
197.157 261.345 li
198.345 261.345 li
198.345 269.097 li
200.277 269.097 li
200.277 270.093 li
195.237 270.093 li
195.237 269.097 li
f
205.341 265.245 mo
204.813 265.245 204.393 265.437 204.081 265.797 cv
203.769 266.157 203.613 266.661 203.613 267.285 cv
203.613 267.921 203.769 268.425 204.081 268.785 cv
204.393 269.145 204.813 269.325 205.341 269.325 cv
205.869 269.325 206.289 269.145 206.601 268.785 cv
206.913 268.425 207.069 267.921 207.069 267.285 cv
207.069 266.661 206.913 266.157 206.601 265.797 cv
206.289 265.437 205.869 265.245 205.341 265.245 cv
207.693 261.537 mo
207.693 262.617 li
207.393 262.473 207.093 262.365 206.793 262.293 cv
206.481 262.221 206.181 262.185 205.893 262.185 cv
205.101 262.185 204.501 262.449 204.093 262.977 cv
203.685 263.505 203.445 264.309 203.397 265.365 cv
203.625 265.029 203.913 264.765 204.261 264.585 cv
204.609 264.405 204.993 264.309 205.413 264.309 cv
206.289 264.309 206.985 264.585 207.489 265.113 cv
207.993 265.641 208.257 266.373 208.257 267.285 cv
208.257 268.185 207.981 268.905 207.453 269.445 cv
206.925 269.985 206.217 270.249 205.341 270.249 cv
204.333 270.249 203.553 269.865 203.025 269.097 cv
202.485 268.329 202.221 267.201 202.221 265.725 cv
202.221 264.345 202.545 263.241 203.205 262.425 cv
203.853 261.609 204.741 261.189 205.845 261.189 cv
206.133 261.189 206.433 261.225 206.745 261.273 cv
207.045 261.333 207.357 261.417 207.693 261.537 cv
f
237.235 256.968 mo
237.235 252.968 li
f
237.235 256.968 mo
237.235 252.968 li
@
237.235 29.88 mo
237.235 33.88 li
f
237.235 29.88 mo
237.235 33.88 li
@
232.734 269.097 mo
236.862 269.097 li
236.862 270.093 li
231.306 270.093 li
231.306 269.097 li
231.75 268.641 232.362 268.017 233.142 267.225 cv
233.91 266.445 234.402 265.941 234.606 265.713 cv
234.99 265.293 235.254 264.933 235.398 264.633 cv
235.542 264.345 235.626 264.045 235.626 263.757 cv
235.626 263.301 235.458 262.917 235.134 262.629 cv
234.81 262.341 234.39 262.185 233.862 262.185 cv
233.49 262.185 233.094 262.257 232.686 262.377 cv
232.278 262.509 231.834 262.701 231.366 262.965 cv
231.366 261.765 li
231.846 261.573 232.29 261.429 232.698 261.333 cv
233.106 261.237 233.49 261.189 233.838 261.189 cv
234.738 261.189 235.458 261.417 235.998 261.873 cv
236.538 262.329 236.814 262.929 236.814 263.685 cv
236.814 264.045 236.742 264.393 236.61 264.705 cv
236.478 265.029 236.238 265.413 235.878 265.845 cv
235.782 265.965 235.47 266.289 234.942 266.829 cv
234.414 267.369 233.682 268.125 232.734 269.097 cv
f
241.878 262.125 mo
241.266 262.125 240.81 262.425 240.498 263.025 cv
240.186 263.625 240.042 264.525 240.042 265.725 cv
240.042 266.925 240.186 267.825 240.498 268.425 cv
240.81 269.025 241.266 269.325 241.878 269.325 cv
242.49 269.325 242.946 269.025 243.258 268.425 cv
243.558 267.825 243.714 266.925 243.714 265.725 cv
243.714 264.525 243.558 263.625 243.258 263.025 cv
242.946 262.425 242.49 262.125 241.878 262.125 cv
241.878 261.189 mo
242.85 261.189 243.594 261.585 244.122 262.353 cv
244.638 263.133 244.902 264.261 244.902 265.725 cv
244.902 267.201 244.638 268.329 244.122 269.097 cv
243.594 269.865 242.85 270.249 241.878 270.249 cv
240.894 270.249 240.138 269.865 239.622 269.097 cv
239.106 268.329 238.854 267.201 238.854 265.725 cv
238.854 264.261 239.106 263.133 239.622 262.353 cv
240.138 261.585 240.894 261.189 241.878 261.189 cv
f
274.119 256.968 mo
274.119 252.968 li
f
274.119 256.968 mo
274.119 252.968 li
@
274.119 29.88 mo
274.119 33.88 li
f
274.119 29.88 mo
274.119 33.88 li
@
272.21 265.377 mo
272.774 265.497 273.218 265.749 273.53 266.133 cv
273.842 266.517 274.01 266.997 274.01 267.549 cv
274.01 268.413 273.71 269.085 273.122 269.553 cv
272.522 270.021 271.682 270.249 270.59 270.249 cv
270.218 270.249 269.834 270.213 269.45 270.141 cv
269.066 270.081 268.658 269.973 268.25 269.829 cv
268.25 268.689 li
268.574 268.881 268.934 269.025 269.33 269.121 cv
269.714 269.217 270.122 269.265 270.554 269.265 cv
271.298 269.265 271.862 269.121 272.246 268.833 cv
272.63 268.545 272.834 268.113 272.834 267.549 cv
272.834 267.045 272.654 266.637 272.294 266.349 cv
271.934 266.061 271.43 265.905 270.782 265.905 cv
269.762 265.905 li
269.762 264.933 li
270.83 264.933 li
271.406 264.933 271.85 264.825 272.162 264.585 cv
272.474 264.357 272.63 264.021 272.63 263.577 cv
272.63 263.133 272.462 262.785 272.15 262.545 cv
271.826 262.305 271.37 262.185 270.782 262.185 cv
270.458 262.185 270.11 262.221 269.738 262.293 cv
269.366 262.365 268.958 262.473 268.514 262.617 cv
268.514 261.561 li
268.958 261.441 269.378 261.345 269.774 261.285 cv
270.158 261.225 270.53 261.189 270.89 261.189 cv
271.778 261.189 272.486 261.393 273.014 261.801 cv
273.542 262.209 273.806 262.761 273.806 263.457 cv
273.806 263.937 273.662 264.345 273.386 264.681 cv
273.11 265.017 272.714 265.257 272.21 265.377 cv
f
278.786 262.125 mo
278.174 262.125 277.718 262.425 277.406 263.025 cv
277.094 263.625 276.95 264.525 276.95 265.725 cv
276.95 266.925 277.094 267.825 277.406 268.425 cv
277.718 269.025 278.174 269.325 278.786 269.325 cv
279.398 269.325 279.854 269.025 280.166 268.425 cv
280.466 267.825 280.622 266.925 280.622 265.725 cv
280.622 264.525 280.466 263.625 280.166 263.025 cv
279.854 262.425 279.398 262.125 278.786 262.125 cv
278.786 261.189 mo
279.758 261.189 280.502 261.585 281.03 262.353 cv
281.546 263.133 281.81 264.261 281.81 265.725 cv
281.81 267.201 281.546 268.329 281.03 269.097 cv
280.502 269.865 279.758 270.249 278.786 270.249 cv
277.802 270.249 277.046 269.865 276.53 269.097 cv
276.014 268.329 275.762 267.201 275.762 265.725 cv
275.762 264.261 276.014 263.133 276.53 262.353 cv
277.046 261.585 277.802 261.189 278.786 261.189 cv
f
311.004 256.968 mo
311.004 252.968 li
f
311.004 256.968 mo
311.004 252.968 li
@
311.004 29.88 mo
311.004 33.88 li
f
311.004 29.88 mo
311.004 33.88 li
@
308.595 262.377 mo
305.607 267.045 li
308.595 267.045 li
308.595 262.377 li
308.283 261.345 mo
309.771 261.345 li
309.771 267.045 li
311.019 267.045 li
311.019 268.029 li
309.771 268.029 li
309.771 270.093 li
308.595 270.093 li
308.595 268.029 li
304.647 268.029 li
304.647 266.889 li
308.283 261.345 li
f
315.507 262.125 mo
314.895 262.125 314.439 262.425 314.127 263.025 cv
313.815 263.625 313.671 264.525 313.671 265.725 cv
313.671 266.925 313.815 267.825 314.127 268.425 cv
314.439 269.025 314.895 269.325 315.507 269.325 cv
316.119 269.325 316.575 269.025 316.887 268.425 cv
317.187 267.825 317.343 266.925 317.343 265.725 cv
317.343 264.525 317.187 263.625 316.887 263.025 cv
316.575 262.425 316.119 262.125 315.507 262.125 cv
315.507 261.189 mo
316.479 261.189 317.223 261.585 317.751 262.353 cv
318.267 263.133 318.531 264.261 318.531 265.725 cv
318.531 267.201 318.267 268.329 317.751 269.097 cv
317.223 269.865 316.479 270.249 315.507 270.249 cv
314.523 270.249 313.767 269.865 313.251 269.097 cv
312.735 268.329 312.483 267.201 312.483 265.725 cv
312.483 264.261 312.735 263.133 313.251 262.353 cv
313.767 261.585 314.523 261.189 315.507 261.189 cv
f
347.889 256.968 mo
347.889 252.968 li
f
347.889 256.968 mo
347.889 252.968 li
@
347.889 29.88 mo
347.889 33.88 li
f
347.889 29.88 mo
347.889 33.88 li
@
342.403 261.345 mo
347.047 261.345 li
347.047 262.341 li
343.483 262.341 li
343.483 264.489 li
343.651 264.429 343.831 264.381 343.999 264.357 cv
344.167 264.333 344.347 264.309 344.515 264.309 cv
345.487 264.309 346.255 264.585 346.831 265.113 cv
347.407 265.653 347.695 266.373 347.695 267.285 cv
347.695 268.233 347.395 268.965 346.807 269.481 cv
346.219 269.997 345.391 270.249 344.335 270.249 cv
343.963 270.249 343.591 270.213 343.207 270.165 cv
342.823 270.105 342.439 270.021 342.031 269.889 cv
342.031 268.701 li
342.379 268.893 342.739 269.037 343.123 269.133 cv
343.495 269.229 343.891 269.265 344.311 269.265 cv
344.983 269.265 345.523 269.097 345.919 268.737 cv
346.303 268.377 346.507 267.897 346.507 267.285 cv
346.507 266.685 346.303 266.205 345.919 265.845 cv
345.523 265.485 344.983 265.305 344.311 265.305 cv
343.999 265.305 343.675 265.341 343.363 265.413 cv
343.051 265.485 342.727 265.593 342.403 265.737 cv
342.403 261.345 li
f
352.555 262.125 mo
351.943 262.125 351.487 262.425 351.175 263.025 cv
350.863 263.625 350.719 264.525 350.719 265.725 cv
350.719 266.925 350.863 267.825 351.175 268.425 cv
351.487 269.025 351.943 269.325 352.555 269.325 cv
353.167 269.325 353.623 269.025 353.935 268.425 cv
354.235 267.825 354.391 266.925 354.391 265.725 cv
354.391 264.525 354.235 263.625 353.935 263.025 cv
353.623 262.425 353.167 262.125 352.555 262.125 cv
352.555 261.189 mo
353.527 261.189 354.271 261.585 354.799 262.353 cv
355.315 263.133 355.579 264.261 355.579 265.725 cv
355.579 267.201 355.315 268.329 354.799 269.097 cv
354.271 269.865 353.527 270.249 352.555 270.249 cv
351.571 270.249 350.815 269.865 350.299 269.097 cv
349.783 268.329 349.531 267.201 349.531 265.725 cv
349.531 264.261 349.783 263.133 350.299 262.353 cv
350.815 261.585 351.571 261.189 352.555 261.189 cv
f
384.773 256.968 mo
384.773 252.968 li
f
384.773 256.968 mo
384.773 252.968 li
@
384.773 29.88 mo
384.773 33.88 li
f
384.773 29.88 mo
384.773 33.88 li
@
381.913 265.245 mo
381.385 265.245 380.965 265.437 380.653 265.797 cv
380.341 266.157 380.185 266.661 380.185 267.285 cv
380.185 267.921 380.341 268.425 380.653 268.785 cv
380.965 269.145 381.385 269.325 381.913 269.325 cv
382.441 269.325 382.861 269.145 383.173 268.785 cv
383.485 268.425 383.641 267.921 383.641 267.285 cv
383.641 266.661 383.485 266.157 383.173 265.797 cv
382.861 265.437 382.441 265.245 381.913 265.245 cv
384.265 261.537 mo
384.265 262.617 li
383.965 262.473 383.665 262.365 383.365 262.293 cv
383.053 262.221 382.753 262.185 382.465 262.185 cv
381.673 262.185 381.073 262.449 380.665 262.977 cv
380.257 263.505 380.017 264.309 379.969 265.365 cv
380.197 265.029 380.485 264.765 380.833 264.585 cv
381.181 264.405 381.565 264.309 381.985 264.309 cv
382.861 264.309 383.557 264.585 384.061 265.113 cv
384.565 265.641 384.829 266.373 384.829 267.285 cv
384.829 268.185 384.553 268.905 384.025 269.445 cv
383.497 269.985 382.789 270.249 381.913 270.249 cv
380.905 270.249 380.125 269.865 379.597 269.097 cv
379.057 268.329 378.793 267.201 378.793 265.725 cv
378.793 264.345 379.117 263.241 379.777 262.425 cv
380.425 261.609 381.313 261.189 382.417 261.189 cv
382.705 261.189 383.005 261.225 383.317 261.273 cv
383.617 261.333 383.929 261.417 384.265 261.537 cv
f
389.401 262.125 mo
388.789 262.125 388.333 262.425 388.021 263.025 cv
387.709 263.625 387.565 264.525 387.565 265.725 cv
387.565 266.925 387.709 267.825 388.021 268.425 cv
388.333 269.025 388.789 269.325 389.401 269.325 cv
390.013 269.325 390.469 269.025 390.781 268.425 cv
391.081 267.825 391.237 266.925 391.237 265.725 cv
391.237 264.525 391.081 263.625 390.781 263.025 cv
390.469 262.425 390.013 262.125 389.401 262.125 cv
389.401 261.189 mo
390.373 261.189 391.117 261.585 391.645 262.353 cv
392.161 263.133 392.425 264.261 392.425 265.725 cv
392.425 267.201 392.161 268.329 391.645 269.097 cv
391.117 269.865 390.373 270.249 389.401 270.249 cv
388.417 270.249 387.661 269.865 387.145 269.097 cv
386.629 268.329 386.377 267.201 386.377 265.725 cv
386.377 264.261 386.629 263.133 387.145 262.353 cv
387.661 261.585 388.417 261.189 389.401 261.189 cv
f
421.658 256.968 mo
421.658 252.968 li
f
421.658 256.968 mo
421.658 252.968 li
@
421.658 29.88 mo
421.658 33.88 li
f
421.658 29.88 mo
421.658 33.88 li
@
415.892 261.345 mo
421.52 261.345 li
421.52 261.849 li
418.34 270.093 li
417.104 270.093 li
420.092 262.341 li
415.892 262.341 li
415.892 261.345 li
f
426.356 262.125 mo
425.744 262.125 425.288 262.425 424.976 263.025 cv
424.664 263.625 424.52 264.525 424.52 265.725 cv
424.52 266.925 424.664 267.825 424.976 268.425 cv
425.288 269.025 425.744 269.325 426.356 269.325 cv
426.968 269.325 427.424 269.025 427.736 268.425 cv
428.036 267.825 428.192 266.925 428.192 265.725 cv
428.192 264.525 428.036 263.625 427.736 263.025 cv
427.424 262.425 426.968 262.125 426.356 262.125 cv
426.356 261.189 mo
427.328 261.189 428.072 261.585 428.6 262.353 cv
429.116 263.133 429.38 264.261 429.38 265.725 cv
429.38 267.201 429.116 268.329 428.6 269.097 cv
428.072 269.865 427.328 270.249 426.356 270.249 cv
425.372 270.249 424.616 269.865 424.1 269.097 cv
423.584 268.329 423.332 267.201 423.332 265.725 cv
423.332 264.261 423.584 263.133 424.1 262.353 cv
424.616 261.585 425.372 261.189 426.356 261.189 cv
f
458.542 256.968 mo
458.542 252.968 li
f
458.542 256.968 mo
458.542 252.968 li
@
458.542 29.88 mo
458.542 33.88 li
f
458.542 29.88 mo
458.542 33.88 li
@
455.522 265.941 mo
454.958 265.941 454.514 266.097 454.19 266.397 cv
453.866 266.697 453.71 267.105 453.71 267.633 cv
453.71 268.161 453.866 268.581 454.19 268.881 cv
454.514 269.181 454.958 269.325 455.522 269.325 cv
456.074 269.325 456.518 269.181 456.842 268.869 cv
457.166 268.569 457.334 268.161 457.334 267.633 cv
457.334 267.105 457.166 266.697 456.854 266.397 cv
456.53 266.097 456.086 265.941 455.522 265.941 cv
454.334 265.437 mo
453.83 265.317 453.434 265.077 453.146 264.729 cv
452.858 264.381 452.726 263.961 452.726 263.457 cv
452.726 262.761 452.966 262.209 453.47 261.801 cv
453.962 261.393 454.646 261.189 455.522 261.189 cv
456.386 261.189 457.07 261.393 457.574 261.801 cv
458.066 262.209 458.318 262.761 458.318 263.457 cv
458.318 263.961 458.174 264.381 457.886 264.729 cv
457.598 265.077 457.214 265.317 456.71 265.437 cv
457.274 265.569 457.718 265.833 458.042 266.217 cv
458.354 266.601 458.522 267.081 458.522 267.633 cv
458.522 268.485 458.258 269.133 457.742 269.577 cv
457.214 270.033 456.482 270.249 455.522 270.249 cv
454.55 270.249 453.806 270.033 453.29 269.577 cv
452.774 269.133 452.522 268.485 452.522 267.633 cv
452.522 267.081 452.678 266.601 453.002 266.217 cv
453.314 265.833 453.758 265.569 454.334 265.437 cv
453.902 263.565 mo
453.902 264.021 454.034 264.381 454.322 264.633 cv
454.61 264.885 455.006 265.005 455.522 265.005 cv
456.026 265.005 456.422 264.885 456.71 264.633 cv
456.998 264.381 457.142 264.021 457.142 263.565 cv
457.142 263.109 456.998 262.761 456.71 262.509 cv
456.422 262.257 456.026 262.125 455.522 262.125 cv
455.006 262.125 454.61 262.257 454.322 262.509 cv
454.034 262.761 453.902 263.109 453.902 263.565 cv
f
463.154 262.125 mo
462.542 262.125 462.086 262.425 461.774 263.025 cv
461.462 263.625 461.318 264.525 461.318 265.725 cv
461.318 266.925 461.462 267.825 461.774 268.425 cv
462.086 269.025 462.542 269.325 463.154 269.325 cv
463.766 269.325 464.222 269.025 464.534 268.425 cv
464.834 267.825 464.99 266.925 464.99 265.725 cv
464.99 264.525 464.834 263.625 464.534 263.025 cv
464.222 262.425 463.766 262.125 463.154 262.125 cv
463.154 261.189 mo
464.126 261.189 464.87 261.585 465.398 262.353 cv
465.914 263.133 466.178 264.261 466.178 265.725 cv
466.178 267.201 465.914 268.329 465.398 269.097 cv
464.87 269.865 464.126 270.249 463.154 270.249 cv
462.17 270.249 461.414 269.865 460.898 269.097 cv
460.382 268.329 460.13 267.201 460.13 265.725 cv
460.13 264.261 460.382 263.133 460.898 262.353 cv
461.414 261.585 462.17 261.189 463.154 261.189 cv
f
495.427 256.968 mo
495.427 252.968 li
f
495.427 256.968 mo
495.427 252.968 li
@
495.427 29.88 mo
495.427 33.88 li
f
495.427 29.88 mo
495.427 33.88 li
@
489.88 269.913 mo
489.88 268.833 li
490.168 268.977 490.468 269.085 490.78 269.157 cv
491.08 269.229 491.38 269.265 491.68 269.265 cv
492.448 269.265 493.048 269.013 493.456 268.485 cv
493.864 267.957 494.104 267.165 494.176 266.085 cv
493.936 266.421 493.648 266.685 493.312 266.865 cv
492.964 267.045 492.58 267.129 492.16 267.129 cv
491.272 267.129 490.576 266.865 490.072 266.337 cv
489.568 265.809 489.316 265.089 489.316 264.165 cv
489.316 263.277 489.58 262.557 490.108 262.005 cv
490.636 261.465 491.344 261.189 492.232 261.189 cv
493.24 261.189 494.02 261.585 494.548 262.353 cv
495.076 263.133 495.352 264.261 495.352 265.725 cv
495.352 267.117 495.016 268.209 494.368 269.025 cv
493.708 269.841 492.832 270.249 491.728 270.249 cv
491.428 270.249 491.128 270.213 490.828 270.165 cv
490.516 270.117 490.204 270.033 489.88 269.913 cv
492.232 266.205 mo
492.76 266.205 493.18 266.025 493.492 265.665 cv
493.804 265.305 493.96 264.801 493.96 264.165 cv
493.96 263.541 493.804 263.037 493.492 262.677 cv
493.18 262.317 492.76 262.125 492.232 262.125 cv
491.704 262.125 491.284 262.317 490.972 262.677 cv
490.66 263.037 490.504 263.541 490.504 264.165 cv
490.504 264.801 490.66 265.305 490.972 265.665 cv
491.284 266.025 491.704 266.205 492.232 266.205 cv
f
500.008 262.125 mo
499.396 262.125 498.94 262.425 498.628 263.025 cv
498.316 263.625 498.172 264.525 498.172 265.725 cv
498.172 266.925 498.316 267.825 498.628 268.425 cv
498.94 269.025 499.396 269.325 500.008 269.325 cv
500.62 269.325 501.076 269.025 501.388 268.425 cv
501.688 267.825 501.844 266.925 501.844 265.725 cv
501.844 264.525 501.688 263.625 501.388 263.025 cv
501.076 262.425 500.62 262.125 500.008 262.125 cv
500.008 261.189 mo
500.98 261.189 501.724 261.585 502.252 262.353 cv
502.768 263.133 503.032 264.261 503.032 265.725 cv
503.032 267.201 502.768 268.329 502.252 269.097 cv
501.724 269.865 500.98 270.249 500.008 270.249 cv
499.024 270.249 498.268 269.865 497.752 269.097 cv
497.236 268.329 496.984 267.201 496.984 265.725 cv
496.984 264.261 497.236 263.133 497.752 262.353 cv
498.268 261.585 499.024 261.189 500.008 261.189 cv
f
532.311 256.968 mo
532.311 252.968 li
f
532.311 256.968 mo
532.311 252.968 li
@
532.311 29.88 mo
532.311 33.88 li
f
532.311 29.88 mo
532.311 33.88 li
@
523.393 269.097 mo
525.325 269.097 li
525.325 262.425 li
523.225 262.845 li
523.225 261.765 li
525.313 261.345 li
526.501 261.345 li
526.501 269.097 li
528.433 269.097 li
528.433 270.093 li
523.393 270.093 li
523.393 269.097 li
f
533.353 262.125 mo
532.741 262.125 532.285 262.425 531.973 263.025 cv
531.661 263.625 531.517 264.525 531.517 265.725 cv
531.517 266.925 531.661 267.825 531.973 268.425 cv
532.285 269.025 532.741 269.325 533.353 269.325 cv
533.965 269.325 534.421 269.025 534.733 268.425 cv
535.033 267.825 535.189 266.925 535.189 265.725 cv
535.189 264.525 535.033 263.625 534.733 263.025 cv
534.421 262.425 533.965 262.125 533.353 262.125 cv
533.353 261.189 mo
534.325 261.189 535.069 261.585 535.597 262.353 cv
536.113 263.133 536.377 264.261 536.377 265.725 cv
536.377 267.201 536.113 268.329 535.597 269.097 cv
535.069 269.865 534.325 270.249 533.353 270.249 cv
532.369 270.249 531.613 269.865 531.097 269.097 cv
530.581 268.329 530.329 267.201 530.329 265.725 cv
530.329 264.261 530.581 263.133 531.097 262.353 cv
531.613 261.585 532.369 261.189 533.353 261.189 cv
f
540.985 262.125 mo
540.373 262.125 539.917 262.425 539.605 263.025 cv
539.293 263.625 539.149 264.525 539.149 265.725 cv
539.149 266.925 539.293 267.825 539.605 268.425 cv
539.917 269.025 540.373 269.325 540.985 269.325 cv
541.597 269.325 542.053 269.025 542.365 268.425 cv
542.665 267.825 542.821 266.925 542.821 265.725 cv
542.821 264.525 542.665 263.625 542.365 263.025 cv
542.053 262.425 541.597 262.125 540.985 262.125 cv
540.985 261.189 mo
541.957 261.189 542.701 261.585 543.229 262.353 cv
543.745 263.133 544.009 264.261 544.009 265.725 cv
544.009 267.201 543.745 268.329 543.229 269.097 cv
542.701 269.865 541.957 270.249 540.985 270.249 cv
540.001 270.249 539.245 269.865 538.729 269.097 cv
538.213 268.329 537.961 267.201 537.961 265.725 cv
537.961 264.261 538.213 263.133 538.729 262.353 cv
539.245 261.585 540.001 261.189 540.985 261.189 cv
f
215.224 289.557 mo
214.768 289.197 214.384 288.801 214.072 288.345 cv
213.748 287.889 213.484 287.397 213.28 286.893 cv
213.076 286.389 212.92 285.849 212.824 285.285 cv
212.716 284.733 212.668 284.169 212.668 283.593 cv
212.668 283.017 212.716 282.453 212.824 281.889 cv
212.92 281.337 213.076 280.797 213.292 280.269 cv
213.496 279.753 213.76 279.261 214.084 278.805 cv
214.408 278.349 214.792 277.953 215.224 277.617 cv
215.284 277.593 li
215.392 277.593 li
215.452 277.629 li
215.488 277.701 li
215.464 277.773 li
215.068 278.157 214.744 278.577 214.48 279.009 cv
214.216 279.441 214.012 279.909 213.856 280.401 cv
213.7 280.905 213.592 281.409 213.52 281.937 cv
213.448 282.465 213.412 283.017 213.412 283.593 cv
213.412 286.137 214.084 288.057 215.452 289.377 cv
215.488 289.473 li
215.452 289.545 li
215.392 289.581 li
215.284 289.581 li
215.224 289.557 li
f
217.326 288.561 mo
217.47 288.669 217.65 288.729 217.866 288.729 cv
218.154 288.729 218.382 288.405 218.562 287.781 cv
218.634 287.469 218.838 286.485 219.174 284.781 cv
219.726 281.841 li
218.694 281.841 li
218.61 281.841 218.574 281.793 218.574 281.685 cv
218.598 281.517 218.658 281.421 218.73 281.421 cv
219.798 281.421 li
219.942 280.641 li
219.99 280.401 220.026 280.197 220.074 280.017 cv
220.11 279.849 220.146 279.681 220.194 279.537 cv
220.242 279.393 220.302 279.225 220.398 279.033 cv
220.53 278.769 220.71 278.553 220.95 278.385 cv
221.178 278.217 221.43 278.133 221.706 278.133 cv
221.874 278.133 222.042 278.169 222.21 278.229 cv
222.378 278.301 222.51 278.397 222.618 278.517 cv
222.726 278.649 222.786 278.805 222.786 278.973 cv
222.786 279.189 222.714 279.369 222.582 279.513 cv
222.438 279.657 222.282 279.729 222.09 279.729 cv
221.958 279.729 221.85 279.693 221.754 279.609 cv
221.658 279.537 221.622 279.429 221.622 279.297 cv
221.622 279.129 221.682 278.973 221.802 278.841 cv
221.922 278.709 222.066 278.637 222.246 278.613 cv
222.09 278.505 221.91 278.445 221.694 278.445 cv
221.574 278.445 221.454 278.505 221.346 278.613 cv
221.238 278.733 221.166 278.853 221.142 278.973 cv
221.094 279.189 220.974 279.741 220.806 280.629 cv
220.662 281.421 li
221.898 281.421 li
221.97 281.421 222.018 281.481 222.018 281.577 cv
221.982 281.685 li
221.934 281.805 li
221.862 281.841 li
220.578 281.841 li
220.026 284.769 li
219.954 285.201 219.87 285.633 219.774 286.065 cv
219.678 286.497 219.558 286.941 219.39 287.409 cv
219.222 287.865 219.018 288.261 218.754 288.573 cv
218.49 288.885 218.19 289.041 217.842 289.041 cv
217.566 289.041 217.326 288.957 217.11 288.813 cv
216.894 288.657 216.798 288.453 216.798 288.201 cv
216.798 287.985 216.858 287.805 216.99 287.661 cv
217.122 287.517 217.29 287.445 217.494 287.445 cv
217.614 287.445 217.722 287.481 217.818 287.565 cv
217.914 287.637 217.962 287.745 217.962 287.877 cv
217.962 288.045 217.89 288.201 217.77 288.345 cv
217.638 288.489 217.494 288.561 217.326 288.561 cv
f
222.807 289.581 mo
222.699 289.473 li
222.723 289.401 li
224.091 288.057 224.775 286.137 224.775 283.593 cv
224.775 281.049 224.091 279.117 222.747 277.797 cv
222.699 277.701 li
222.735 277.629 li
222.807 277.593 li
222.915 277.593 li
222.975 277.617 li
223.551 278.073 224.031 278.625 224.415 279.273 cv
224.799 279.921 225.075 280.617 225.255 281.349 cv
225.423 282.081 225.519 282.825 225.519 283.593 cv
225.519 284.169 225.471 284.721 225.375 285.273 cv
225.279 285.825 225.123 286.353 224.919 286.881 cv
224.703 287.409 224.439 287.889 224.127 288.345 cv
223.803 288.801 223.419 289.197 222.975 289.557 cv
222.915 289.581 li
222.807 289.581 li
f
230.398 286.437 mo
230.422 286.329 li
230.47 286.221 li
230.566 286.173 li
231.25 286.173 231.706 286.161 231.934 286.113 cv
232.15 286.065 232.27 285.945 232.318 285.765 cv
233.962 279.177 li
233.986 279.081 234.01 278.997 234.01 278.913 cv
234.01 278.853 233.866 278.817 233.59 278.817 cv
232.894 278.817 li
232.354 278.817 231.934 278.901 231.646 279.069 cv
231.358 279.237 231.142 279.453 231.01 279.717 cv
230.866 279.981 230.698 280.425 230.482 281.037 cv
230.362 281.145 li
230.254 281.145 li
230.17 281.145 230.134 281.097 230.134 280.989 cv
230.986 278.505 li
231.106 278.397 li
238.198 278.397 li
238.27 278.397 238.318 278.457 238.318 278.553 cv
237.922 281.037 li
237.874 281.109 li
237.802 281.145 li
237.694 281.145 li
237.61 281.145 237.574 281.097 237.574 280.989 cv
237.658 280.425 237.706 280.029 237.706 279.789 cv
237.706 279.513 237.646 279.297 237.526 279.153 cv
237.406 279.009 237.25 278.925 237.07 278.877 cv
236.878 278.841 236.638 278.817 236.338 278.817 cv
235.63 278.817 li
235.414 278.817 235.27 278.841 235.198 278.877 cv
235.126 278.925 235.054 279.033 235.006 279.225 cv
233.362 285.813 li
233.35 285.861 li
233.338 285.921 li
233.338 286.029 233.398 286.089 233.518 286.113 cv
233.722 286.161 234.166 286.173 234.85 286.173 cv
234.922 286.173 234.97 286.233 234.97 286.329 cv
234.934 286.449 234.91 286.521 234.898 286.545 cv
234.766 286.593 li
230.518 286.593 li
230.434 286.593 230.398 286.545 230.398 286.437 cv
f
237.49 286.377 mo
237.502 286.269 li
239.242 279.333 li
239.266 279.201 239.29 279.093 239.302 279.009 cv
239.302 278.889 239.038 278.817 238.522 278.817 cv
238.438 278.817 238.402 278.769 238.402 278.661 cv
238.426 278.553 li
238.474 278.445 li
238.57 278.397 li
240.19 278.265 li
240.226 278.265 li
240.262 278.301 li
240.31 278.325 li
240.334 278.421 li
239.398 282.165 li
239.878 281.589 240.466 281.289 241.15 281.289 cv
241.426 281.289 241.666 281.349 241.87 281.445 cv
242.074 281.541 242.23 281.697 242.35 281.889 cv
242.47 282.081 242.53 282.321 242.53 282.585 cv
242.53 282.921 242.458 283.317 242.314 283.773 cv
242.17 284.241 241.978 284.757 241.762 285.333 cv
241.642 285.597 241.594 285.837 241.594 286.053 cv
241.594 286.293 241.678 286.413 241.87 286.413 cv
242.182 286.413 242.434 286.245 242.65 285.909 cv
242.854 285.573 242.998 285.213 243.094 284.829 cv
243.19 284.757 li
243.334 284.757 li
243.406 284.793 li
243.442 284.865 li
243.43 284.901 li
243.358 285.189 243.25 285.477 243.106 285.753 cv
242.962 286.041 242.794 286.269 242.59 286.449 cv
242.374 286.617 242.134 286.713 241.846 286.713 cv
241.558 286.713 241.318 286.617 241.126 286.437 cv
240.922 286.245 240.826 286.017 240.826 285.729 cv
240.826 285.585 240.85 285.429 240.922 285.261 cv
241.138 284.661 241.33 284.133 241.486 283.653 cv
241.63 283.185 241.714 282.765 241.714 282.405 cv
241.714 282.177 241.666 281.985 241.57 281.829 cv
241.474 281.685 241.33 281.601 241.126 281.601 cv
240.694 281.601 240.31 281.733 239.998 281.997 cv
239.674 282.261 239.398 282.609 239.17 283.041 cv
238.354 286.317 li
238.318 286.437 238.258 286.533 238.174 286.605 cv
238.078 286.677 237.982 286.713 237.862 286.713 cv
237.754 286.713 237.67 286.677 237.598 286.617 cv
237.526 286.557 237.49 286.473 237.49 286.377 cv
f
246.18 286.713 mo
245.796 286.713 245.46 286.617 245.172 286.425 cv
244.884 286.233 244.668 285.957 244.524 285.621 cv
244.368 285.285 244.296 284.937 244.296 284.553 cv
244.296 283.989 244.44 283.449 244.728 282.945 cv
245.016 282.441 245.4 282.045 245.892 281.745 cv
246.384 281.445 246.912 281.289 247.476 281.289 cv
247.812 281.289 248.112 281.385 248.376 281.565 cv
248.628 281.745 248.76 281.997 248.76 282.321 cv
248.76 282.789 248.568 283.137 248.208 283.353 cv
247.836 283.581 247.416 283.725 246.96 283.773 cv
246.504 283.821 245.988 283.845 245.436 283.845 cv
245.4 283.845 li
245.268 284.325 245.208 284.733 245.208 285.069 cv
245.208 285.429 245.28 285.741 245.448 286.005 cv
245.616 286.281 245.868 286.413 246.204 286.413 cv
246.684 286.413 247.14 286.305 247.584 286.089 cv
248.016 285.873 248.376 285.561 248.652 285.177 cv
248.748 285.141 li
248.868 285.213 li
248.928 285.333 li
248.904 285.405 li
248.616 285.813 248.22 286.137 247.728 286.365 cv
247.224 286.593 246.708 286.713 246.18 286.713 cv
245.472 283.533 mo
245.928 283.533 246.36 283.521 246.756 283.473 cv
247.152 283.425 247.512 283.317 247.836 283.149 cv
248.148 282.981 248.316 282.705 248.316 282.333 cv
248.316 282.189 248.268 282.057 248.184 281.949 cv
248.1 281.841 247.992 281.757 247.872 281.697 cv
247.74 281.637 247.608 281.601 247.464 281.601 cv
247.128 281.601 246.816 281.697 246.552 281.877 cv
246.276 282.069 246.048 282.309 245.88 282.597 cv
245.7 282.897 245.568 283.209 245.472 283.533 cv
f
253.431 286.389 mo
253.443 286.281 li
254.343 282.705 li
254.391 282.489 254.427 282.285 254.427 282.117 cv
254.427 281.781 254.307 281.601 254.079 281.601 cv
253.827 281.601 253.635 281.757 253.515 282.057 cv
253.395 282.357 253.275 282.729 253.167 283.185 cv
253.131 283.245 li
253.071 283.257 li
252.927 283.257 li
252.855 283.221 li
252.831 283.137 li
252.915 282.789 252.999 282.489 253.083 282.249 cv
253.155 282.009 253.287 281.793 253.455 281.589 cv
253.623 281.397 253.827 281.289 254.091 281.289 cv
254.379 281.289 254.643 281.385 254.883 281.577 cv
255.111 281.769 255.231 282.009 255.231 282.297 cv
255.471 281.985 255.747 281.745 256.071 281.565 cv
256.383 281.385 256.731 281.289 257.091 281.289 cv
257.367 281.289 257.607 281.349 257.823 281.445 cv
258.027 281.541 258.183 281.697 258.303 281.889 cv
258.423 282.081 258.483 282.321 258.483 282.585 cv
258.483 282.921 258.399 283.317 258.255 283.773 cv
258.111 284.241 257.931 284.757 257.715 285.333 cv
257.595 285.597 257.547 285.837 257.547 286.053 cv
257.547 286.293 257.631 286.413 257.823 286.413 cv
258.135 286.413 258.387 286.245 258.603 285.909 cv
258.807 285.573 258.951 285.213 259.047 284.829 cv
259.143 284.757 li
259.287 284.757 li
259.359 284.793 li
259.395 284.865 li
259.383 284.901 li
259.275 285.357 259.083 285.777 258.819 286.149 cv
258.543 286.533 258.207 286.713 257.799 286.713 cv
257.511 286.713 257.271 286.617 257.079 286.437 cv
256.875 286.245 256.779 286.017 256.779 285.729 cv
256.779 285.585 256.803 285.429 256.875 285.261 cv
256.971 284.997 257.079 284.685 257.211 284.325 cv
257.343 283.965 257.451 283.629 257.535 283.293 cv
257.619 282.957 257.667 282.669 257.667 282.405 cv
257.667 282.189 257.619 281.997 257.523 281.841 cv
257.427 281.685 257.283 281.601 257.067 281.601 cv
256.767 281.601 256.491 281.673 256.251 281.793 cv
256.011 281.925 255.795 282.093 255.615 282.309 cv
255.423 282.525 255.255 282.777 255.111 283.065 cv
254.295 286.329 li
254.271 286.449 254.211 286.533 254.115 286.605 cv
254.019 286.677 253.911 286.713 253.791 286.713 cv
253.695 286.713 253.611 286.677 253.539 286.629 cv
253.467 286.581 253.431 286.497 253.431 286.389 cv
f
260.98 285.285 mo
260.98 285.021 261.016 284.757 261.088 284.481 cv
261.16 284.217 261.256 283.905 261.376 283.569 cv
261.496 283.233 261.616 282.933 261.712 282.681 cv
261.808 282.393 261.868 282.153 261.868 281.961 cv
261.868 281.721 261.772 281.601 261.604 281.601 cv
261.292 281.601 261.028 281.769 260.824 282.093 cv
260.608 282.429 260.464 282.789 260.368 283.185 cv
260.272 283.257 li
260.128 283.257 li
260.032 283.149 li
260.032 283.113 li
260.152 282.633 260.356 282.213 260.62 281.841 cv
260.884 281.481 261.22 281.289 261.628 281.289 cv
261.916 281.289 262.156 281.385 262.348 281.577 cv
262.54 281.769 262.648 281.997 262.648 282.285 cv
262.648 282.441 262.612 282.597 262.552 282.753 cv
262.504 282.849 262.42 283.065 262.3 283.389 cv
262.18 283.725 262.084 283.989 262.024 284.205 cv
261.952 284.421 261.904 284.637 261.856 284.841 cv
261.808 285.057 261.796 285.261 261.796 285.465 cv
261.796 285.729 261.844 285.957 261.964 286.137 cv
262.072 286.329 262.252 286.413 262.516 286.413 cv
263.02 286.413 263.476 286.101 263.86 285.465 cv
263.884 285.381 li
263.896 285.285 li
264.76 281.805 li
264.784 281.709 264.844 281.613 264.94 281.541 cv
265.036 281.469 265.144 281.421 265.264 281.421 cv
265.36 281.421 265.444 281.457 265.516 281.517 cv
265.588 281.577 265.624 281.661 265.624 281.757 cv
265.612 281.853 li
264.748 285.309 li
264.688 285.549 264.664 285.753 264.664 285.897 cv
264.664 286.245 264.772 286.413 265.012 286.413 cv
265.264 286.413 265.456 286.257 265.588 285.933 cv
265.708 285.621 265.816 285.249 265.912 284.829 cv
266.008 284.757 li
266.152 284.757 li
266.224 284.805 li
266.26 284.877 li
266.164 285.225 266.08 285.525 266.008 285.765 cv
265.924 286.005 265.792 286.233 265.624 286.425 cv
265.456 286.617 265.24 286.713 264.988 286.713 cv
264.724 286.713 264.496 286.641 264.304 286.521 cv
264.1 286.389 263.968 286.197 263.896 285.957 cv
263.704 286.197 263.5 286.377 263.26 286.509 cv
263.02 286.641 262.756 286.713 262.492 286.713 cv
262.024 286.713 261.652 286.593 261.388 286.341 cv
261.112 286.101 260.98 285.741 260.98 285.285 cv
f
267.493 286.389 mo
267.505 286.281 li
268.405 282.705 li
268.453 282.489 268.489 282.285 268.489 282.117 cv
268.489 281.781 268.369 281.601 268.141 281.601 cv
267.889 281.601 267.697 281.757 267.577 282.057 cv
267.457 282.357 267.337 282.729 267.229 283.185 cv
267.193 283.245 li
267.133 283.257 li
266.989 283.257 li
266.917 283.221 li
266.893 283.137 li
266.977 282.789 267.061 282.489 267.145 282.249 cv
267.217 282.009 267.349 281.793 267.517 281.589 cv
267.685 281.397 267.889 281.289 268.153 281.289 cv
268.441 281.289 268.705 281.385 268.945 281.577 cv
269.173 281.769 269.293 282.009 269.293 282.297 cv
269.533 281.985 269.809 281.745 270.133 281.565 cv
270.445 281.385 270.793 281.289 271.153 281.289 cv
271.525 281.289 271.849 281.385 272.125 281.577 cv
272.401 281.769 272.545 282.045 272.545 282.405 cv
272.785 282.057 273.073 281.781 273.409 281.589 cv
273.733 281.397 274.093 281.289 274.489 281.289 cv
274.897 281.289 275.233 281.409 275.485 281.625 cv
275.737 281.853 275.869 282.177 275.869 282.585 cv
275.869 282.921 275.785 283.317 275.641 283.773 cv
275.497 284.241 275.317 284.757 275.101 285.333 cv
274.981 285.621 274.933 285.861 274.933 286.053 cv
274.933 286.293 275.017 286.413 275.209 286.413 cv
275.521 286.413 275.773 286.245 275.989 285.909 cv
276.193 285.573 276.337 285.213 276.433 284.829 cv
276.529 284.757 li
276.673 284.757 li
276.745 284.793 li
276.781 284.865 li
276.769 284.901 li
276.649 285.357 276.457 285.777 276.193 286.149 cv
275.929 286.533 275.593 286.713 275.185 286.713 cv
274.897 286.713 274.657 286.617 274.465 286.437 cv
274.261 286.245 274.165 286.017 274.165 285.729 cv
274.165 285.597 274.189 285.441 274.261 285.261 cv
274.477 284.661 274.669 284.133 274.825 283.653 cv
274.969 283.185 275.053 282.765 275.053 282.405 cv
275.053 282.189 275.005 281.997 274.921 281.841 cv
274.825 281.685 274.681 281.601 274.465 281.601 cv
274.033 281.601 273.649 281.745 273.325 282.009 cv
273.001 282.273 272.725 282.633 272.497 283.065 cv
272.461 283.245 li
271.693 286.329 li
271.657 286.449 271.597 286.533 271.501 286.605 cv
271.405 286.677 271.297 286.713 271.189 286.713 cv
271.093 286.713 271.009 286.677 270.937 286.629 cv
270.865 286.581 270.829 286.497 270.829 286.389 cv
270.841 286.281 li
271.609 283.221 li
271.681 282.897 271.729 282.621 271.729 282.405 cv
271.729 282.189 271.681 281.997 271.585 281.841 cv
271.489 281.685 271.345 281.601 271.129 281.601 cv
270.829 281.601 270.553 281.673 270.313 281.793 cv
270.073 281.925 269.857 282.093 269.677 282.309 cv
269.485 282.525 269.317 282.777 269.173 283.065 cv
268.357 286.329 li
268.333 286.449 268.273 286.533 268.177 286.605 cv
268.081 286.677 267.973 286.713 267.853 286.713 cv
267.757 286.713 267.673 286.677 267.601 286.629 cv
267.529 286.581 267.493 286.497 267.493 286.389 cv
f
279.18 286.713 mo
278.688 286.713 278.304 286.533 278.04 286.161 cv
277.776 285.789 277.644 285.345 277.644 284.829 cv
277.644 284.757 277.656 284.613 277.692 284.397 cv
277.728 284.181 277.752 284.049 277.752 283.989 cv
278.916 279.333 li
278.94 279.201 278.964 279.093 278.976 279.009 cv
278.976 278.889 278.712 278.817 278.196 278.817 cv
278.112 278.817 278.076 278.769 278.076 278.661 cv
278.1 278.553 li
278.148 278.445 li
278.244 278.397 li
279.864 278.265 li
279.96 278.265 280.008 278.325 280.008 278.421 cv
279.12 281.961 li
279.576 281.517 280.032 281.289 280.488 281.289 cv
280.824 281.289 281.124 281.385 281.364 281.565 cv
281.604 281.745 281.796 281.985 281.916 282.273 cv
282.036 282.561 282.096 282.873 282.096 283.209 cv
282.096 283.593 282.012 284.001 281.868 284.409 cv
281.712 284.817 281.508 285.201 281.244 285.561 cv
280.98 285.921 280.668 286.197 280.308 286.401 cv
279.948 286.605 279.576 286.713 279.18 286.713 cv
279.204 286.413 mo
279.468 286.413 279.732 286.305 279.972 286.077 cv
280.212 285.849 280.404 285.585 280.548 285.297 cv
280.704 284.985 280.848 284.553 280.992 284.001 cv
281.136 283.449 281.208 283.017 281.208 282.681 cv
281.208 282.393 281.148 282.141 281.028 281.925 cv
280.908 281.709 280.716 281.601 280.464 281.601 cv
280.176 281.601 279.9 281.709 279.636 281.925 cv
279.372 282.141 279.132 282.393 278.94 282.681 cv
278.604 284.037 li
278.472 284.541 278.4 284.949 278.4 285.249 cv
278.4 285.561 278.46 285.825 278.592 286.065 cv
278.724 286.305 278.928 286.413 279.204 286.413 cv
f
284.667 286.713 mo
284.283 286.713 283.947 286.617 283.659 286.425 cv
283.371 286.233 283.155 285.957 283.011 285.621 cv
282.855 285.285 282.783 284.937 282.783 284.553 cv
282.783 283.989 282.927 283.449 283.215 282.945 cv
283.503 282.441 283.887 282.045 284.379 281.745 cv
284.871 281.445 285.399 281.289 285.963 281.289 cv
286.299 281.289 286.599 281.385 286.863 281.565 cv
287.115 281.745 287.247 281.997 287.247 282.321 cv
287.247 282.789 287.055 283.137 286.695 283.353 cv
286.323 283.581 285.903 283.725 285.447 283.773 cv
284.991 283.821 284.475 283.845 283.923 283.845 cv
283.887 283.845 li
283.755 284.325 283.695 284.733 283.695 285.069 cv
283.695 285.429 283.767 285.741 283.935 286.005 cv
284.103 286.281 284.355 286.413 284.691 286.413 cv
285.171 286.413 285.627 286.305 286.071 286.089 cv
286.503 285.873 286.863 285.561 287.139 285.177 cv
287.235 285.141 li
287.355 285.213 li
287.415 285.333 li
287.391 285.405 li
287.103 285.813 286.707 286.137 286.215 286.365 cv
285.711 286.593 285.195 286.713 284.667 286.713 cv
283.959 283.533 mo
284.415 283.533 284.847 283.521 285.243 283.473 cv
285.639 283.425 285.999 283.317 286.323 283.149 cv
286.635 282.981 286.803 282.705 286.803 282.333 cv
286.803 282.189 286.755 282.057 286.671 281.949 cv
286.587 281.841 286.479 281.757 286.359 281.697 cv
286.227 281.637 286.095 281.601 285.951 281.601 cv
285.615 281.601 285.303 281.697 285.039 281.877 cv
284.763 282.069 284.535 282.309 284.367 282.597 cv
284.187 282.897 284.055 283.209 283.959 283.533 cv
f
288.757 286.389 mo
288.769 286.281 li
289.669 282.705 li
289.717 282.489 289.753 282.285 289.753 282.117 cv
289.753 281.781 289.633 281.601 289.405 281.601 cv
289.153 281.601 288.961 281.757 288.841 282.057 cv
288.721 282.357 288.601 282.729 288.493 283.185 cv
288.457 283.245 li
288.397 283.257 li
288.253 283.257 li
288.181 283.221 li
288.157 283.137 li
288.241 282.789 288.325 282.489 288.409 282.249 cv
288.481 282.009 288.613 281.793 288.781 281.589 cv
288.949 281.397 289.153 281.289 289.417 281.289 cv
289.693 281.289 289.933 281.373 290.149 281.529 cv
290.353 281.697 290.485 281.901 290.533 282.165 cv
290.725 281.901 290.953 281.697 291.217 281.529 cv
291.481 281.373 291.769 281.289 292.081 281.289 cv
292.333 281.289 292.561 281.373 292.753 281.517 cv
292.945 281.661 293.041 281.865 293.041 282.117 cv
293.041 282.321 292.969 282.501 292.849 282.645 cv
292.717 282.801 292.549 282.873 292.345 282.873 cv
292.213 282.873 292.105 282.837 292.021 282.753 cv
291.925 282.681 291.889 282.573 291.889 282.441 cv
291.889 282.273 291.949 282.117 292.081 281.973 cv
292.201 281.829 292.357 281.757 292.525 281.757 cv
292.393 281.661 292.237 281.601 292.057 281.601 cv
291.709 281.601 291.409 281.733 291.157 281.973 cv
290.905 282.213 290.677 282.525 290.473 282.897 cv
289.621 286.329 li
289.597 286.449 289.537 286.533 289.441 286.605 cv
289.345 286.677 289.237 286.713 289.117 286.713 cv
289.021 286.713 288.937 286.677 288.865 286.629 cv
288.793 286.581 288.757 286.497 288.757 286.389 cv
f
298.819 286.713 mo
298.436 286.713 298.099 286.617 297.811 286.449 cv
297.512 286.281 297.284 286.041 297.128 285.729 cv
296.96 285.429 296.888 285.081 296.888 284.697 cv
296.888 284.157 297.031 283.617 297.344 283.089 cv
297.643 282.561 298.039 282.129 298.543 281.793 cv
299.048 281.457 299.576 281.289 300.128 281.289 cv
300.415 281.289 300.68 281.349 300.919 281.445 cv
301.147 281.541 301.352 281.685 301.52 281.865 cv
301.688 282.057 301.819 282.273 301.915 282.513 cv
302.012 282.765 302.06 283.029 302.06 283.317 cv
302.06 283.737 301.964 284.145 301.796 284.553 cv
301.616 284.961 301.375 285.321 301.076 285.657 cv
300.763 285.993 300.415 286.245 300.02 286.437 cv
299.624 286.617 299.228 286.713 298.819 286.713 cv
298.844 286.413 mo
299.203 286.413 299.527 286.293 299.815 286.053 cv
300.104 285.813 300.355 285.501 300.548 285.129 cv
300.74 284.769 300.884 284.373 300.979 283.965 cv
301.076 283.557 301.135 283.185 301.135 282.849 cv
301.135 282.513 301.039 282.213 300.871 281.973 cv
300.703 281.733 300.44 281.601 300.104 281.601 cv
299.635 281.601 299.228 281.805 298.88 282.201 cv
298.52 282.609 298.255 283.089 298.076 283.641 cv
297.896 284.193 297.811 284.709 297.811 285.165 cv
297.811 285.513 297.896 285.813 298.076 286.053 cv
298.255 286.293 298.508 286.413 298.844 286.413 cv
f
303.378 288.561 mo
303.522 288.669 303.702 288.729 303.918 288.729 cv
304.206 288.729 304.434 288.405 304.614 287.781 cv
304.686 287.469 304.89 286.485 305.226 284.781 cv
305.778 281.841 li
304.746 281.841 li
304.662 281.841 304.626 281.793 304.626 281.685 cv
304.65 281.517 304.71 281.421 304.782 281.421 cv
305.85 281.421 li
305.994 280.641 li
306.042 280.401 306.078 280.197 306.126 280.017 cv
306.162 279.849 306.198 279.681 306.246 279.537 cv
306.294 279.393 306.354 279.225 306.45 279.033 cv
306.582 278.769 306.762 278.553 307.002 278.385 cv
307.23 278.217 307.482 278.133 307.758 278.133 cv
307.926 278.133 308.094 278.169 308.262 278.229 cv
308.43 278.301 308.562 278.397 308.67 278.517 cv
308.778 278.649 308.838 278.805 308.838 278.973 cv
308.838 279.189 308.766 279.369 308.634 279.513 cv
308.49 279.657 308.334 279.729 308.142 279.729 cv
308.01 279.729 307.902 279.693 307.806 279.609 cv
307.71 279.537 307.674 279.429 307.674 279.297 cv
307.674 279.129 307.734 278.973 307.854 278.841 cv
307.974 278.709 308.118 278.637 308.298 278.613 cv
308.142 278.505 307.962 278.445 307.746 278.445 cv
307.626 278.445 307.506 278.505 307.398 278.613 cv
307.29 278.733 307.218 278.853 307.194 278.973 cv
307.146 279.189 307.026 279.741 306.858 280.629 cv
306.714 281.421 li
307.95 281.421 li
308.022 281.421 308.07 281.481 308.07 281.577 cv
308.034 281.685 li
307.986 281.805 li
307.914 281.841 li
306.63 281.841 li
306.078 284.769 li
306.006 285.201 305.922 285.633 305.826 286.065 cv
305.73 286.497 305.61 286.941 305.442 287.409 cv
305.274 287.865 305.07 288.261 304.806 288.573 cv
304.542 288.885 304.242 289.041 303.894 289.041 cv
303.618 289.041 303.378 288.957 303.162 288.813 cv
302.946 288.657 302.85 288.453 302.85 288.201 cv
302.85 287.985 302.91 287.805 303.042 287.661 cv
303.174 287.517 303.342 287.445 303.546 287.445 cv
303.666 287.445 303.774 287.481 303.87 287.565 cv
303.966 287.637 304.014 287.745 304.014 287.877 cv
304.014 288.045 303.942 288.201 303.822 288.345 cv
303.69 288.489 303.546 288.561 303.378 288.561 cv
f
313.652 286.713 mo
313.268 286.713 312.932 286.617 312.644 286.449 cv
312.344 286.281 312.116 286.041 311.96 285.729 cv
311.792 285.429 311.72 285.081 311.72 284.697 cv
311.72 284.157 311.864 283.617 312.176 283.089 cv
312.476 282.561 312.872 282.129 313.376 281.793 cv
313.88 281.457 314.408 281.289 314.96 281.289 cv
315.248 281.289 315.512 281.349 315.752 281.445 cv
315.98 281.541 316.184 281.685 316.352 281.865 cv
316.52 282.057 316.652 282.273 316.748 282.513 cv
316.844 282.765 316.892 283.029 316.892 283.317 cv
316.892 283.737 316.796 284.145 316.628 284.553 cv
316.448 284.961 316.208 285.321 315.908 285.657 cv
315.596 285.993 315.248 286.245 314.852 286.437 cv
314.456 286.617 314.06 286.713 313.652 286.713 cv
313.676 286.413 mo
314.036 286.413 314.36 286.293 314.648 286.053 cv
314.936 285.813 315.188 285.501 315.38 285.129 cv
315.572 284.769 315.716 284.373 315.812 283.965 cv
315.908 283.557 315.968 283.185 315.968 282.849 cv
315.968 282.513 315.872 282.213 315.704 281.973 cv
315.536 281.733 315.272 281.601 314.936 281.601 cv
314.468 281.601 314.06 281.805 313.712 282.201 cv
313.352 282.609 313.088 283.089 312.908 283.641 cv
312.728 284.193 312.644 284.709 312.644 285.165 cv
312.644 285.513 312.728 285.813 312.908 286.053 cv
313.088 286.293 313.34 286.413 313.676 286.413 cv
f
316.759 288.909 mo
316.687 288.909 316.651 288.849 316.651 288.753 cv
316.675 288.573 316.735 288.489 316.807 288.489 cv
317.047 288.489 317.215 288.465 317.311 288.417 cv
317.407 288.369 317.491 288.261 317.551 288.081 cv
318.907 282.693 li
318.955 282.549 318.991 282.357 318.991 282.117 cv
318.991 281.781 318.871 281.601 318.643 281.601 cv
318.391 281.601 318.199 281.757 318.079 282.057 cv
317.959 282.357 317.839 282.729 317.731 283.185 cv
317.635 283.257 li
317.491 283.257 li
317.431 283.221 li
317.395 283.137 li
317.479 282.789 317.563 282.489 317.647 282.249 cv
317.719 282.009 317.851 281.793 318.019 281.589 cv
318.187 281.397 318.391 281.289 318.655 281.289 cv
318.919 281.289 319.159 281.373 319.375 281.529 cv
319.579 281.685 319.711 281.889 319.771 282.153 cv
319.987 281.901 320.227 281.697 320.491 281.529 cv
320.755 281.373 321.031 281.289 321.319 281.289 cv
321.655 281.289 321.943 281.385 322.195 281.565 cv
322.435 281.745 322.627 281.985 322.747 282.273 cv
322.867 282.561 322.939 282.873 322.939 283.209 cv
322.939 283.725 322.807 284.253 322.543 284.805 cv
322.279 285.357 321.919 285.813 321.475 286.173 cv
321.019 286.533 320.539 286.713 320.023 286.713 cv
319.783 286.713 319.579 286.641 319.387 286.521 cv
319.195 286.401 319.039 286.221 318.943 286.005 cv
318.403 288.129 li
318.379 288.249 318.367 288.309 318.367 288.333 cv
318.367 288.429 318.631 288.489 319.159 288.489 cv
319.231 288.489 319.279 288.537 319.279 288.645 cv
319.255 288.741 319.231 288.813 319.207 288.849 cv
319.075 288.909 li
316.759 288.909 li
320.035 286.413 mo
320.311 286.413 320.563 286.305 320.803 286.077 cv
321.043 285.849 321.235 285.585 321.391 285.297 cv
321.487 285.081 321.595 284.829 321.691 284.517 cv
321.787 284.205 321.871 283.881 321.943 283.521 cv
322.015 283.173 322.051 282.897 322.051 282.681 cv
322.051 282.501 322.027 282.333 321.979 282.165 cv
321.931 282.009 321.847 281.877 321.739 281.769 cv
321.619 281.661 321.475 281.601 321.295 281.601 cv
320.995 281.601 320.719 281.709 320.455 281.913 cv
320.191 282.129 319.963 282.381 319.759 282.693 cv
319.759 282.729 li
319.099 285.381 li
319.147 285.669 319.255 285.921 319.411 286.113 cv
319.567 286.317 319.771 286.413 320.035 286.413 cv
f
323.826 285.621 mo
323.826 285.501 323.838 285.393 323.862 285.285 cv
324.726 281.841 li
323.466 281.841 li
323.382 281.841 323.346 281.793 323.346 281.685 cv
323.37 281.517 323.43 281.421 323.502 281.421 cv
324.834 281.421 li
325.314 279.465 li
325.338 279.369 325.398 279.273 325.494 279.201 cv
325.59 279.129 325.698 279.081 325.818 279.081 cv
325.914 279.081 325.998 279.117 326.07 279.177 cv
326.142 279.237 326.178 279.321 326.178 279.417 cv
326.166 279.477 li
326.166 279.513 li
325.686 281.421 li
326.922 281.421 li
326.994 281.421 327.042 281.481 327.042 281.577 cv
327.018 281.673 li
326.97 281.793 li
326.886 281.841 li
325.578 281.841 li
324.714 285.309 li
324.654 285.537 324.63 285.729 324.63 285.897 cv
324.63 286.245 324.738 286.413 324.978 286.413 cv
325.326 286.413 325.638 286.257 325.914 285.921 cv
326.178 285.585 326.394 285.225 326.538 284.829 cv
326.634 284.757 li
326.778 284.757 li
326.85 284.793 li
326.886 284.865 li
326.874 284.901 li
326.694 285.381 326.442 285.813 326.106 286.173 cv
325.77 286.533 325.386 286.713 324.954 286.713 cv
324.63 286.713 324.366 286.605 324.15 286.413 cv
323.934 286.209 323.826 285.945 323.826 285.621 cv
f
328.348 285.729 mo
328.348 285.585 328.372 285.429 328.444 285.261 cv
329.416 282.681 li
329.512 282.393 329.572 282.153 329.572 281.961 cv
329.572 281.721 329.476 281.601 329.308 281.601 cv
328.996 281.601 328.732 281.769 328.528 282.093 cv
328.312 282.429 328.168 282.789 328.072 283.185 cv
327.976 283.257 li
327.832 283.257 li
327.736 283.149 li
327.736 283.113 li
327.856 282.633 328.06 282.213 328.324 281.841 cv
328.588 281.481 328.924 281.289 329.332 281.289 cv
329.62 281.289 329.86 281.385 330.052 281.577 cv
330.244 281.769 330.352 281.997 330.352 282.285 cv
330.352 282.441 330.316 282.597 330.256 282.753 cv
329.284 285.333 li
329.164 285.597 329.116 285.837 329.116 286.053 cv
329.116 286.293 329.2 286.413 329.392 286.413 cv
329.704 286.413 329.956 286.245 330.172 285.909 cv
330.376 285.573 330.52 285.213 330.616 284.829 cv
330.712 284.757 li
330.856 284.757 li
330.928 284.793 li
330.964 284.865 li
330.952 284.901 li
330.832 285.357 330.64 285.777 330.376 286.149 cv
330.1 286.533 329.764 286.713 329.368 286.713 cv
329.08 286.713 328.84 286.617 328.648 286.437 cv
328.444 286.245 328.348 286.017 328.348 285.729 cv
329.704 279.321 mo
329.704 279.153 329.764 279.009 329.908 278.865 cv
330.052 278.733 330.208 278.661 330.376 278.661 cv
330.508 278.661 330.616 278.709 330.712 278.793 cv
330.796 278.877 330.844 278.985 330.844 279.105 cv
330.844 279.285 330.772 279.441 330.628 279.573 cv
330.484 279.717 330.328 279.777 330.16 279.777 cv
330.028 279.777 329.92 279.741 329.836 279.645 cv
329.74 279.561 329.704 279.453 329.704 279.321 cv
f
333.955 286.713 mo
333.571 286.713 333.235 286.617 332.947 286.449 cv
332.647 286.281 332.419 286.041 332.263 285.729 cv
332.095 285.429 332.023 285.081 332.023 284.697 cv
332.023 284.157 332.167 283.617 332.479 283.089 cv
332.779 282.561 333.175 282.129 333.679 281.793 cv
334.183 281.457 334.711 281.289 335.263 281.289 cv
335.551 281.289 335.815 281.349 336.055 281.445 cv
336.283 281.541 336.487 281.685 336.655 281.865 cv
336.823 282.057 336.955 282.273 337.051 282.513 cv
337.147 282.765 337.195 283.029 337.195 283.317 cv
337.195 283.737 337.099 284.145 336.931 284.553 cv
336.751 284.961 336.511 285.321 336.211 285.657 cv
335.899 285.993 335.551 286.245 335.155 286.437 cv
334.759 286.617 334.363 286.713 333.955 286.713 cv
333.979 286.413 mo
334.339 286.413 334.663 286.293 334.951 286.053 cv
335.239 285.813 335.491 285.501 335.683 285.129 cv
335.875 284.769 336.019 284.373 336.115 283.965 cv
336.211 283.557 336.271 283.185 336.271 282.849 cv
336.271 282.513 336.175 282.213 336.007 281.973 cv
335.839 281.733 335.575 281.601 335.239 281.601 cv
334.771 281.601 334.363 281.805 334.015 282.201 cv
333.655 282.609 333.391 283.089 333.211 283.641 cv
333.031 284.193 332.947 284.709 332.947 285.165 cv
332.947 285.513 333.031 285.813 333.211 286.053 cv
333.391 286.293 333.643 286.413 333.979 286.413 cv
f
338.273 286.389 mo
338.285 286.281 li
339.185 282.705 li
339.233 282.489 339.269 282.285 339.269 282.117 cv
339.269 281.781 339.149 281.601 338.921 281.601 cv
338.669 281.601 338.477 281.757 338.357 282.057 cv
338.237 282.357 338.117 282.729 338.009 283.185 cv
337.973 283.245 li
337.913 283.257 li
337.769 283.257 li
337.697 283.221 li
337.673 283.137 li
337.757 282.789 337.841 282.489 337.925 282.249 cv
337.997 282.009 338.129 281.793 338.297 281.589 cv
338.465 281.397 338.669 281.289 338.933 281.289 cv
339.221 281.289 339.485 281.385 339.725 281.577 cv
339.953 281.769 340.073 282.009 340.073 282.297 cv
340.313 281.985 340.589 281.745 340.913 281.565 cv
341.225 281.385 341.573 281.289 341.933 281.289 cv
342.209 281.289 342.449 281.349 342.665 281.445 cv
342.869 281.541 343.025 281.697 343.145 281.889 cv
343.265 282.081 343.325 282.321 343.325 282.585 cv
343.325 282.921 343.241 283.317 343.097 283.773 cv
342.953 284.241 342.773 284.757 342.557 285.333 cv
342.437 285.597 342.389 285.837 342.389 286.053 cv
342.389 286.293 342.473 286.413 342.665 286.413 cv
342.977 286.413 343.229 286.245 343.445 285.909 cv
343.649 285.573 343.793 285.213 343.889 284.829 cv
343.985 284.757 li
344.129 284.757 li
344.201 284.793 li
344.237 284.865 li
344.225 284.901 li
344.117 285.357 343.925 285.777 343.661 286.149 cv
343.385 286.533 343.049 286.713 342.641 286.713 cv
342.353 286.713 342.113 286.617 341.921 286.437 cv
341.717 286.245 341.621 286.017 341.621 285.729 cv
341.621 285.585 341.645 285.429 341.717 285.261 cv
341.813 284.997 341.921 284.685 342.053 284.325 cv
342.185 283.965 342.293 283.629 342.377 283.293 cv
342.461 282.957 342.509 282.669 342.509 282.405 cv
342.509 282.189 342.461 281.997 342.365 281.841 cv
342.269 281.685 342.125 281.601 341.909 281.601 cv
341.609 281.601 341.333 281.673 341.093 281.793 cv
340.853 281.925 340.637 282.093 340.457 282.309 cv
340.265 282.525 340.097 282.777 339.953 283.065 cv
339.137 286.329 li
339.113 286.449 339.053 286.533 338.957 286.605 cv
338.861 286.677 338.753 286.713 338.633 286.713 cv
338.537 286.713 338.453 286.677 338.381 286.629 cv
338.309 286.581 338.273 286.497 338.273 286.389 cv
f
345.594 285.861 mo
345.81 286.233 346.242 286.413 346.89 286.413 cv
347.166 286.413 347.43 286.365 347.682 286.269 cv
347.934 286.173 348.15 286.029 348.318 285.837 cv
348.486 285.645 348.57 285.417 348.57 285.141 cv
348.57 284.937 348.486 284.769 348.342 284.637 cv
348.198 284.505 348.018 284.409 347.802 284.361 cv
347.154 284.229 li
346.854 284.157 346.614 284.025 346.422 283.821 cv
346.23 283.617 346.134 283.365 346.134 283.077 cv
346.134 282.729 346.23 282.417 346.422 282.141 cv
346.614 281.865 346.866 281.649 347.178 281.505 cv
347.49 281.361 347.826 281.289 348.174 281.289 cv
348.534 281.289 348.858 281.385 349.146 281.553 cv
349.434 281.733 349.578 281.985 349.578 282.321 cv
349.578 282.513 349.518 282.669 349.422 282.813 cv
349.314 282.957 349.17 283.017 348.99 283.017 cv
348.882 283.017 348.786 282.993 348.714 282.921 cv
348.642 282.849 348.606 282.765 348.606 282.657 cv
348.606 282.561 348.63 282.477 348.678 282.381 cv
348.726 282.297 348.798 282.225 348.894 282.177 cv
348.978 282.129 349.074 282.093 349.17 282.093 cv
349.098 281.925 348.966 281.805 348.774 281.721 cv
348.582 281.649 348.366 281.601 348.15 281.601 cv
347.934 281.601 347.73 281.649 347.538 281.721 cv
347.334 281.805 347.166 281.925 347.046 282.081 cv
346.926 282.249 346.866 282.429 346.866 282.645 cv
346.866 282.789 346.914 282.921 347.01 283.029 cv
347.106 283.137 347.238 283.209 347.394 283.257 cv
348.09 283.401 li
348.306 283.449 348.51 283.533 348.702 283.653 cv
348.882 283.773 349.026 283.929 349.134 284.109 cv
349.242 284.289 349.302 284.493 349.302 284.721 cv
349.302 285.021 349.218 285.321 349.05 285.609 cv
348.882 285.897 348.678 286.125 348.438 286.293 cv
348.006 286.581 347.49 286.713 346.878 286.713 cv
346.446 286.713 346.062 286.617 345.702 286.425 cv
345.342 286.233 345.174 285.945 345.174 285.561 cv
345.174 285.345 345.234 285.165 345.354 284.997 cv
345.474 284.829 345.654 284.745 345.882 284.745 cv
346.002 284.745 346.11 284.793 346.206 284.865 cv
346.29 284.949 346.338 285.057 346.338 285.177 cv
346.338 285.369 346.266 285.525 346.134 285.657 cv
345.99 285.801 345.834 285.861 345.654 285.861 cv
345.594 285.861 li
f
354.26 285.729 mo
354.26 285.585 354.284 285.429 354.356 285.261 cv
355.328 282.681 li
355.424 282.393 355.484 282.153 355.484 281.961 cv
355.484 281.721 355.388 281.601 355.22 281.601 cv
354.908 281.601 354.644 281.769 354.44 282.093 cv
354.224 282.429 354.08 282.789 353.984 283.185 cv
353.888 283.257 li
353.744 283.257 li
353.648 283.149 li
353.648 283.113 li
353.768 282.633 353.972 282.213 354.236 281.841 cv
354.5 281.481 354.836 281.289 355.244 281.289 cv
355.532 281.289 355.772 281.385 355.964 281.577 cv
356.156 281.769 356.264 281.997 356.264 282.285 cv
356.264 282.441 356.228 282.597 356.168 282.753 cv
355.196 285.333 li
355.076 285.597 355.028 285.837 355.028 286.053 cv
355.028 286.293 355.112 286.413 355.304 286.413 cv
355.616 286.413 355.868 286.245 356.084 285.909 cv
356.288 285.573 356.432 285.213 356.528 284.829 cv
356.624 284.757 li
356.768 284.757 li
356.84 284.793 li
356.876 284.865 li
356.864 284.901 li
356.744 285.357 356.552 285.777 356.288 286.149 cv
356.012 286.533 355.676 286.713 355.28 286.713 cv
354.992 286.713 354.752 286.617 354.56 286.437 cv
354.356 286.245 354.26 286.017 354.26 285.729 cv
355.616 279.321 mo
355.616 279.153 355.676 279.009 355.82 278.865 cv
355.964 278.733 356.12 278.661 356.288 278.661 cv
356.42 278.661 356.528 278.709 356.624 278.793 cv
356.708 278.877 356.756 278.985 356.756 279.105 cv
356.756 279.285 356.684 279.441 356.54 279.573 cv
356.396 279.717 356.24 279.777 356.072 279.777 cv
355.94 279.777 355.832 279.741 355.748 279.645 cv
355.652 279.561 355.616 279.453 355.616 279.321 cv
f
358.379 286.389 mo
358.391 286.281 li
359.291 282.705 li
359.339 282.489 359.375 282.285 359.375 282.117 cv
359.375 281.781 359.255 281.601 359.027 281.601 cv
358.775 281.601 358.583 281.757 358.463 282.057 cv
358.343 282.357 358.223 282.729 358.115 283.185 cv
358.079 283.245 li
358.019 283.257 li
357.875 283.257 li
357.803 283.221 li
357.779 283.137 li
357.863 282.789 357.947 282.489 358.031 282.249 cv
358.103 282.009 358.235 281.793 358.403 281.589 cv
358.571 281.397 358.775 281.289 359.039 281.289 cv
359.327 281.289 359.591 281.385 359.831 281.577 cv
360.059 281.769 360.179 282.009 360.179 282.297 cv
360.419 281.985 360.695 281.745 361.019 281.565 cv
361.331 281.385 361.679 281.289 362.039 281.289 cv
362.315 281.289 362.555 281.349 362.771 281.445 cv
362.975 281.541 363.131 281.697 363.251 281.889 cv
363.371 282.081 363.431 282.321 363.431 282.585 cv
363.431 282.921 363.347 283.317 363.203 283.773 cv
363.059 284.241 362.879 284.757 362.663 285.333 cv
362.543 285.597 362.495 285.837 362.495 286.053 cv
362.495 286.293 362.579 286.413 362.771 286.413 cv
363.083 286.413 363.335 286.245 363.551 285.909 cv
363.755 285.573 363.899 285.213 363.995 284.829 cv
364.091 284.757 li
364.235 284.757 li
364.307 284.793 li
364.343 284.865 li
364.331 284.901 li
364.223 285.357 364.031 285.777 363.767 286.149 cv
363.491 286.533 363.155 286.713 362.747 286.713 cv
362.459 286.713 362.219 286.617 362.027 286.437 cv
361.823 286.245 361.727 286.017 361.727 285.729 cv
361.727 285.585 361.751 285.429 361.823 285.261 cv
361.919 284.997 362.027 284.685 362.159 284.325 cv
362.291 283.965 362.399 283.629 362.483 283.293 cv
362.567 282.957 362.615 282.669 362.615 282.405 cv
362.615 282.189 362.567 281.997 362.471 281.841 cv
362.375 281.685 362.231 281.601 362.015 281.601 cv
361.715 281.601 361.439 281.673 361.199 281.793 cv
360.959 281.925 360.743 282.093 360.563 282.309 cv
360.371 282.525 360.203 282.777 360.059 283.065 cv
359.243 286.329 li
359.219 286.449 359.159 286.533 359.063 286.605 cv
358.967 286.677 358.859 286.713 358.739 286.713 cv
358.643 286.713 358.559 286.677 358.487 286.629 cv
358.415 286.581 358.379 286.497 358.379 286.389 cv
f
368.561 285.621 mo
368.561 285.501 368.573 285.393 368.597 285.285 cv
369.461 281.841 li
368.201 281.841 li
368.117 281.841 368.081 281.793 368.081 281.685 cv
368.105 281.517 368.165 281.421 368.237 281.421 cv
369.569 281.421 li
370.049 279.465 li
370.073 279.369 370.133 279.273 370.229 279.201 cv
370.325 279.129 370.433 279.081 370.553 279.081 cv
370.649 279.081 370.733 279.117 370.805 279.177 cv
370.877 279.237 370.913 279.321 370.913 279.417 cv
370.901 279.477 li
370.901 279.513 li
370.421 281.421 li
371.657 281.421 li
371.729 281.421 371.777 281.481 371.777 281.577 cv
371.753 281.673 li
371.705 281.793 li
371.621 281.841 li
370.313 281.841 li
369.449 285.309 li
369.389 285.537 369.365 285.729 369.365 285.897 cv
369.365 286.245 369.473 286.413 369.713 286.413 cv
370.061 286.413 370.373 286.257 370.649 285.921 cv
370.913 285.585 371.129 285.225 371.273 284.829 cv
371.369 284.757 li
371.513 284.757 li
371.585 284.793 li
371.621 284.865 li
371.609 284.901 li
371.429 285.381 371.177 285.813 370.841 286.173 cv
370.505 286.533 370.121 286.713 369.689 286.713 cv
369.365 286.713 369.101 286.605 368.885 286.413 cv
368.669 286.209 368.561 285.945 368.561 285.621 cv
f
372.783 286.377 mo
372.795 286.269 li
374.535 279.333 li
374.559 279.201 374.583 279.093 374.595 279.009 cv
374.595 278.889 374.331 278.817 373.815 278.817 cv
373.731 278.817 373.695 278.769 373.695 278.661 cv
373.719 278.553 li
373.767 278.445 li
373.863 278.397 li
375.483 278.265 li
375.519 278.265 li
375.555 278.301 li
375.603 278.325 li
375.627 278.421 li
374.691 282.165 li
375.171 281.589 375.759 281.289 376.443 281.289 cv
376.719 281.289 376.959 281.349 377.163 281.445 cv
377.367 281.541 377.523 281.697 377.643 281.889 cv
377.763 282.081 377.823 282.321 377.823 282.585 cv
377.823 282.921 377.751 283.317 377.607 283.773 cv
377.463 284.241 377.271 284.757 377.055 285.333 cv
376.935 285.597 376.887 285.837 376.887 286.053 cv
376.887 286.293 376.971 286.413 377.163 286.413 cv
377.475 286.413 377.727 286.245 377.943 285.909 cv
378.147 285.573 378.291 285.213 378.387 284.829 cv
378.483 284.757 li
378.627 284.757 li
378.699 284.793 li
378.735 284.865 li
378.723 284.901 li
378.651 285.189 378.543 285.477 378.399 285.753 cv
378.255 286.041 378.087 286.269 377.883 286.449 cv
377.667 286.617 377.427 286.713 377.139 286.713 cv
376.851 286.713 376.611 286.617 376.419 286.437 cv
376.215 286.245 376.119 286.017 376.119 285.729 cv
376.119 285.585 376.143 285.429 376.215 285.261 cv
376.431 284.661 376.623 284.133 376.779 283.653 cv
376.923 283.185 377.007 282.765 377.007 282.405 cv
377.007 282.177 376.959 281.985 376.863 281.829 cv
376.767 281.685 376.623 281.601 376.419 281.601 cv
375.987 281.601 375.603 281.733 375.291 281.997 cv
374.967 282.261 374.691 282.609 374.463 283.041 cv
373.647 286.317 li
373.611 286.437 373.551 286.533 373.467 286.605 cv
373.371 286.677 373.275 286.713 373.155 286.713 cv
373.047 286.713 372.963 286.677 372.891 286.617 cv
372.819 286.557 372.783 286.473 372.783 286.377 cv
f
381.473 286.713 mo
381.089 286.713 380.753 286.617 380.465 286.425 cv
380.177 286.233 379.961 285.957 379.817 285.621 cv
379.661 285.285 379.589 284.937 379.589 284.553 cv
379.589 283.989 379.733 283.449 380.021 282.945 cv
380.309 282.441 380.693 282.045 381.185 281.745 cv
381.677 281.445 382.205 281.289 382.769 281.289 cv
383.105 281.289 383.405 281.385 383.669 281.565 cv
383.921 281.745 384.053 281.997 384.053 282.321 cv
384.053 282.789 383.861 283.137 383.501 283.353 cv
383.129 283.581 382.709 283.725 382.253 283.773 cv
381.797 283.821 381.281 283.845 380.729 283.845 cv
380.693 283.845 li
380.561 284.325 380.501 284.733 380.501 285.069 cv
380.501 285.429 380.573 285.741 380.741 286.005 cv
380.909 286.281 381.161 286.413 381.497 286.413 cv
381.977 286.413 382.433 286.305 382.877 286.089 cv
383.309 285.873 383.669 285.561 383.945 285.177 cv
384.041 285.141 li
384.161 285.213 li
384.221 285.333 li
384.197 285.405 li
383.909 285.813 383.513 286.137 383.021 286.365 cv
382.517 286.593 382.001 286.713 381.473 286.713 cv
380.765 283.533 mo
381.221 283.533 381.653 283.521 382.049 283.473 cv
382.445 283.425 382.805 283.317 383.129 283.149 cv
383.441 282.981 383.609 282.705 383.609 282.333 cv
383.609 282.189 383.561 282.057 383.477 281.949 cv
383.393 281.841 383.285 281.757 383.165 281.697 cv
383.033 281.637 382.901 281.601 382.757 281.601 cv
382.421 281.601 382.109 281.697 381.845 281.877 cv
381.569 282.069 381.341 282.309 381.173 282.597 cv
380.993 282.897 380.861 283.209 380.765 283.533 cv
f
388.532 286.845 mo
388.46 286.797 li
388.436 286.725 li
389.132 283.941 li
389.228 283.869 li
389.372 283.869 li
389.444 283.905 li
389.468 283.989 li
389.396 284.265 389.372 284.505 389.372 284.721 cv
389.372 285.309 389.564 285.741 389.96 286.017 cv
390.356 286.305 390.86 286.437 391.472 286.437 cv
391.736 286.437 391.988 286.377 392.24 286.245 cv
392.492 286.125 392.72 285.957 392.912 285.741 cv
393.104 285.537 393.248 285.309 393.368 285.045 cv
393.476 284.793 393.536 284.529 393.536 284.265 cv
393.536 283.989 393.452 283.737 393.308 283.521 cv
393.164 283.305 392.96 283.161 392.696 283.089 cv
391.232 282.705 li
390.836 282.609 390.524 282.393 390.284 282.069 cv
390.044 281.757 389.936 281.397 389.936 280.989 cv
389.936 280.509 390.08 280.053 390.368 279.609 cv
390.656 279.165 391.028 278.805 391.484 278.541 cv
391.94 278.277 392.408 278.133 392.888 278.133 cv
393.248 278.133 393.584 278.205 393.896 278.337 cv
394.196 278.481 394.436 278.685 394.604 278.973 cv
395.288 278.169 li
395.372 278.133 li
395.444 278.133 li
395.516 278.181 li
395.552 278.253 li
394.856 281.037 li
394.76 281.121 li
394.616 281.121 li
394.544 281.121 394.508 281.085 394.508 280.989 cv
394.544 280.737 394.568 280.521 394.568 280.329 cv
394.568 279.969 394.496 279.645 394.376 279.369 cv
394.244 279.093 394.052 278.877 393.8 278.733 cv
393.536 278.589 393.224 278.517 392.852 278.517 cv
392.528 278.517 392.204 278.613 391.892 278.793 cv
391.58 278.985 391.316 279.225 391.124 279.525 cv
390.932 279.837 390.836 280.149 390.836 280.473 cv
390.836 280.737 390.908 280.965 391.064 281.157 cv
391.208 281.361 391.412 281.493 391.664 281.565 cv
393.128 281.949 li
393.392 282.021 393.62 282.153 393.812 282.321 cv
394.004 282.501 394.16 282.717 394.268 282.957 cv
394.364 283.197 394.424 283.461 394.424 283.749 cv
394.424 284.133 394.34 284.517 394.184 284.877 cv
394.016 285.249 393.8 285.585 393.512 285.885 cv
393.224 286.197 392.888 286.425 392.528 286.593 cv
392.168 286.761 391.796 286.845 391.424 286.845 cv
390.464 286.845 389.78 286.569 389.372 286.017 cv
388.7 286.809 li
388.616 286.845 li
388.532 286.845 li
f
396.917 284.925 mo
396.917 285.213 396.965 285.477 397.085 285.705 cv
397.205 285.945 397.373 286.125 397.589 286.245 cv
397.805 286.377 398.057 286.437 398.357 286.437 cv
398.693 286.437 399.029 286.377 399.365 286.233 cv
399.689 286.089 399.977 285.897 400.241 285.645 cv
400.505 285.393 400.721 285.105 400.913 284.781 cv
401.093 284.469 401.225 284.145 401.309 283.833 cv
402.389 279.501 li
402.413 279.321 li
402.413 278.985 402.101 278.817 401.489 278.817 cv
401.405 278.817 401.369 278.769 401.369 278.661 cv
401.393 278.565 401.405 278.493 401.429 278.457 cv
401.573 278.397 li
404.177 278.397 li
404.261 278.457 li
404.297 278.553 li
404.273 278.649 li
404.213 278.781 li
404.141 278.817 li
403.373 278.817 402.929 279.069 402.809 279.549 cv
401.729 283.881 li
401.633 284.265 401.489 284.625 401.273 284.973 cv
401.057 285.333 400.793 285.645 400.481 285.933 cv
400.169 286.221 399.833 286.449 399.461 286.605 cv
399.089 286.761 398.705 286.845 398.321 286.845 cv
397.877 286.845 397.469 286.749 397.109 286.569 cv
396.749 286.377 396.461 286.113 396.257 285.765 cv
396.041 285.417 395.945 285.009 395.945 284.553 cv
395.945 284.289 395.969 284.049 396.029 283.833 cv
397.193 279.177 li
397.217 279.009 li
397.217 278.925 397.169 278.877 397.073 278.865 cv
396.917 278.841 396.629 278.817 396.209 278.817 cv
396.125 278.817 396.089 278.769 396.089 278.661 cv
396.113 278.565 396.137 278.493 396.149 278.457 cv
396.293 278.397 li
399.521 278.397 li
399.593 278.397 399.641 278.457 399.641 278.553 cv
399.617 278.661 li
399.569 278.769 li
399.485 278.817 li
398.993 278.817 398.657 278.853 398.465 278.901 cv
398.357 278.949 398.285 279.057 398.237 279.225 cv
397.073 283.881 li
396.965 284.313 396.917 284.661 396.917 284.925 cv
f
403.891 286.437 mo
403.915 286.329 li
403.963 286.221 li
404.059 286.173 li
404.743 286.173 405.199 286.161 405.427 286.113 cv
405.643 286.065 405.763 285.945 405.811 285.765 cv
407.455 279.177 li
407.479 279.081 407.503 278.997 407.503 278.913 cv
407.503 278.853 407.359 278.817 407.083 278.817 cv
406.387 278.817 li
405.847 278.817 405.427 278.901 405.139 279.069 cv
404.851 279.237 404.635 279.453 404.503 279.717 cv
404.359 279.981 404.191 280.425 403.975 281.037 cv
403.855 281.145 li
403.747 281.145 li
403.663 281.145 403.627 281.097 403.627 280.989 cv
404.479 278.505 li
404.599 278.397 li
411.691 278.397 li
411.763 278.397 411.811 278.457 411.811 278.553 cv
411.415 281.037 li
411.367 281.109 li
411.295 281.145 li
411.187 281.145 li
411.103 281.145 411.067 281.097 411.067 280.989 cv
411.151 280.425 411.199 280.029 411.199 279.789 cv
411.199 279.513 411.139 279.297 411.019 279.153 cv
410.899 279.009 410.743 278.925 410.563 278.877 cv
410.371 278.841 410.131 278.817 409.831 278.817 cv
409.123 278.817 li
408.907 278.817 408.763 278.841 408.691 278.877 cv
408.619 278.925 408.547 279.033 408.499 279.225 cv
406.855 285.813 li
406.843 285.861 li
406.831 285.921 li
406.831 286.029 406.891 286.089 407.011 286.113 cv
407.215 286.161 407.659 286.173 408.343 286.173 cv
408.415 286.173 408.463 286.233 408.463 286.329 cv
408.427 286.449 408.403 286.521 408.391 286.545 cv
408.259 286.593 li
404.011 286.593 li
403.927 286.593 403.891 286.545 403.891 286.437 cv
f
52.812 256.968 mo
56.812 256.968 li
f
52.812 256.968 mo
56.812 256.968 li
@
46.5811 252.312 mo
45.9691 252.312 45.5131 252.612 45.2011 253.212 cv
44.8891 253.812 44.7451 254.712 44.7451 255.912 cv
44.7451 257.112 44.8891 258.012 45.2011 258.612 cv
45.5131 259.212 45.9691 259.512 46.5811 259.512 cv
47.1931 259.512 47.6491 259.212 47.9611 258.612 cv
48.2611 258.012 48.4171 257.112 48.4171 255.912 cv
48.4171 254.712 48.2611 253.812 47.9611 253.212 cv
47.6491 252.612 47.1931 252.312 46.5811 252.312 cv
46.5811 251.376 mo
47.5531 251.376 48.2971 251.772 48.8251 252.54 cv
49.3411 253.32 49.6051 254.448 49.6051 255.912 cv
49.6051 257.388 49.3411 258.516 48.8251 259.284 cv
48.2971 260.052 47.5531 260.436 46.5811 260.436 cv
45.5971 260.436 44.8411 260.052 44.3251 259.284 cv
43.8091 258.516 43.5571 257.388 43.5571 255.912 cv
43.5571 254.448 43.8091 253.32 44.3251 252.54 cv
44.8411 251.772 45.5971 251.376 46.5811 251.376 cv
f
52.812 231.736 mo
56.812 231.736 li
f
52.812 231.736 mo
56.812 231.736 li
@
29.4875 234.052 mo
31.4195 234.052 li
31.4195 227.38 li
29.3195 227.8 li
29.3195 226.72 li
31.4075 226.3 li
32.5955 226.3 li
32.5955 234.052 li
34.5275 234.052 li
34.5275 235.048 li
29.4875 235.048 li
29.4875 234.052 li
f
39.4475 227.08 mo
38.8355 227.08 38.3795 227.38 38.0675 227.98 cv
37.7555 228.58 37.6115 229.48 37.6115 230.68 cv
37.6115 231.88 37.7555 232.78 38.0675 233.38 cv
38.3795 233.98 38.8355 234.28 39.4475 234.28 cv
40.0595 234.28 40.5155 233.98 40.8275 233.38 cv
41.1275 232.78 41.2835 231.88 41.2835 230.68 cv
41.2835 229.48 41.1275 228.58 40.8275 227.98 cv
40.5155 227.38 40.0595 227.08 39.4475 227.08 cv
39.4475 226.144 mo
40.4195 226.144 41.1635 226.54 41.6915 227.308 cv
42.2075 228.088 42.4715 229.216 42.4715 230.68 cv
42.4715 232.156 42.2075 233.284 41.6915 234.052 cv
41.1635 234.82 40.4195 235.204 39.4475 235.204 cv
38.4635 235.204 37.7075 234.82 37.1915 234.052 cv
36.6755 233.284 36.4235 232.156 36.4235 230.68 cv
36.4235 229.216 36.6755 228.088 37.1915 227.308 cv
37.7075 226.54 38.4635 226.144 39.4475 226.144 cv
f
47.0795 227.08 mo
46.4675 227.08 46.0115 227.38 45.6995 227.98 cv
45.3875 228.58 45.2435 229.48 45.2435 230.68 cv
45.2435 231.88 45.3875 232.78 45.6995 233.38 cv
46.0115 233.98 46.4675 234.28 47.0795 234.28 cv
47.6915 234.28 48.1475 233.98 48.4595 233.38 cv
48.7595 232.78 48.9155 231.88 48.9155 230.68 cv
48.9155 229.48 48.7595 228.58 48.4595 227.98 cv
48.1475 227.38 47.6915 227.08 47.0795 227.08 cv
47.0795 226.144 mo
48.0515 226.144 48.7955 226.54 49.3235 227.308 cv
49.8395 228.088 50.1035 229.216 50.1035 230.68 cv
50.1035 232.156 49.8395 233.284 49.3235 234.052 cv
48.7955 234.82 48.0515 235.204 47.0795 235.204 cv
46.0955 235.204 45.3395 234.82 44.8235 234.052 cv
44.3075 233.284 44.0555 232.156 44.0555 230.68 cv
44.0555 229.216 44.3075 228.088 44.8235 227.308 cv
45.3395 226.54 46.0955 226.144 47.0795 226.144 cv
f
52.812 206.504 mo
56.812 206.504 li
f
52.812 206.504 mo
56.812 206.504 li
@
29.866 208.82 mo
33.994 208.82 li
33.994 209.816 li
28.438 209.816 li
28.438 208.82 li
28.882 208.365 29.494 207.74 30.274 206.949 cv
31.042 206.169 31.534 205.665 31.738 205.436 cv
32.122 205.016 32.386 204.656 32.53 204.356 cv
32.674 204.068 32.758 203.768 32.758 203.48 cv
32.758 203.024 32.59 202.641 32.266 202.352 cv
31.942 202.064 31.522 201.908 30.994 201.908 cv
30.622 201.908 30.226 201.98 29.818 202.1 cv
29.41 202.232 28.966 202.424 28.498 202.688 cv
28.498 201.488 li
28.978 201.296 29.422 201.152 29.83 201.057 cv
30.238 200.96 30.622 200.912 30.97 200.912 cv
31.87 200.912 32.59 201.141 33.13 201.596 cv
33.67 202.052 33.946 202.652 33.946 203.408 cv
33.946 203.768 33.874 204.117 33.742 204.428 cv
33.61 204.753 33.37 205.137 33.01 205.568 cv
32.914 205.688 32.602 206.012 32.074 206.552 cv
31.546 207.092 30.814 207.848 29.866 208.82 cv
f
39.01 201.848 mo
38.398 201.848 37.942 202.148 37.63 202.749 cv
37.318 203.348 37.174 204.249 37.174 205.449 cv
37.174 206.648 37.318 207.548 37.63 208.148 cv
37.942 208.749 38.398 209.048 39.01 209.048 cv
39.622 209.048 40.078 208.749 40.39 208.148 cv
40.69 207.548 40.846 206.648 40.846 205.449 cv
40.846 204.249 40.69 203.348 40.39 202.749 cv
40.078 202.148 39.622 201.848 39.01 201.848 cv
39.01 200.912 mo
39.982 200.912 40.726 201.309 41.254 202.076 cv
41.77 202.856 42.034 203.984 42.034 205.449 cv
42.034 206.924 41.77 208.052 41.254 208.82 cv
40.726 209.589 39.982 209.973 39.01 209.973 cv
38.026 209.973 37.27 209.589 36.754 208.82 cv
36.238 208.052 35.986 206.924 35.986 205.449 cv
35.986 203.984 36.238 202.856 36.754 202.076 cv
37.27 201.309 38.026 200.912 39.01 200.912 cv
f
46.642 201.848 mo
46.03 201.848 45.574 202.148 45.262 202.749 cv
44.95 203.348 44.806 204.249 44.806 205.449 cv
44.806 206.648 44.95 207.548 45.262 208.148 cv
45.574 208.749 46.03 209.048 46.642 209.048 cv
47.254 209.048 47.71 208.749 48.022 208.148 cv
48.322 207.548 48.478 206.648 48.478 205.449 cv
48.478 204.249 48.322 203.348 48.022 202.749 cv
47.71 202.148 47.254 201.848 46.642 201.848 cv
46.642 200.912 mo
47.614 200.912 48.358 201.309 48.886 202.076 cv
49.402 202.856 49.666 203.984 49.666 205.449 cv
49.666 206.924 49.402 208.052 48.886 208.82 cv
48.358 209.589 47.614 209.973 46.642 209.973 cv
45.658 209.973 44.902 209.589 44.386 208.82 cv
43.87 208.052 43.618 206.924 43.618 205.449 cv
43.618 203.984 43.87 202.856 44.386 202.076 cv
44.902 201.309 45.658 200.912 46.642 200.912 cv
f
52.812 181.272 mo
56.812 181.272 li
f
52.812 181.272 mo
56.812 181.272 li
@
32.4809 179.868 mo
33.0449 179.988 33.4889 180.24 33.8009 180.624 cv
34.1129 181.008 34.2809 181.488 34.2809 182.04 cv
34.2809 182.904 33.9809 183.576 33.3929 184.044 cv
32.7929 184.512 31.9529 184.74 30.8609 184.74 cv
30.4889 184.74 30.1049 184.704 29.7209 184.632 cv
29.3369 184.572 28.9289 184.464 28.5209 184.32 cv
28.5209 183.18 li
28.8449 183.372 29.2049 183.516 29.6009 183.612 cv
29.9849 183.708 30.3929 183.756 30.8249 183.756 cv
31.5689 183.756 32.1329 183.612 32.5169 183.324 cv
32.9009 183.036 33.1049 182.604 33.1049 182.04 cv
33.1049 181.536 32.9249 181.128 32.5649 180.84 cv
32.2049 180.552 31.7009 180.396 31.0529 180.396 cv
30.0329 180.396 li
30.0329 179.424 li
31.1009 179.424 li
31.6769 179.424 32.1209 179.316 32.4329 179.076 cv
32.7449 178.848 32.9009 178.512 32.9009 178.068 cv
32.9009 177.624 32.7329 177.276 32.4209 177.036 cv
32.0969 176.796 31.6409 176.676 31.0529 176.676 cv
30.7289 176.676 30.3809 176.712 30.0089 176.784 cv
29.6369 176.856 29.2289 176.964 28.7849 177.108 cv
28.7849 176.052 li
29.2289 175.932 29.6489 175.836 30.0449 175.776 cv
30.4289 175.716 30.8009 175.68 31.1609 175.68 cv
32.0489 175.68 32.7569 175.884 33.2849 176.292 cv
33.8129 176.7 34.0769 177.252 34.0769 177.948 cv
34.0769 178.428 33.9329 178.836 33.6569 179.172 cv
33.3809 179.508 32.9849 179.748 32.4809 179.868 cv
f
39.0569 176.616 mo
38.4449 176.616 37.9889 176.916 37.6769 177.516 cv
37.3649 178.116 37.2209 179.016 37.2209 180.216 cv
37.2209 181.416 37.3649 182.316 37.6769 182.916 cv
37.9889 183.516 38.4449 183.816 39.0569 183.816 cv
39.6689 183.816 40.1249 183.516 40.4369 182.916 cv
40.7369 182.316 40.8929 181.416 40.8929 180.216 cv
40.8929 179.016 40.7369 178.116 40.4369 177.516 cv
40.1249 176.916 39.6689 176.616 39.0569 176.616 cv
39.0569 175.68 mo
40.0289 175.68 40.7729 176.076 41.3009 176.844 cv
41.8169 177.624 42.0809 178.752 42.0809 180.216 cv
42.0809 181.692 41.8169 182.82 41.3009 183.588 cv
40.7729 184.356 40.0289 184.74 39.0569 184.74 cv
38.0729 184.74 37.3169 184.356 36.8009 183.588 cv
36.2849 182.82 36.0329 181.692 36.0329 180.216 cv
36.0329 178.752 36.2849 177.624 36.8009 176.844 cv
37.3169 176.076 38.0729 175.68 39.0569 175.68 cv
f
46.6889 176.616 mo
46.0769 176.616 45.6209 176.916 45.3089 177.516 cv
44.9969 178.116 44.8529 179.016 44.8529 180.216 cv
44.8529 181.416 44.9969 182.316 45.3089 182.916 cv
45.6209 183.516 46.0769 183.816 46.6889 183.816 cv
47.3009 183.816 47.7569 183.516 48.0689 182.916 cv
48.3689 182.316 48.5249 181.416 48.5249 180.216 cv
48.5249 179.016 48.3689 178.116 48.0689 177.516 cv
47.7569 176.916 47.3009 176.616 46.6889 176.616 cv
46.6889 175.68 mo
47.6609 175.68 48.4049 176.076 48.9329 176.844 cv
49.4489 177.624 49.7129 178.752 49.7129 180.216 cv
49.7129 181.692 49.4489 182.82 48.9329 183.588 cv
48.4049 184.356 47.6609 184.74 46.6889 184.74 cv
45.7049 184.74 44.9489 184.356 44.4329 183.588 cv
43.9169 182.82 43.6649 181.692 43.6649 180.216 cv
43.6649 178.752 43.9169 177.624 44.4329 176.844 cv
44.9489 176.076 45.7049 175.68 46.6889 175.68 cv
f
52.812 156.04 mo
56.812 156.04 li
f
52.812 156.04 mo
56.812 156.04 li
@
31.8167 151.636 mo
28.8288 156.304 li
31.8167 156.304 li
31.8167 151.636 li
31.5047 150.604 mo
32.9928 150.604 li
32.9928 156.304 li
34.2407 156.304 li
34.2407 157.288 li
32.9928 157.288 li
32.9928 159.352 li
31.8167 159.352 li
31.8167 157.288 li
27.8687 157.288 li
27.8687 156.148 li
31.5047 150.604 li
f
38.7288 151.384 mo
38.1168 151.384 37.6608 151.684 37.3488 152.285 cv
37.0368 152.884 36.8928 153.785 36.8928 154.984 cv
36.8928 156.184 37.0368 157.084 37.3488 157.684 cv
37.6608 158.285 38.1168 158.584 38.7288 158.584 cv
39.3408 158.584 39.7968 158.285 40.1088 157.684 cv
40.4088 157.084 40.5648 156.184 40.5648 154.984 cv
40.5648 153.785 40.4088 152.884 40.1088 152.285 cv
39.7968 151.684 39.3408 151.384 38.7288 151.384 cv
38.7288 150.448 mo
39.7008 150.448 40.4448 150.844 40.9728 151.612 cv
41.4888 152.392 41.7528 153.52 41.7528 154.984 cv
41.7528 156.46 41.4888 157.588 40.9728 158.356 cv
40.4448 159.124 39.7008 159.508 38.7288 159.508 cv
37.7448 159.508 36.9888 159.124 36.4728 158.356 cv
35.9568 157.588 35.7048 156.46 35.7048 154.984 cv
35.7048 153.52 35.9568 152.392 36.4728 151.612 cv
36.9888 150.844 37.7448 150.448 38.7288 150.448 cv
f
46.3608 151.384 mo
45.7488 151.384 45.2928 151.684 44.9808 152.285 cv
44.6688 152.884 44.5248 153.785 44.5248 154.984 cv
44.5248 156.184 44.6688 157.084 44.9808 157.684 cv
45.2928 158.285 45.7488 158.584 46.3608 158.584 cv
46.9728 158.584 47.4288 158.285 47.7408 157.684 cv
48.0408 157.084 48.1968 156.184 48.1968 154.984 cv
48.1968 153.785 48.0408 152.884 47.7408 152.285 cv
47.4288 151.684 46.9728 151.384 46.3608 151.384 cv
46.3608 150.448 mo
47.3328 150.448 48.0768 150.844 48.6048 151.612 cv
49.1208 152.392 49.3848 153.52 49.3848 154.984 cv
49.3848 156.46 49.1208 157.588 48.6048 158.356 cv
48.0768 159.124 47.3328 159.508 46.3608 159.508 cv
45.3768 159.508 44.6208 159.124 44.1048 158.356 cv
43.5888 157.588 43.3368 156.46 43.3368 154.984 cv
43.3368 153.52 43.5888 152.392 44.1048 151.612 cv
44.6208 150.844 45.3768 150.448 46.3608 150.448 cv
f
52.812 130.808 mo
56.812 130.808 li
f
52.812 130.808 mo
56.812 130.808 li
@
28.9049 125.372 mo
33.5489 125.372 li
33.5489 126.368 li
29.9849 126.368 li
29.9849 128.516 li
30.1529 128.456 30.3329 128.408 30.5009 128.384 cv
30.6689 128.36 30.8489 128.336 31.0169 128.336 cv
31.9889 128.336 32.7569 128.612 33.3329 129.14 cv
33.9089 129.68 34.1969 130.4 34.1969 131.312 cv
34.1969 132.26 33.8969 132.992 33.3089 133.508 cv
32.7209 134.024 31.8929 134.276 30.8369 134.276 cv
30.4649 134.276 30.0929 134.24 29.7089 134.192 cv
29.3249 134.132 28.9409 134.048 28.5329 133.916 cv
28.5329 132.728 li
28.8809 132.92 29.2409 133.064 29.6249 133.16 cv
29.9969 133.256 30.3929 133.292 30.8129 133.292 cv
31.4849 133.292 32.0249 133.124 32.4209 132.764 cv
32.8049 132.404 33.0089 131.924 33.0089 131.312 cv
33.0089 130.712 32.8049 130.232 32.4209 129.872 cv
32.0249 129.512 31.4849 129.332 30.8129 129.332 cv
30.5009 129.332 30.1769 129.368 29.8649 129.44 cv
29.5529 129.512 29.2289 129.62 28.9049 129.764 cv
28.9049 125.372 li
f
39.0569 126.152 mo
38.4449 126.152 37.9889 126.452 37.6769 127.052 cv
37.3649 127.652 37.2209 128.552 37.2209 129.752 cv
37.2209 130.952 37.3649 131.852 37.6769 132.452 cv
37.9889 133.052 38.4449 133.352 39.0569 133.352 cv
39.6689 133.352 40.1249 133.052 40.4369 132.452 cv
40.7369 131.852 40.8929 130.952 40.8929 129.752 cv
40.8929 128.552 40.7369 127.652 40.4369 127.052 cv
40.1249 126.452 39.6689 126.152 39.0569 126.152 cv
39.0569 125.216 mo
40.0289 125.216 40.7729 125.612 41.3009 126.38 cv
41.8169 127.16 42.0809 128.288 42.0809 129.752 cv
42.0809 131.228 41.8169 132.356 41.3009 133.124 cv
40.7729 133.892 40.0289 134.276 39.0569 134.276 cv
38.0729 134.276 37.3169 133.892 36.8009 133.124 cv
36.2849 132.356 36.0329 131.228 36.0329 129.752 cv
36.0329 128.288 36.2849 127.16 36.8009 126.38 cv
37.3169 125.612 38.0729 125.216 39.0569 125.216 cv
f
46.6889 126.152 mo
46.0769 126.152 45.6209 126.452 45.3089 127.052 cv
44.9969 127.652 44.8529 128.552 44.8529 129.752 cv
44.8529 130.952 44.9969 131.852 45.3089 132.452 cv
45.6209 133.052 46.0769 133.352 46.6889 133.352 cv
47.3009 133.352 47.7569 133.052 48.0689 132.452 cv
48.3689 131.852 48.5249 130.952 48.5249 129.752 cv
48.5249 128.552 48.3689 127.652 48.0689 127.052 cv
47.7569 126.452 47.3009 126.152 46.6889 126.152 cv
46.6889 125.216 mo
47.6609 125.216 48.4049 125.612 48.9329 126.38 cv
49.4489 127.16 49.7129 128.288 49.7129 129.752 cv
49.7129 131.228 49.4489 132.356 48.9329 133.124 cv
48.4049 133.892 47.6609 134.276 46.6889 134.276 cv
45.7049 134.276 44.9489 133.892 44.4329 133.124 cv
43.9169 132.356 43.6649 131.228 43.6649 129.752 cv
43.6649 128.288 43.9169 127.16 44.4329 126.38 cv
44.9489 125.612 45.7049 125.216 46.6889 125.216 cv
f
52.812 105.576 mo
56.812 105.576 li
f
52.812 105.576 mo
56.812 105.576 li
@
31.4907 104.04 mo
30.9627 104.04 30.5428 104.232 30.2308 104.592 cv
29.9188 104.952 29.7628 105.456 29.7628 106.08 cv
29.7628 106.716 29.9188 107.22 30.2308 107.58 cv
30.5428 107.94 30.9627 108.12 31.4907 108.12 cv
32.0187 108.12 32.4388 107.94 32.7508 107.58 cv
33.0628 107.22 33.2188 106.716 33.2188 106.08 cv
33.2188 105.456 33.0628 104.952 32.7508 104.592 cv
32.4388 104.232 32.0187 104.04 31.4907 104.04 cv
33.8428 100.332 mo
33.8428 101.412 li
33.5428 101.268 33.2428 101.16 32.9427 101.088 cv
32.6307 101.016 32.3307 100.98 32.0428 100.98 cv
31.2507 100.98 30.6508 101.244 30.2428 101.772 cv
29.8348 102.3 29.5947 103.104 29.5468 104.16 cv
29.7747 103.824 30.0627 103.56 30.4108 103.38 cv
30.7588 103.2 31.1427 103.104 31.5627 103.104 cv
32.4388 103.104 33.1348 103.38 33.6388 103.908 cv
34.1427 104.436 34.4067 105.168 34.4067 106.08 cv
34.4067 106.98 34.1307 107.7 33.6027 108.24 cv
33.0747 108.78 32.3667 109.044 31.4907 109.044 cv
30.4827 109.044 29.7028 108.66 29.1748 107.892 cv
28.6348 107.124 28.3708 105.996 28.3708 104.52 cv
28.3708 103.14 28.6947 102.036 29.3547 101.22 cv
30.0028 100.404 30.8908 99.9845 31.9948 99.9845 cv
32.2827 99.9845 32.5827 100.02 32.8947 100.068 cv
33.1948 100.128 33.5068 100.212 33.8428 100.332 cv
f
38.9788 100.92 mo
38.3668 100.92 37.9108 101.22 37.5988 101.82 cv
37.2868 102.42 37.1428 103.32 37.1428 104.52 cv
37.1428 105.72 37.2868 106.62 37.5988 107.22 cv
37.9108 107.82 38.3668 108.12 38.9788 108.12 cv
39.5908 108.12 40.0468 107.82 40.3588 107.22 cv
40.6588 106.62 40.8148 105.72 40.8148 104.52 cv
40.8148 103.32 40.6588 102.42 40.3588 101.82 cv
40.0468 101.22 39.5908 100.92 38.9788 100.92 cv
38.9788 99.9845 mo
39.9508 99.9845 40.6948 100.38 41.2228 101.148 cv
41.7388 101.928 42.0028 103.056 42.0028 104.52 cv
42.0028 105.996 41.7388 107.124 41.2228 107.892 cv
40.6948 108.66 39.9508 109.044 38.9788 109.044 cv
37.9948 109.044 37.2388 108.66 36.7228 107.892 cv
36.2068 107.124 35.9548 105.996 35.9548 104.52 cv
35.9548 103.056 36.2068 101.928 36.7228 101.148 cv
37.2388 100.38 37.9948 99.9845 38.9788 99.9845 cv
f
46.6108 100.92 mo
45.9988 100.92 45.5428 101.22 45.2308 101.82 cv
44.9188 102.42 44.7748 103.32 44.7748 104.52 cv
44.7748 105.72 44.9188 106.62 45.2308 107.22 cv
45.5428 107.82 45.9988 108.12 46.6108 108.12 cv
47.2228 108.12 47.6788 107.82 47.9908 107.22 cv
48.2908 106.62 48.4468 105.72 48.4468 104.52 cv
48.4468 103.32 48.2908 102.42 47.9908 101.82 cv
47.6788 101.22 47.2228 100.92 46.6108 100.92 cv
46.6108 99.9845 mo
47.5828 99.9845 48.3268 100.38 48.8548 101.148 cv
49.3708 101.928 49.6348 103.056 49.6348 104.52 cv
49.6348 105.996 49.3708 107.124 48.8548 107.892 cv
48.3268 108.66 47.5828 109.044 46.6108 109.044 cv
45.6268 109.044 44.8708 108.66 44.3548 107.892 cv
43.8388 107.124 43.5868 105.996 43.5868 104.52 cv
43.5868 103.056 43.8388 101.928 44.3548 101.148 cv
44.8708 100.38 45.6268 99.9845 46.6108 99.9845 cv
f
52.812 80.344 mo
56.812 80.344 li
f
52.812 80.344 mo
56.812 80.344 li
@
28.6554 74.9085 mo
34.2834 74.9085 li
34.2834 75.4125 li
31.1034 83.6565 li
29.8674 83.6565 li
32.8554 75.9045 li
28.6554 75.9045 li
28.6554 74.9085 li
f
39.1194 75.6885 mo
38.5074 75.6885 38.0514 75.9885 37.7394 76.5885 cv
37.4274 77.1885 37.2834 78.0885 37.2834 79.2885 cv
37.2834 80.4885 37.4274 81.3885 37.7394 81.9885 cv
38.0514 82.5885 38.5074 82.8885 39.1194 82.8885 cv
39.7314 82.8885 40.1874 82.5885 40.4994 81.9885 cv
40.7994 81.3885 40.9554 80.4885 40.9554 79.2885 cv
40.9554 78.0885 40.7994 77.1885 40.4994 76.5885 cv
40.1874 75.9885 39.7314 75.6885 39.1194 75.6885 cv
39.1194 74.7525 mo
40.0914 74.7525 40.8354 75.1485 41.3634 75.9165 cv
41.8794 76.6965 42.1434 77.8245 42.1434 79.2885 cv
42.1434 80.7645 41.8794 81.8925 41.3634 82.6605 cv
40.8354 83.4285 40.0914 83.8125 39.1194 83.8125 cv
38.1354 83.8125 37.3794 83.4285 36.8634 82.6605 cv
36.3474 81.8925 36.0954 80.7645 36.0954 79.2885 cv
36.0954 77.8245 36.3474 76.6965 36.8634 75.9165 cv
37.3794 75.1485 38.1354 74.7525 39.1194 74.7525 cv
f
46.7514 75.6885 mo
46.1394 75.6885 45.6834 75.9885 45.3714 76.5885 cv
45.0594 77.1885 44.9154 78.0885 44.9154 79.2885 cv
44.9154 80.4885 45.0594 81.3885 45.3714 81.9885 cv
45.6834 82.5885 46.1394 82.8885 46.7514 82.8885 cv
47.3634 82.8885 47.8194 82.5885 48.1314 81.9885 cv
48.4314 81.3885 48.5874 80.4885 48.5874 79.2885 cv
48.5874 78.0885 48.4314 77.1885 48.1314 76.5885 cv
47.8194 75.9885 47.3634 75.6885 46.7514 75.6885 cv
46.7514 74.7525 mo
47.7234 74.7525 48.4674 75.1485 48.9954 75.9165 cv
49.5114 76.6965 49.7754 77.8245 49.7754 79.2885 cv
49.7754 80.7645 49.5114 81.8925 48.9954 82.6605 cv
48.4674 83.4285 47.7234 83.8125 46.7514 83.8125 cv
45.7674 83.8125 45.0114 83.4285 44.4954 82.6605 cv
43.9794 81.8925 43.7274 80.7645 43.7274 79.2885 cv
43.7274 77.8245 43.9794 76.6965 44.4954 75.9165 cv
45.0114 75.1485 45.7674 74.7525 46.7514 74.7525 cv
f
52.812 55.112 mo
56.812 55.112 li
f
52.812 55.112 mo
56.812 55.112 li
@
31.3155 54.2725 mo
30.7515 54.2725 30.3075 54.4285 29.9835 54.7285 cv
29.6595 55.0285 29.5035 55.4365 29.5035 55.9645 cv
29.5035 56.4925 29.6595 56.9125 29.9835 57.2125 cv
30.3075 57.5125 30.7515 57.6565 31.3155 57.6565 cv
31.8675 57.6565 32.3115 57.5125 32.6355 57.2005 cv
32.9595 56.9005 33.1275 56.4925 33.1275 55.9645 cv
33.1275 55.4365 32.9595 55.0285 32.6475 54.7285 cv
32.3235 54.4285 31.8795 54.2725 31.3155 54.2725 cv
30.1275 53.7685 mo
29.6235 53.6485 29.2275 53.4085 28.9395 53.0605 cv
28.6515 52.7125 28.5195 52.2925 28.5195 51.7885 cv
28.5195 51.0925 28.7595 50.5405 29.2635 50.1325 cv
29.7555 49.7245 30.4395 49.5205 31.3155 49.5205 cv
32.1795 49.5205 32.8635 49.7245 33.3675 50.1325 cv
33.8595 50.5405 34.1115 51.0925 34.1115 51.7885 cv
34.1115 52.2925 33.9675 52.7125 33.6795 53.0605 cv
33.3915 53.4085 33.0075 53.6485 32.5035 53.7685 cv
33.0675 53.9005 33.5115 54.1645 33.8355 54.5485 cv
34.1475 54.9325 34.3155 55.4125 34.3155 55.9645 cv
34.3155 56.8165 34.0515 57.4645 33.5355 57.9085 cv
33.0075 58.3645 32.2755 58.5805 31.3155 58.5805 cv
30.3435 58.5805 29.5995 58.3645 29.0835 57.9085 cv
28.5675 57.4645 28.3155 56.8165 28.3155 55.9645 cv
28.3155 55.4125 28.4715 54.9325 28.7955 54.5485 cv
29.1075 54.1645 29.5515 53.9005 30.1275 53.7685 cv
29.6955 51.8965 mo
29.6955 52.3525 29.8275 52.7125 30.1155 52.9645 cv
30.4035 53.2165 30.7995 53.3365 31.3155 53.3365 cv
31.8195 53.3365 32.2155 53.2165 32.5035 52.9645 cv
32.7915 52.7125 32.9355 52.3525 32.9355 51.8965 cv
32.9355 51.4405 32.7915 51.0925 32.5035 50.8405 cv
32.2155 50.5885 31.8195 50.4565 31.3155 50.4565 cv
30.7995 50.4565 30.4035 50.5885 30.1155 50.8405 cv
29.8275 51.0925 29.6955 51.4405 29.6955 51.8965 cv
f
38.9475 50.4565 mo
38.3355 50.4565 37.8795 50.7565 37.5675 51.3565 cv
37.2555 51.9565 37.1115 52.8565 37.1115 54.0565 cv
37.1115 55.2565 37.2555 56.1565 37.5675 56.7565 cv
37.8795 57.3565 38.3355 57.6565 38.9475 57.6565 cv
39.5595 57.6565 40.0155 57.3565 40.3275 56.7565 cv
40.6275 56.1565 40.7835 55.2565 40.7835 54.0565 cv
40.7835 52.8565 40.6275 51.9565 40.3275 51.3565 cv
40.0155 50.7565 39.5595 50.4565 38.9475 50.4565 cv
38.9475 49.5205 mo
39.9195 49.5205 40.6635 49.9165 41.1915 50.6845 cv
41.7075 51.4645 41.9715 52.5925 41.9715 54.0565 cv
41.9715 55.5325 41.7075 56.6605 41.1915 57.4285 cv
40.6635 58.1965 39.9195 58.5805 38.9475 58.5805 cv
37.9635 58.5805 37.2075 58.1965 36.6915 57.4285 cv
36.1755 56.6605 35.9235 55.5325 35.9235 54.0565 cv
35.9235 52.5925 36.1755 51.4645 36.6915 50.6845 cv
37.2075 49.9165 37.9635 49.5205 38.9475 49.5205 cv
f
46.5795 50.4565 mo
45.9675 50.4565 45.5115 50.7565 45.1995 51.3565 cv
44.8875 51.9565 44.7435 52.8565 44.7435 54.0565 cv
44.7435 55.2565 44.8875 56.1565 45.1995 56.7565 cv
45.5115 57.3565 45.9675 57.6565 46.5795 57.6565 cv
47.1915 57.6565 47.6475 57.3565 47.9595 56.7565 cv
48.2595 56.1565 48.4155 55.2565 48.4155 54.0565 cv
48.4155 52.8565 48.2595 51.9565 47.9595 51.3565 cv
47.6475 50.7565 47.1915 50.4565 46.5795 50.4565 cv
46.5795 49.5205 mo
47.5515 49.5205 48.2955 49.9165 48.8235 50.6845 cv
49.3395 51.4645 49.6035 52.5925 49.6035 54.0565 cv
49.6035 55.5325 49.3395 56.6605 48.8235 57.4285 cv
48.2955 58.1965 47.5515 58.5805 46.5795 58.5805 cv
45.5955 58.5805 44.8395 58.1965 44.3235 57.4285 cv
43.8075 56.6605 43.5555 55.5325 43.5555 54.0565 cv
43.5555 52.5925 43.8075 51.4645 44.3235 50.6845 cv
44.8395 49.9165 45.5955 49.5205 46.5795 49.5205 cv
f
52.812 29.88 mo
56.812 29.88 li
f
52.812 29.88 mo
56.812 29.88 li
@
28.757 33.0125 mo
28.757 31.9325 li
29.045 32.0765 29.345 32.1845 29.657 32.2565 cv
29.957 32.3285 30.257 32.3645 30.557 32.3645 cv
31.325 32.3645 31.925 32.1125 32.333 31.5845 cv
32.741 31.0565 32.981 30.2645 33.053 29.1845 cv
32.813 29.5205 32.525 29.7845 32.189 29.9645 cv
31.841 30.1445 31.457 30.2285 31.037 30.2285 cv
30.149 30.2285 29.453 29.9645 28.949 29.4365 cv
28.445 28.9085 28.193 28.1885 28.193 27.2645 cv
28.193 26.3765 28.457 25.6565 28.985 25.1045 cv
29.513 24.5645 30.221 24.2885 31.109 24.2885 cv
32.117 24.2885 32.897 24.6845 33.425 25.4525 cv
33.953 26.2325 34.229 27.3605 34.229 28.8245 cv
34.229 30.2165 33.893 31.3085 33.245 32.1245 cv
32.585 32.9405 31.709 33.3485 30.605 33.3485 cv
30.305 33.3485 30.005 33.3125 29.705 33.2645 cv
29.393 33.2165 29.081 33.1325 28.757 33.0125 cv
31.109 29.3045 mo
31.637 29.3045 32.057 29.1245 32.369 28.7645 cv
32.681 28.4045 32.837 27.9005 32.837 27.2645 cv
32.837 26.6405 32.681 26.1365 32.369 25.7765 cv
32.057 25.4165 31.637 25.2245 31.109 25.2245 cv
30.581 25.2245 30.161 25.4165 29.849 25.7765 cv
29.537 26.1365 29.381 26.6405 29.381 27.2645 cv
29.381 27.9005 29.537 28.4045 29.849 28.7645 cv
30.161 29.1245 30.581 29.3045 31.109 29.3045 cv
f
38.885 25.2245 mo
38.273 25.2245 37.817 25.5245 37.505 26.1245 cv
37.193 26.7245 37.049 27.6245 37.049 28.8245 cv
37.049 30.0245 37.193 30.9245 37.505 31.5245 cv
37.817 32.1245 38.273 32.4245 38.885 32.4245 cv
39.497 32.4245 39.953 32.1245 40.265 31.5245 cv
40.565 30.9245 40.721 30.0245 40.721 28.8245 cv
40.721 27.6245 40.565 26.7245 40.265 26.1245 cv
39.953 25.5245 39.497 25.2245 38.885 25.2245 cv
38.885 24.2885 mo
39.857 24.2885 40.601 24.6845 41.129 25.4525 cv
41.645 26.2325 41.909 27.3605 41.909 28.8245 cv
41.909 30.3005 41.645 31.4285 41.129 32.1965 cv
40.601 32.9645 39.857 33.3485 38.885 33.3485 cv
37.901 33.3485 37.145 32.9645 36.629 32.1965 cv
36.113 31.4285 35.861 30.3005 35.861 28.8245 cv
35.861 27.3605 36.113 26.2325 36.629 25.4525 cv
37.145 24.6845 37.901 24.2885 38.885 24.2885 cv
f
46.517 25.2245 mo
45.905 25.2245 45.449 25.5245 45.137 26.1245 cv
44.825 26.7245 44.681 27.6245 44.681 28.8245 cv
44.681 30.0245 44.825 30.9245 45.137 31.5245 cv
45.449 32.1245 45.905 32.4245 46.517 32.4245 cv
47.129 32.4245 47.585 32.1245 47.897 31.5245 cv
48.197 30.9245 48.353 30.0245 48.353 28.8245 cv
48.353 27.6245 48.197 26.7245 47.897 26.1245 cv
47.585 25.5245 47.129 25.2245 46.517 25.2245 cv
46.517 24.2885 mo
47.489 24.2885 48.233 24.6845 48.761 25.4525 cv
49.277 26.2325 49.541 27.3605 49.541 28.8245 cv
49.541 30.3005 49.277 31.4285 48.761 32.1965 cv
48.233 32.9645 47.489 33.3485 46.517 33.3485 cv
45.533 33.3485 44.777 32.9645 44.261 32.1965 cv
43.745 31.4285 43.493 30.3005 43.493 28.8245 cv
43.493 27.3605 43.745 26.2325 44.261 25.4525 cv
44.777 24.6845 45.533 24.2885 46.517 24.2885 cv
f
18.5455 201 mo
18.4375 200.988 li
14.8615 200.088 li
14.6455 200.04 14.4415 200.004 14.2735 200.004 cv
13.9375 200.004 13.7575 200.124 13.7575 200.352 cv
13.7575 200.604 13.9135 200.796 14.2135 200.916 cv
14.5135 201.036 14.8855 201.156 15.3415 201.264 cv
15.4015 201.3 li
15.4135 201.36 li
15.4135 201.504 li
15.3775 201.576 li
15.2935 201.6 li
14.9455 201.516 14.6455 201.432 14.4055 201.348 cv
14.1655 201.276 13.9495 201.144 13.7455 200.976 cv
13.5535 200.808 13.4455 200.604 13.4455 200.34 cv
13.4455 200.052 13.5415 199.788 13.7335 199.548 cv
13.9255 199.32 14.1655 199.2 14.4535 199.2 cv
14.1415 198.96 13.9015 198.684 13.7215 198.36 cv
13.5415 198.048 13.4455 197.7 13.4455 197.34 cv
13.4455 197.064 13.5055 196.824 13.6015 196.608 cv
13.6975 196.404 13.8535 196.248 14.0455 196.128 cv
14.2375 196.008 14.4775 195.948 14.7415 195.948 cv
15.0775 195.948 15.4735 196.032 15.9295 196.176 cv
16.3975 196.32 16.9135 196.5 17.4895 196.716 cv
17.7535 196.836 17.9935 196.884 18.2095 196.884 cv
18.4495 196.884 18.5695 196.8 18.5695 196.608 cv
18.5695 196.296 18.4015 196.044 18.0655 195.828 cv
17.7295 195.624 17.3695 195.48 16.9855 195.384 cv
16.9135 195.288 li
16.9135 195.144 li
16.9495 195.072 li
17.0215 195.036 li
17.0575 195.048 li
17.5135 195.156 17.9335 195.348 18.3055 195.612 cv
18.6895 195.888 18.8695 196.224 18.8695 196.632 cv
18.8695 196.92 18.7735 197.16 18.5935 197.352 cv
18.4015 197.556 18.1735 197.652 17.8855 197.652 cv
17.7415 197.652 17.5855 197.628 17.4175 197.556 cv
17.1535 197.46 16.8415 197.352 16.4815 197.22 cv
16.1215 197.088 15.7855 196.98 15.4495 196.896 cv
15.1135 196.812 14.8255 196.764 14.5615 196.764 cv
14.3455 196.764 14.1535 196.812 13.9975 196.908 cv
13.8415 197.004 13.7575 197.148 13.7575 197.364 cv
13.7575 197.664 13.8295 197.94 13.9495 198.18 cv
14.0815 198.42 14.2495 198.636 14.4655 198.816 cv
14.6815 199.008 14.9335 199.176 15.2215 199.32 cv
18.4855 200.136 li
18.6055 200.16 18.6895 200.22 18.7615 200.316 cv
18.8335 200.412 18.8695 200.52 18.8695 200.64 cv
18.8695 200.736 18.8335 200.82 18.7855 200.892 cv
18.7375 200.964 18.6535 201 18.5455 201 cv
f
17.4415 193.451 mo
17.1775 193.451 16.9135 193.415 16.6375 193.343 cv
16.3735 193.271 16.0615 193.175 15.7255 193.055 cv
15.3895 192.935 15.0895 192.815 14.8375 192.719 cv
14.5495 192.623 14.3095 192.563 14.1175 192.563 cv
13.8775 192.563 13.7575 192.659 13.7575 192.827 cv
13.7575 193.139 13.9255 193.403 14.2495 193.607 cv
14.5855 193.823 14.9455 193.967 15.3415 194.063 cv
15.4135 194.159 li
15.4135 194.303 li
15.3055 194.399 li
15.2695 194.399 li
14.7895 194.279 14.3695 194.075 13.9975 193.811 cv
13.6375 193.547 13.4455 193.211 13.4455 192.803 cv
13.4455 192.515 13.5415 192.275 13.7335 192.083 cv
13.9255 191.891 14.1535 191.783 14.4415 191.783 cv
14.5975 191.783 14.7535 191.819 14.9095 191.879 cv
15.0055 191.927 15.2215 192.011 15.5455 192.131 cv
15.8815 192.251 16.1455 192.347 16.3615 192.407 cv
16.5775 192.479 16.7935 192.527 16.9975 192.575 cv
17.2135 192.623 17.4175 192.635 17.6215 192.635 cv
17.8855 192.635 18.1135 192.587 18.2935 192.467 cv
18.4855 192.359 18.5695 192.179 18.5695 191.915 cv
18.5695 191.411 18.2575 190.955 17.6215 190.571 cv
17.5375 190.547 li
17.4415 190.535 li
13.9615 189.671 li
13.8655 189.647 13.7695 189.587 13.6975 189.491 cv
13.6255 189.395 13.5775 189.287 13.5775 189.167 cv
13.5775 189.071 13.6135 188.987 13.6735 188.915 cv
13.7335 188.843 13.8175 188.807 13.9135 188.807 cv
14.0095 188.819 li
17.4655 189.683 li
17.7055 189.743 17.9095 189.767 18.0535 189.767 cv
18.4015 189.767 18.5695 189.659 18.5695 189.419 cv
18.5695 189.167 18.4135 188.975 18.0895 188.843 cv
17.7775 188.723 17.4055 188.615 16.9855 188.519 cv
16.9135 188.423 li
16.9135 188.279 li
16.9615 188.207 li
17.0335 188.171 li
17.3815 188.267 17.6815 188.351 17.9215 188.423 cv
18.1615 188.507 18.3895 188.639 18.5815 188.807 cv
18.7735 188.975 18.8695 189.191 18.8695 189.443 cv
18.8695 189.707 18.7975 189.935 18.6775 190.127 cv
18.5455 190.331 18.3535 190.463 18.1135 190.535 cv
18.3535 190.727 18.5335 190.931 18.6655 191.171 cv
18.7975 191.411 18.8695 191.675 18.8695 191.939 cv
18.8695 192.407 18.7495 192.779 18.4975 193.043 cv
18.2575 193.319 17.8975 193.451 17.4415 193.451 cv
f
18.5455 186.937 mo
18.4375 186.925 li
14.8615 186.025 li
14.6455 185.977 14.4415 185.941 14.2735 185.941 cv
13.9375 185.941 13.7575 186.061 13.7575 186.289 cv
13.7575 186.541 13.9135 186.733 14.2135 186.853 cv
14.5135 186.973 14.8855 187.093 15.3415 187.201 cv
15.4015 187.237 li
15.4135 187.297 li
15.4135 187.441 li
15.3775 187.513 li
15.2935 187.537 li
14.9455 187.453 14.6455 187.369 14.4055 187.285 cv
14.1655 187.213 13.9495 187.081 13.7455 186.913 cv
13.5535 186.745 13.4455 186.541 13.4455 186.277 cv
13.4455 185.989 13.5415 185.725 13.7335 185.485 cv
13.9255 185.257 14.1655 185.137 14.4535 185.137 cv
14.1415 184.897 13.9015 184.621 13.7215 184.297 cv
13.5415 183.985 13.4455 183.637 13.4455 183.277 cv
13.4455 182.905 13.5415 182.581 13.7335 182.305 cv
13.9255 182.029 14.2015 181.885 14.5615 181.885 cv
14.2135 181.645 13.9375 181.357 13.7455 181.021 cv
13.5535 180.697 13.4455 180.337 13.4455 179.941 cv
13.4455 179.533 13.5655 179.197 13.7815 178.945 cv
14.0095 178.693 14.3335 178.561 14.7415 178.561 cv
15.0775 178.561 15.4735 178.645 15.9295 178.789 cv
16.3975 178.933 16.9135 179.113 17.4895 179.329 cv
17.7775 179.449 18.0175 179.497 18.2095 179.497 cv
18.4495 179.497 18.5695 179.413 18.5695 179.221 cv
18.5695 178.909 18.4015 178.657 18.0655 178.441 cv
17.7295 178.237 17.3695 178.093 16.9855 177.997 cv
16.9135 177.901 li
16.9135 177.757 li
16.9495 177.685 li
17.0215 177.649 li
17.0575 177.661 li
17.5135 177.781 17.9335 177.973 18.3055 178.237 cv
18.6895 178.501 18.8695 178.837 18.8695 179.245 cv
18.8695 179.533 18.7735 179.773 18.5935 179.965 cv
18.4015 180.169 18.1735 180.265 17.8855 180.265 cv
17.7535 180.265 17.5975 180.241 17.4175 180.169 cv
16.8175 179.953 16.2895 179.761 15.8095 179.605 cv
15.3415 179.461 14.9215 179.377 14.5615 179.377 cv
14.3455 179.377 14.1535 179.425 13.9975 179.509 cv
13.8415 179.605 13.7575 179.749 13.7575 179.965 cv
13.7575 180.397 13.9015 180.781 14.1655 181.105 cv
14.4295 181.429 14.7895 181.705 15.2215 181.933 cv
15.4015 181.969 li
18.4855 182.737 li
18.6055 182.773 18.6895 182.833 18.7615 182.929 cv
18.8335 183.025 18.8695 183.133 18.8695 183.241 cv
18.8695 183.337 18.8335 183.421 18.7855 183.493 cv
18.7375 183.565 18.6535 183.601 18.5455 183.601 cv
18.4375 183.589 li
15.3775 182.821 li
15.0535 182.749 14.7775 182.701 14.5615 182.701 cv
14.3455 182.701 14.1535 182.749 13.9975 182.845 cv
13.8415 182.941 13.7575 183.085 13.7575 183.301 cv
13.7575 183.601 13.8295 183.877 13.9495 184.117 cv
14.0815 184.357 14.2495 184.573 14.4655 184.753 cv
14.6815 184.945 14.9335 185.113 15.2215 185.257 cv
18.4855 186.073 li
18.6055 186.097 18.6895 186.157 18.7615 186.253 cv
18.8335 186.349 18.8695 186.457 18.8695 186.577 cv
18.8695 186.673 18.8335 186.757 18.7855 186.829 cv
18.7375 186.901 18.6535 186.937 18.5455 186.937 cv
f
18.8695 175.25 mo
18.8695 175.742 18.6895 176.126 18.3175 176.39 cv
17.9455 176.654 17.5015 176.786 16.9855 176.786 cv
16.9135 176.786 16.7695 176.774 16.5535 176.738 cv
16.3375 176.702 16.2055 176.678 16.1455 176.678 cv
11.4895 175.514 li
11.3575 175.49 11.2495 175.466 11.1655 175.454 cv
11.0455 175.454 10.9735 175.718 10.9735 176.234 cv
10.9735 176.318 10.9255 176.354 10.8175 176.354 cv
10.7095 176.33 li
10.6015 176.282 li
10.5535 176.186 li
10.4215 174.566 li
10.4215 174.47 10.4815 174.422 10.5775 174.422 cv
14.1175 175.31 li
13.6735 174.854 13.4455 174.398 13.4455 173.942 cv
13.4455 173.606 13.5415 173.306 13.7215 173.066 cv
13.9015 172.826 14.1415 172.634 14.4295 172.514 cv
14.7175 172.394 15.0295 172.334 15.3655 172.334 cv
15.7495 172.334 16.1575 172.418 16.5655 172.562 cv
16.9735 172.718 17.3575 172.922 17.7175 173.186 cv
18.0775 173.45 18.3535 173.762 18.5575 174.122 cv
18.7615 174.482 18.8695 174.854 18.8695 175.25 cv
18.5695 175.226 mo
18.5695 174.962 18.4615 174.698 18.2335 174.458 cv
18.0055 174.218 17.7415 174.026 17.4535 173.882 cv
17.1415 173.726 16.7095 173.582 16.1575 173.438 cv
15.6055 173.294 15.1735 173.222 14.8375 173.222 cv
14.5495 173.222 14.2975 173.282 14.0815 173.402 cv
13.8655 173.522 13.7575 173.714 13.7575 173.966 cv
13.7575 174.254 13.8655 174.53 14.0815 174.794 cv
14.2975 175.058 14.5495 175.298 14.8375 175.49 cv
16.1935 175.826 li
16.6975 175.958 17.1055 176.03 17.4055 176.03 cv
17.7175 176.03 17.9815 175.97 18.2215 175.838 cv
18.4615 175.706 18.5695 175.502 18.5695 175.226 cv
f
18.8695 169.764 mo
18.8695 170.148 18.7735 170.484 18.5815 170.772 cv
18.3895 171.06 18.1135 171.276 17.7775 171.42 cv
17.4415 171.576 17.0935 171.648 16.7095 171.648 cv
16.1455 171.648 15.6055 171.504 15.1015 171.216 cv
14.5975 170.928 14.2015 170.544 13.9015 170.052 cv
13.6015 169.56 13.4455 169.032 13.4455 168.468 cv
13.4455 168.132 13.5415 167.832 13.7215 167.568 cv
13.9015 167.316 14.1535 167.184 14.4775 167.184 cv
14.9455 167.184 15.2935 167.376 15.5095 167.736 cv
15.7375 168.108 15.8815 168.528 15.9295 168.984 cv
15.9775 169.44 16.0015 169.956 16.0015 170.508 cv
16.0015 170.544 li
16.4815 170.676 16.8895 170.736 17.2255 170.736 cv
17.5855 170.736 17.8975 170.664 18.1615 170.496 cv
18.4375 170.328 18.5695 170.076 18.5695 169.74 cv
18.5695 169.26 18.4615 168.804 18.2455 168.36 cv
18.0295 167.928 17.7175 167.568 17.3335 167.292 cv
17.2975 167.196 li
17.3695 167.076 li
17.4895 167.016 li
17.5615 167.04 li
17.9695 167.328 18.2935 167.724 18.5215 168.216 cv
18.7495 168.72 18.8695 169.236 18.8695 169.764 cv
15.6895 170.472 mo
15.6895 170.016 15.6775 169.584 15.6295 169.188 cv
15.5815 168.792 15.4735 168.432 15.3055 168.108 cv
15.1375 167.796 14.8615 167.628 14.4895 167.628 cv
14.3455 167.628 14.2135 167.676 14.1055 167.76 cv
13.9975 167.844 13.9135 167.952 13.8535 168.072 cv
13.7935 168.204 13.7575 168.336 13.7575 168.48 cv
13.7575 168.816 13.8535 169.128 14.0335 169.392 cv
14.2255 169.668 14.4655 169.896 14.7535 170.064 cv
15.0535 170.244 15.3655 170.376 15.6895 170.472 cv
f
18.5455 165.674 mo
18.4375 165.662 li
14.8615 164.762 li
14.6455 164.714 14.4415 164.678 14.2735 164.678 cv
13.9375 164.678 13.7575 164.798 13.7575 165.026 cv
13.7575 165.278 13.9135 165.47 14.2135 165.59 cv
14.5135 165.71 14.8855 165.83 15.3415 165.938 cv
15.4015 165.974 li
15.4135 166.034 li
15.4135 166.178 li
15.3775 166.25 li
15.2935 166.274 li
14.9455 166.19 14.6455 166.106 14.4055 166.022 cv
14.1655 165.95 13.9495 165.818 13.7455 165.65 cv
13.5535 165.482 13.4455 165.278 13.4455 165.014 cv
13.4455 164.738 13.5295 164.498 13.6855 164.282 cv
13.8535 164.078 14.0575 163.946 14.3215 163.898 cv
14.0575 163.706 13.8535 163.478 13.6855 163.214 cv
13.5295 162.95 13.4455 162.662 13.4455 162.35 cv
13.4455 162.098 13.5295 161.87 13.6735 161.678 cv
13.8175 161.486 14.0215 161.39 14.2735 161.39 cv
14.4775 161.39 14.6575 161.462 14.8015 161.582 cv
14.9575 161.714 15.0295 161.882 15.0295 162.086 cv
15.0295 162.218 14.9935 162.326 14.9095 162.41 cv
14.8375 162.506 14.7295 162.542 14.5975 162.542 cv
14.4295 162.542 14.2735 162.482 14.1295 162.35 cv
13.9855 162.23 13.9135 162.074 13.9135 161.906 cv
13.8175 162.038 13.7575 162.194 13.7575 162.374 cv
13.7575 162.722 13.8895 163.022 14.1295 163.274 cv
14.3695 163.526 14.6815 163.754 15.0535 163.958 cv
18.4855 164.81 li
18.6055 164.834 18.6895 164.894 18.7615 164.99 cv
18.8335 165.086 18.8695 165.194 18.8695 165.314 cv
18.8695 165.41 18.8335 165.494 18.7855 165.566 cv
18.7375 165.638 18.6535 165.674 18.5455 165.674 cv
f
18.8695 155.611 mo
18.8695 155.995 18.7735 156.331 18.6055 156.619 cv
18.4375 156.919 18.1975 157.147 17.8855 157.303 cv
17.5855 157.471 17.2375 157.543 16.8535 157.543 cv
16.3135 157.543 15.7735 157.399 15.2455 157.087 cv
14.7175 156.787 14.2855 156.391 13.9495 155.887 cv
13.6135 155.383 13.4455 154.855 13.4455 154.303 cv
13.4455 154.015 13.5055 153.751 13.6015 153.511 cv
13.6975 153.283 13.8415 153.079 14.0215 152.911 cv
14.2135 152.743 14.4295 152.611 14.6695 152.515 cv
14.9215 152.419 15.1855 152.371 15.4735 152.371 cv
15.8935 152.371 16.3015 152.467 16.7095 152.635 cv
17.1175 152.815 17.4775 153.055 17.8135 153.355 cv
18.1495 153.667 18.4015 154.015 18.5935 154.411 cv
18.7735 154.807 18.8695 155.203 18.8695 155.611 cv
18.5695 155.587 mo
18.5695 155.227 18.4495 154.903 18.2095 154.615 cv
17.9695 154.327 17.6575 154.075 17.2855 153.883 cv
16.9255 153.691 16.5295 153.547 16.1215 153.451 cv
15.7135 153.355 15.3415 153.295 15.0055 153.295 cv
14.6695 153.295 14.3695 153.391 14.1295 153.559 cv
13.8895 153.727 13.7575 153.991 13.7575 154.327 cv
13.7575 154.795 13.9615 155.203 14.3575 155.551 cv
14.7655 155.911 15.2455 156.175 15.7975 156.355 cv
16.3495 156.535 16.8655 156.619 17.3215 156.619 cv
17.6695 156.619 17.9695 156.535 18.2095 156.355 cv
18.4495 156.175 18.5695 155.923 18.5695 155.587 cv
f
20.7175 151.053 mo
20.8255 150.909 20.8855 150.729 20.8855 150.513 cv
20.8855 150.225 20.5615 149.997 19.9375 149.817 cv
19.6255 149.745 18.6415 149.541 16.9375 149.205 cv
13.9975 148.653 li
13.9975 149.685 li
13.9975 149.769 13.9495 149.805 13.8415 149.805 cv
13.6735 149.781 13.5775 149.721 13.5775 149.649 cv
13.5775 148.581 li
12.7975 148.437 li
12.5575 148.389 12.3535 148.353 12.1735 148.305 cv
12.0055 148.269 11.8375 148.233 11.6935 148.185 cv
11.5495 148.137 11.3815 148.077 11.1895 147.981 cv
10.9255 147.849 10.7095 147.669 10.5415 147.429 cv
10.3735 147.201 10.2895 146.949 10.2895 146.673 cv
10.2895 146.505 10.3255 146.337 10.3855 146.169 cv
10.4575 146.001 10.5535 145.869 10.6735 145.761 cv
10.8055 145.653 10.9615 145.593 11.1295 145.593 cv
11.3455 145.593 11.5255 145.665 11.6695 145.797 cv
11.8135 145.941 11.8855 146.097 11.8855 146.289 cv
11.8855 146.421 11.8495 146.529 11.7655 146.625 cv
11.6935 146.721 11.5855 146.757 11.4535 146.757 cv
11.2855 146.757 11.1295 146.697 10.9975 146.577 cv
10.8655 146.457 10.7935 146.313 10.7695 146.133 cv
10.6615 146.289 10.6015 146.469 10.6015 146.685 cv
10.6015 146.805 10.6615 146.925 10.7695 147.033 cv
10.8895 147.141 11.0095 147.213 11.1295 147.237 cv
11.3455 147.285 11.8975 147.405 12.7855 147.573 cv
13.5775 147.717 li
13.5775 146.481 li
13.5775 146.409 13.6375 146.361 13.7335 146.361 cv
13.8415 146.397 li
13.9615 146.445 li
13.9975 146.517 li
13.9975 147.801 li
16.9255 148.353 li
17.3575 148.425 17.7895 148.509 18.2215 148.605 cv
18.6535 148.701 19.0975 148.821 19.5655 148.989 cv
20.0215 149.157 20.4175 149.361 20.7295 149.625 cv
21.0415 149.889 21.1975 150.189 21.1975 150.537 cv
21.1975 150.813 21.1135 151.053 20.9695 151.269 cv
20.8135 151.485 20.6095 151.581 20.3575 151.581 cv
20.1415 151.581 19.9615 151.521 19.8175 151.389 cv
19.6735 151.257 19.6015 151.089 19.6015 150.885 cv
19.6015 150.765 19.6375 150.657 19.7215 150.561 cv
19.7935 150.465 19.9015 150.417 20.0335 150.417 cv
20.2015 150.417 20.3575 150.489 20.5015 150.609 cv
20.6455 150.741 20.7175 150.885 20.7175 151.053 cv
f
18.5935 142.639 mo
18.4855 142.615 li
18.3775 142.567 li
18.3295 142.471 li
18.3295 141.787 18.3175 141.331 18.2695 141.103 cv
18.2215 140.887 18.1015 140.767 17.9215 140.719 cv
11.3335 139.075 li
11.2375 139.051 11.1535 139.027 11.0695 139.027 cv
11.0095 139.027 10.9735 139.171 10.9735 139.447 cv
10.9735 140.143 li
10.9735 140.683 11.0575 141.103 11.2255 141.391 cv
11.3935 141.679 11.6095 141.895 11.8735 142.027 cv
12.1375 142.171 12.5815 142.339 13.1935 142.555 cv
13.3015 142.675 li
13.3015 142.783 li
13.3015 142.867 13.2535 142.903 13.1455 142.903 cv
10.6615 142.051 li
10.5535 141.931 li
10.5535 134.839 li
10.5535 134.767 10.6135 134.719 10.7095 134.719 cv
13.1935 135.115 li
13.2655 135.163 li
13.3015 135.235 li
13.3015 135.343 li
13.3015 135.427 13.2535 135.463 13.1455 135.463 cv
12.5815 135.379 12.1855 135.331 11.9455 135.331 cv
11.6695 135.331 11.4535 135.391 11.3095 135.511 cv
11.1655 135.631 11.0815 135.787 11.0335 135.967 cv
10.9975 136.159 10.9735 136.399 10.9735 136.699 cv
10.9735 137.407 li
10.9735 137.623 10.9975 137.767 11.0335 137.839 cv
11.0815 137.911 11.1895 137.983 11.3815 138.031 cv
17.9695 139.675 li
18.0175 139.687 li
18.0775 139.699 li
18.1855 139.699 18.2455 139.639 18.2695 139.519 cv
18.3175 139.315 18.3295 138.871 18.3295 138.187 cv
18.3295 138.115 18.3895 138.067 18.4855 138.067 cv
18.6055 138.103 18.6775 138.127 18.7015 138.139 cv
18.7495 138.271 li
18.7495 142.519 li
18.7495 142.603 18.7015 142.639 18.5935 142.639 cv
f
18.8695 133.771 mo
18.8695 134.155 18.7735 134.491 18.5815 134.779 cv
18.3895 135.067 18.1135 135.283 17.7775 135.427 cv
17.4415 135.583 17.0935 135.655 16.7095 135.655 cv
16.1455 135.655 15.6055 135.511 15.1015 135.223 cv
14.5975 134.935 14.2015 134.551 13.9015 134.059 cv
13.6015 133.567 13.4455 133.039 13.4455 132.475 cv
13.4455 132.139 13.5415 131.839 13.7215 131.575 cv
13.9015 131.323 14.1535 131.191 14.4775 131.191 cv
14.9455 131.191 15.2935 131.383 15.5095 131.743 cv
15.7375 132.115 15.8815 132.535 15.9295 132.991 cv
15.9775 133.447 16.0015 133.963 16.0015 134.515 cv
16.0015 134.551 li
16.4815 134.683 16.8895 134.743 17.2255 134.743 cv
17.5855 134.743 17.8975 134.671 18.1615 134.503 cv
18.4375 134.335 18.5695 134.083 18.5695 133.747 cv
18.5695 133.267 18.4615 132.811 18.2455 132.367 cv
18.0295 131.935 17.7175 131.575 17.3335 131.299 cv
17.2975 131.203 li
17.3695 131.083 li
17.4895 131.023 li
17.5615 131.047 li
17.9695 131.335 18.2935 131.731 18.5215 132.223 cv
18.7495 132.727 18.8695 133.243 18.8695 133.771 cv
15.6895 134.479 mo
15.6895 134.023 15.6775 133.591 15.6295 133.195 cv
15.5815 132.799 15.4735 132.439 15.3055 132.115 cv
15.1375 131.803 14.8615 131.635 14.4895 131.635 cv
14.3455 131.635 14.2135 131.683 14.1055 131.767 cv
13.9975 131.851 13.9135 131.959 13.8535 132.079 cv
13.7935 132.211 13.7575 132.343 13.7575 132.487 cv
13.7575 132.823 13.8535 133.135 14.0335 133.399 cv
14.2255 133.675 14.4655 133.903 14.7535 134.071 cv
15.0535 134.251 15.3655 134.383 15.6895 134.479 cv
f
18.0175 129.561 mo
18.3895 129.345 18.5695 128.913 18.5695 128.265 cv
18.5695 127.989 18.5215 127.725 18.4255 127.473 cv
18.3295 127.221 18.1855 127.005 17.9935 126.837 cv
17.8015 126.669 17.5735 126.585 17.2975 126.585 cv
17.0935 126.585 16.9255 126.669 16.7935 126.813 cv
16.6615 126.957 16.5655 127.137 16.5175 127.353 cv
16.3855 128.001 li
16.3135 128.301 16.1815 128.541 15.9775 128.733 cv
15.7735 128.925 15.5215 129.021 15.2335 129.021 cv
14.8855 129.021 14.5735 128.925 14.2975 128.733 cv
14.0215 128.541 13.8055 128.289 13.6615 127.977 cv
13.5175 127.665 13.4455 127.329 13.4455 126.981 cv
13.4455 126.621 13.5415 126.297 13.7095 126.009 cv
13.8895 125.721 14.1415 125.577 14.4775 125.577 cv
14.6695 125.577 14.8255 125.637 14.9695 125.733 cv
15.1135 125.841 15.1735 125.985 15.1735 126.165 cv
15.1735 126.273 15.1495 126.369 15.0775 126.441 cv
15.0055 126.513 14.9215 126.549 14.8135 126.549 cv
14.7175 126.549 14.6335 126.525 14.5375 126.477 cv
14.4535 126.429 14.3815 126.357 14.3335 126.261 cv
14.2855 126.177 14.2495 126.081 14.2495 125.985 cv
14.0815 126.057 13.9615 126.189 13.8775 126.381 cv
13.8055 126.573 13.7575 126.789 13.7575 127.005 cv
13.7575 127.221 13.8055 127.425 13.8775 127.617 cv
13.9615 127.821 14.0815 127.989 14.2375 128.109 cv
14.4055 128.229 14.5855 128.289 14.8015 128.289 cv
14.9455 128.289 15.0775 128.241 15.1855 128.145 cv
15.2935 128.049 15.3655 127.917 15.4135 127.761 cv
15.5575 127.065 li
15.6055 126.849 15.6895 126.645 15.8095 126.453 cv
15.9295 126.273 16.0855 126.129 16.2655 126.021 cv
16.4455 125.913 16.6495 125.853 16.8775 125.853 cv
17.1775 125.853 17.4775 125.937 17.7655 126.105 cv
18.0535 126.273 18.2815 126.477 18.4495 126.717 cv
18.7375 127.149 18.8695 127.665 18.8695 128.277 cv
18.8695 128.709 18.7735 129.093 18.5815 129.453 cv
18.3895 129.813 18.1015 129.981 17.7175 129.981 cv
17.5015 129.981 17.3215 129.921 17.1535 129.801 cv
16.9855 129.681 16.9015 129.501 16.9015 129.273 cv
16.9015 129.153 16.9495 129.045 17.0215 128.949 cv
17.1055 128.865 17.2135 128.817 17.3335 128.817 cv
17.5255 128.817 17.6815 128.889 17.8135 129.021 cv
17.9575 129.165 18.0175 129.321 18.0175 129.501 cv
18.0175 129.561 li
f
17.7775 124.248 mo
17.6575 124.248 17.5495 124.236 17.4415 124.212 cv
13.9975 123.348 li
13.9975 124.608 li
13.9975 124.692 13.9495 124.728 13.8415 124.728 cv
13.6735 124.704 13.5775 124.644 13.5775 124.572 cv
13.5775 123.24 li
11.6215 122.76 li
11.5255 122.736 11.4295 122.676 11.3575 122.58 cv
11.2855 122.484 11.2375 122.376 11.2375 122.256 cv
11.2375 122.16 11.2735 122.076 11.3335 122.004 cv
11.3935 121.932 11.4775 121.896 11.5735 121.896 cv
11.6335 121.908 li
11.6695 121.908 li
13.5775 122.388 li
13.5775 121.152 li
13.5775 121.08 13.6375 121.032 13.7335 121.032 cv
13.8295 121.056 li
13.9495 121.104 li
13.9975 121.188 li
13.9975 122.496 li
17.4655 123.36 li
17.6935 123.42 17.8855 123.444 18.0535 123.444 cv
18.4015 123.444 18.5695 123.336 18.5695 123.096 cv
18.5695 122.748 18.4135 122.436 18.0775 122.16 cv
17.7415 121.896 17.3815 121.68 16.9855 121.536 cv
16.9135 121.44 li
16.9135 121.296 li
16.9495 121.224 li
17.0215 121.188 li
17.0575 121.2 li
17.5375 121.38 17.9695 121.632 18.3295 121.968 cv
18.6895 122.304 18.8695 122.688 18.8695 123.12 cv
18.8695 123.444 18.7615 123.708 18.5695 123.924 cv
18.3655 124.14 18.1015 124.248 17.7775 124.248 cv
f
16.1575 115.749 mo
16.6375 115.749 17.0695 115.665 17.4295 115.473 cv
17.8015 115.293 18.0895 115.029 18.2935 114.669 cv
18.4975 114.309 18.5935 113.889 18.5935 113.409 cv
18.5935 112.905 18.4735 112.425 18.2095 111.957 cv
17.9455 111.489 17.5975 111.093 17.1655 110.757 cv
16.7335 110.433 16.2775 110.205 15.7975 110.085 cv
15.7255 109.989 li
15.7255 109.845 li
15.7615 109.773 li
15.8335 109.737 li
15.8695 109.749 li
16.4215 109.893 16.9495 110.157 17.4295 110.541 cv
17.9215 110.937 18.3055 111.405 18.5815 111.957 cv
18.8575 112.509 19.0015 113.061 19.0015 113.637 cv
19.0015 114.261 18.8575 114.825 18.5935 115.317 cv
18.3175 115.821 17.9335 116.205 17.4295 116.481 cv
16.9255 116.757 16.3615 116.889 15.7255 116.889 cv
15.0535 116.889 14.3935 116.745 13.7335 116.445 cv
13.0855 116.145 12.4975 115.737 11.9815 115.233 cv
11.4655 114.729 11.0575 114.141 10.7455 113.493 cv
10.4455 112.845 10.2895 112.185 10.2895 111.513 cv
10.2895 111.249 10.3375 110.997 10.4095 110.757 cv
10.4935 110.517 10.6135 110.289 10.7815 110.073 cv
10.9495 109.869 11.1295 109.701 11.3455 109.569 cv
10.3135 108.621 li
10.2895 108.561 li
10.2895 108.489 li
10.3375 108.417 li
10.4095 108.381 li
13.6495 109.197 li
13.7335 109.293 li
13.7335 109.509 li
13.7335 109.581 13.6975 109.605 13.6015 109.605 cv
13.4335 109.581 13.2175 109.557 12.9655 109.557 cv
12.5815 109.557 12.2095 109.629 11.8615 109.761 cv
11.5255 109.893 11.2495 110.097 11.0335 110.373 cv
10.8175 110.661 10.7095 110.997 10.7095 111.393 cv
10.7095 112.053 10.8775 112.653 11.2015 113.193 cv
11.5375 113.733 11.9695 114.189 12.4975 114.573 cv
13.0255 114.957 13.6255 115.245 14.2735 115.449 cv
14.9215 115.653 15.5575 115.749 16.1575 115.749 cv
f
18.8695 106.847 mo
18.8695 107.351 18.6895 107.759 18.3055 108.047 cv
17.9335 108.335 17.4895 108.479 16.9615 108.479 cv
16.4575 108.479 15.9175 108.347 15.3655 108.083 cv
14.8135 107.819 14.3575 107.471 13.9975 107.015 cv
13.6375 106.559 13.4455 106.079 13.4455 105.551 cv
13.4455 105.311 13.5175 105.107 13.6375 104.915 cv
13.7695 104.723 13.9495 104.579 14.1655 104.471 cv
13.8535 104.387 13.6855 104.207 13.6855 103.943 cv
13.6855 103.847 13.7215 103.763 13.7815 103.691 cv
13.8415 103.619 13.9255 103.583 14.0215 103.583 cv
14.0815 103.595 li
14.1175 103.595 li
17.4655 104.435 li
17.7055 104.495 17.9095 104.519 18.0535 104.519 cv
18.4015 104.519 18.5695 104.411 18.5695 104.171 cv
18.5695 103.931 18.4135 103.739 18.0895 103.607 cv
17.7775 103.475 17.4055 103.367 16.9855 103.271 cv
16.9135 103.175 li
16.9135 103.031 li
16.9615 102.959 li
17.0335 102.923 li
17.5975 103.067 18.0415 103.223 18.3775 103.391 cv
18.7135 103.559 18.8695 103.823 18.8695 104.195 cv
18.8695 104.471 18.7855 104.711 18.6415 104.915 cv
18.4975 105.119 18.2815 105.251 18.0175 105.299 cv
18.5935 105.815 18.8695 106.331 18.8695 106.847 cv
18.5695 106.835 mo
18.5695 106.547 18.4615 106.271 18.2455 105.995 cv
18.0295 105.731 17.7775 105.491 17.4775 105.299 cv
17.4415 105.287 li
14.8375 104.639 li
14.8015 104.627 li
14.5135 104.675 14.2735 104.783 14.0695 104.939 cv
13.8655 105.107 13.7575 105.311 13.7575 105.575 cv
13.7575 105.851 13.8775 106.103 14.0935 106.331 cv
14.3095 106.571 14.5735 106.763 14.8735 106.919 cv
15.1975 107.087 15.6415 107.231 16.1935 107.375 cv
16.7455 107.519 17.1775 107.579 17.4895 107.579 cv
17.7775 107.579 18.0295 107.519 18.2455 107.399 cv
18.4615 107.279 18.5695 107.099 18.5695 106.835 cv
f
18.0175 101.557 mo
18.3895 101.341 18.5695 100.909 18.5695 100.261 cv
18.5695 99.9846 18.5215 99.7206 18.4255 99.4686 cv
18.3295 99.2165 18.1855 99.0005 17.9935 98.8326 cv
17.8015 98.6646 17.5735 98.5806 17.2975 98.5806 cv
17.0935 98.5806 16.9255 98.6646 16.7935 98.8085 cv
16.6615 98.9525 16.5655 99.1325 16.5175 99.3485 cv
16.3855 99.9966 li
16.3135 100.297 16.1815 100.537 15.9775 100.729 cv
15.7735 100.921 15.5215 101.017 15.2335 101.017 cv
14.8855 101.017 14.5735 100.921 14.2975 100.729 cv
14.0215 100.537 13.8055 100.285 13.6615 99.9725 cv
13.5175 99.6605 13.4455 99.3245 13.4455 98.9765 cv
13.4455 98.6165 13.5415 98.2925 13.7095 98.0045 cv
13.8895 97.7165 14.1415 97.5725 14.4775 97.5725 cv
14.6695 97.5725 14.8255 97.6325 14.9695 97.7285 cv
15.1135 97.8365 15.1735 97.9805 15.1735 98.1605 cv
15.1735 98.2685 15.1495 98.3645 15.0775 98.4365 cv
15.0055 98.5085 14.9215 98.5445 14.8135 98.5445 cv
14.7175 98.5445 14.6335 98.5205 14.5375 98.4725 cv
14.4535 98.4245 14.3815 98.3525 14.3335 98.2565 cv
14.2855 98.1725 14.2495 98.0765 14.2495 97.9805 cv
14.0815 98.0526 13.9615 98.1845 13.8775 98.3765 cv
13.8055 98.5686 13.7575 98.7845 13.7575 99.0005 cv
13.7575 99.2165 13.8055 99.4205 13.8775 99.6125 cv
13.9615 99.8166 14.0815 99.9846 14.2375 100.105 cv
14.4055 100.225 14.5855 100.285 14.8015 100.285 cv
14.9455 100.285 15.0775 100.237 15.1855 100.141 cv
15.2935 100.045 15.3655 99.9125 15.4135 99.7565 cv
15.5575 99.0605 li
15.6055 98.8446 15.6895 98.6405 15.8095 98.4485 cv
15.9295 98.2685 16.0855 98.1245 16.2655 98.0165 cv
16.4455 97.9085 16.6495 97.8485 16.8775 97.8485 cv
17.1775 97.8485 17.4775 97.9325 17.7655 98.1005 cv
18.0535 98.2685 18.2815 98.4725 18.4495 98.7125 cv
18.7375 99.1445 18.8695 99.6605 18.8695 100.273 cv
18.8695 100.705 18.7735 101.089 18.5815 101.449 cv
18.3895 101.809 18.1015 101.977 17.7175 101.977 cv
17.5015 101.977 17.3215 101.917 17.1535 101.797 cv
16.9855 101.677 16.9015 101.497 16.9015 101.269 cv
16.9015 101.149 16.9495 101.041 17.0215 100.945 cv
17.1055 100.861 17.2135 100.813 17.3335 100.813 cv
17.5255 100.813 17.6815 100.885 17.8135 101.017 cv
17.9575 101.161 18.0175 101.317 18.0175 101.497 cv
18.0175 101.557 li
f
18.8695 94.5753 mo
18.8695 94.9593 18.7735 95.2953 18.5815 95.5833 cv
18.3895 95.8713 18.1135 96.0873 17.7775 96.2313 cv
17.4415 96.3873 17.0935 96.4593 16.7095 96.4593 cv
16.1455 96.4593 15.6055 96.3153 15.1015 96.0273 cv
14.5975 95.7393 14.2015 95.3553 13.9015 94.8633 cv
13.6015 94.3713 13.4455 93.8433 13.4455 93.2793 cv
13.4455 92.9433 13.5415 92.6433 13.7215 92.3793 cv
13.9015 92.1273 14.1535 91.9953 14.4775 91.9953 cv
14.9455 91.9953 15.2935 92.1873 15.5095 92.5473 cv
15.7375 92.9193 15.8815 93.3393 15.9295 93.7953 cv
15.9775 94.2513 16.0015 94.7673 16.0015 95.3193 cv
16.0015 95.3553 li
16.4815 95.4873 16.8895 95.5473 17.2255 95.5473 cv
17.5855 95.5473 17.8975 95.4753 18.1615 95.3073 cv
18.4375 95.1393 18.5695 94.8873 18.5695 94.5513 cv
18.5695 94.0713 18.4615 93.6153 18.2455 93.1713 cv
18.0295 92.7393 17.7175 92.3793 17.3335 92.1033 cv
17.2975 92.0073 li
17.3695 91.8873 li
17.4895 91.8273 li
17.5615 91.8513 li
17.9695 92.1393 18.2935 92.5353 18.5215 93.0273 cv
18.7495 93.5313 18.8695 94.0473 18.8695 94.5753 cv
15.6895 95.2833 mo
15.6895 94.8273 15.6775 94.3953 15.6295 93.9993 cv
15.5815 93.6033 15.4735 93.2433 15.3055 92.9193 cv
15.1375 92.6073 14.8615 92.4393 14.4895 92.4393 cv
14.3455 92.4393 14.2135 92.4873 14.1055 92.5713 cv
13.9975 92.6553 13.9135 92.7633 13.8535 92.8833 cv
13.7935 93.0153 13.7575 93.1473 13.7575 93.2913 cv
13.7575 93.6273 13.8535 93.9393 14.0335 94.2033 cv
14.2255 94.4793 14.4655 94.7073 14.7535 94.8753 cv
15.0535 95.0553 15.3655 95.1873 15.6895 95.2833 cv
f
18.0175 90.3651 mo
18.3895 90.1491 18.5695 89.7171 18.5695 89.0691 cv
18.5695 88.7931 18.5215 88.5291 18.4255 88.2771 cv
18.3295 88.0251 18.1855 87.8091 17.9935 87.6411 cv
17.8015 87.4731 17.5735 87.3891 17.2975 87.3891 cv
17.0935 87.3891 16.9255 87.4731 16.7935 87.6171 cv
16.6615 87.7611 16.5655 87.9411 16.5175 88.1571 cv
16.3855 88.8051 li
16.3135 89.1051 16.1815 89.3451 15.9775 89.5371 cv
15.7735 89.7291 15.5215 89.8251 15.2335 89.8251 cv
14.8855 89.8251 14.5735 89.7291 14.2975 89.5371 cv
14.0215 89.3451 13.8055 89.0931 13.6615 88.7811 cv
13.5175 88.4691 13.4455 88.1331 13.4455 87.7851 cv
13.4455 87.4251 13.5415 87.1011 13.7095 86.8131 cv
13.8895 86.5251 14.1415 86.3811 14.4775 86.3811 cv
14.6695 86.3811 14.8255 86.4411 14.9695 86.5371 cv
15.1135 86.6451 15.1735 86.7891 15.1735 86.9691 cv
15.1735 87.0771 15.1495 87.1731 15.0775 87.2451 cv
15.0055 87.3171 14.9215 87.3531 14.8135 87.3531 cv
14.7175 87.3531 14.6335 87.3291 14.5375 87.2811 cv
14.4535 87.2331 14.3815 87.1611 14.3335 87.0651 cv
14.2855 86.9811 14.2495 86.8851 14.2495 86.7891 cv
14.0815 86.8611 13.9615 86.9931 13.8775 87.1851 cv
13.8055 87.3771 13.7575 87.5931 13.7575 87.8091 cv
13.7575 88.0251 13.8055 88.2291 13.8775 88.4211 cv
13.9615 88.6251 14.0815 88.7931 14.2375 88.9131 cv
14.4055 89.0331 14.5855 89.0931 14.8015 89.0931 cv
14.9455 89.0931 15.0775 89.0451 15.1855 88.9491 cv
15.2935 88.8531 15.3655 88.7211 15.4135 88.5651 cv
15.5575 87.8691 li
15.6055 87.6531 15.6895 87.4491 15.8095 87.2571 cv
15.9295 87.0771 16.0855 86.9331 16.2655 86.8251 cv
16.4455 86.7171 16.6495 86.6571 16.8775 86.6571 cv
17.1775 86.6571 17.4775 86.7411 17.7655 86.9091 cv
18.0535 87.0771 18.2815 87.2811 18.4495 87.5211 cv
18.7375 87.9531 18.8695 88.4691 18.8695 89.0811 cv
18.8695 89.5131 18.7735 89.8971 18.5815 90.2571 cv
18.3895 90.6171 18.1015 90.7851 17.7175 90.7851 cv
17.5015 90.7851 17.3215 90.7251 17.1535 90.6051 cv
16.9855 90.4851 16.9015 90.3051 16.9015 90.0771 cv
16.9015 89.9571 16.9495 89.8491 17.0215 89.7531 cv
17.1055 89.6691 17.2135 89.6211 17.3335 89.6211 cv
17.5255 89.6211 17.6815 89.6931 17.8135 89.8251 cv
17.9575 89.9691 18.0175 90.1251 18.0175 90.3051 cv
18.0175 90.3651 li
f
gsave
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
clp
1 lw
[6 6 ] 0 dsh
52.812 253.133 mo
89.6966 252.679 li
126.581 252.426 li
163.466 251.669 li
200.35 250.408 li
237.235 249.323 li
274.119 246.371 li
311.004 243.57 li
347.889 240.87 li
384.773 238.195 li
421.658 235.622 li
458.542 232.897 li
495.427 230.222 li
532.311 227.623 li
@
gsave
50.0164 257.625 mo
55.6076 257.625 li
55.6076 248.64 li
50.0164 248.64 li
cp
clp
52.812 257.375 mo
55.3576 253.133 li
52.812 248.89 li
50.2664 253.133 li
cp
f
.5 lw
0 lj
[] 0 dsh
52.812 257.375 mo
55.3576 253.133 li
52.812 248.89 li
50.2664 253.133 li
cp
@
grestore
gsave
86.901 257.171 mo
92.4921 257.171 li
92.4921 248.186 li
86.901 248.186 li
cp
clp
89.6966 256.921 mo
92.2422 252.679 li
89.6966 248.436 li
87.151 252.679 li
cp
f
.5 lw
0 lj
[] 0 dsh
89.6966 256.921 mo
92.2422 252.679 li
89.6966 248.436 li
87.151 252.679 li
cp
@
grestore
gsave
123.786 256.919 mo
129.377 256.919 li
129.377 247.934 li
123.786 247.934 li
cp
clp
126.581 256.669 mo
129.127 252.426 li
126.581 248.184 li
124.036 252.426 li
cp
f
.5 lw
0 lj
[] 0 dsh
126.581 256.669 mo
129.127 252.426 li
126.581 248.184 li
124.036 252.426 li
cp
@
grestore
gsave
160.67 256.162 mo
166.261 256.162 li
166.261 247.177 li
160.67 247.177 li
cp
clp
163.466 255.912 mo
166.011 251.669 li
163.466 247.427 li
160.92 251.669 li
cp
f
.5 lw
0 lj
[] 0 dsh
163.466 255.912 mo
166.011 251.669 li
163.466 247.427 li
160.92 251.669 li
cp
@
grestore
gsave
197.555 254.9 mo
203.146 254.9 li
203.146 245.915 li
197.555 245.915 li
cp
clp
200.35 254.65 mo
202.896 250.408 li
200.35 246.165 li
197.805 250.408 li
cp
f
.5 lw
0 lj
[] 0 dsh
200.35 254.65 mo
202.896 250.408 li
200.35 246.165 li
197.805 250.408 li
cp
@
grestore
gsave
234.439 253.815 mo
240.03 253.815 li
240.03 244.83 li
234.439 244.83 li
cp
clp
237.235 253.565 mo
239.78 249.323 li
237.235 245.08 li
234.689 249.323 li
cp
f
.5 lw
0 lj
[] 0 dsh
237.235 253.565 mo
239.78 249.323 li
237.235 245.08 li
234.689 249.323 li
cp
@
grestore
gsave
271.324 250.863 mo
276.915 250.863 li
276.915 241.878 li
271.324 241.878 li
cp
clp
274.119 250.613 mo
276.665 246.371 li
274.119 242.128 li
271.574 246.371 li
cp
f
.5 lw
0 lj
[] 0 dsh
274.119 250.613 mo
276.665 246.371 li
274.119 242.128 li
271.574 246.371 li
cp
@
grestore
gsave
308.208 248.062 mo
313.8 248.062 li
313.8 239.077 li
308.208 239.077 li
cp
clp
311.004 247.812 mo
313.55 243.57 li
311.004 239.327 li
308.458 243.57 li
cp
f
.5 lw
0 lj
[] 0 dsh
311.004 247.812 mo
313.55 243.57 li
311.004 239.327 li
308.458 243.57 li
cp
@
grestore
gsave
345.093 245.363 mo
350.684 245.363 li
350.684 236.377 li
345.093 236.377 li
cp
clp
347.889 245.113 mo
350.434 240.87 li
347.889 236.627 li
345.343 240.87 li
cp
f
.5 lw
0 lj
[] 0 dsh
347.889 245.113 mo
350.434 240.87 li
347.889 236.627 li
345.343 240.87 li
cp
@
grestore
gsave
381.978 242.688 mo
387.569 242.688 li
387.569 233.703 li
381.978 233.703 li
cp
clp
384.773 242.438 mo
387.319 238.195 li
384.773 233.953 li
382.228 238.195 li
cp
f
.5 lw
0 lj
[] 0 dsh
384.773 242.438 mo
387.319 238.195 li
384.773 233.953 li
382.228 238.195 li
cp
@
grestore
gsave
418.862 240.114 mo
424.453 240.114 li
424.453 231.129 li
418.862 231.129 li
cp
clp
421.658 239.864 mo
424.203 235.622 li
421.658 231.379 li
419.112 235.622 li
cp
f
.5 lw
0 lj
[] 0 dsh
421.658 239.864 mo
424.203 235.622 li
421.658 231.379 li
419.112 235.622 li
cp
@
grestore
gsave
455.747 237.389 mo
461.338 237.389 li
461.338 228.404 li
455.747 228.404 li
cp
clp
458.542 237.139 mo
461.088 232.897 li
458.542 228.654 li
455.997 232.897 li
cp
f
.5 lw
0 lj
[] 0 dsh
458.542 237.139 mo
461.088 232.897 li
458.542 228.654 li
455.997 232.897 li
cp
@
grestore
gsave
492.631 234.715 mo
498.222 234.715 li
498.222 225.729 li
492.631 225.729 li
cp
clp
495.427 234.465 mo
497.973 230.222 li
495.427 225.979 li
492.881 230.222 li
cp
f
.5 lw
0 lj
[] 0 dsh
495.427 234.465 mo
497.973 230.222 li
495.427 225.979 li
492.881 230.222 li
cp
@
grestore
gsave
529.516 232.116 mo
535.107 232.116 li
535.107 223.131 li
529.516 223.131 li
cp
clp
532.311 231.866 mo
534.857 227.623 li
532.311 223.381 li
529.766 227.623 li
cp
f
.5 lw
0 lj
[] 0 dsh
532.311 231.866 mo
534.857 227.623 li
532.311 223.381 li
529.766 227.623 li
cp
@
grestore
grestore
gsave
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
clp
1 lw
[1 3 ] 0 dsh
52.812 248.591 mo
89.6966 246.219 li
126.581 247.027 li
163.466 244.756 li
200.35 241.879 li
237.235 236.379 li
274.119 219.524 li
311.004 193.232 li
347.889 190.608 li
384.773 168.757 li
421.658 133.533 li
458.542 124.046 li
495.427 89.6294 li
532.311 51.3272 li
@
gsave
49.562 251.841 mo
56.062 251.841 li
56.062 245.341 li
49.562 245.341 li
cp
clp
.5 lw
[] 0 dsh
52.812 251.591 mo
53.6076 251.591 54.3707 251.275 54.9333 250.712 cv
55.4959 250.15 55.812 249.387 55.812 248.591 cv
55.812 247.795 55.4959 247.032 54.9333 246.47 cv
54.3707 245.907 53.6076 245.591 52.812 245.591 cv
52.0164 245.591 51.2533 245.907 50.6907 246.47 cv
50.1281 247.032 49.812 247.795 49.812 248.591 cv
49.812 249.387 50.1281 250.15 50.6907 250.712 cv
51.2533 251.275 52.0164 251.591 52.812 251.591 cv
cp
@
grestore
gsave
86.4466 249.469 mo
92.9466 249.469 li
92.9466 242.969 li
86.4466 242.969 li
cp
clp
.5 lw
[] 0 dsh
89.6966 249.219 mo
90.4922 249.219 91.2553 248.903 91.8179 248.34 cv
92.3805 247.778 92.6966 247.015 92.6966 246.219 cv
92.6966 245.424 92.3805 244.66 91.8179 244.098 cv
91.2553 243.535 90.4922 243.219 89.6966 243.219 cv
88.901 243.219 88.1378 243.535 87.5752 244.098 cv
87.0127 244.66 86.6966 245.424 86.6966 246.219 cv
86.6966 247.015 87.0127 247.778 87.5752 248.34 cv
88.1378 248.903 88.901 249.219 89.6966 249.219 cv
cp
@
grestore
gsave
123.331 250.277 mo
129.831 250.277 li
129.831 243.777 li
123.331 243.777 li
cp
clp
.5 lw
[] 0 dsh
126.581 250.027 mo
127.377 250.027 128.14 249.71 128.702 249.148 cv
129.265 248.585 129.581 247.822 129.581 247.027 cv
129.581 246.231 129.265 245.468 128.702 244.905 cv
128.14 244.343 127.377 244.027 126.581 244.027 cv
125.786 244.027 125.022 244.343 124.46 244.905 cv
123.897 245.468 123.581 246.231 123.581 247.027 cv
123.581 247.822 123.897 248.585 124.46 249.148 cv
125.022 249.71 125.786 250.027 126.581 250.027 cv
cp
@
grestore
gsave
160.216 248.006 mo
166.716 248.006 li
166.716 241.506 li
160.216 241.506 li
cp
clp
.5 lw
[] 0 dsh
163.466 247.756 mo
164.261 247.756 165.024 247.44 165.587 246.877 cv
166.15 246.314 166.466 245.551 166.466 244.756 cv
166.466 243.96 166.15 243.197 165.587 242.634 cv
165.024 242.072 164.261 241.756 163.466 241.756 cv
162.67 241.756 161.907 242.072 161.344 242.634 cv
160.782 243.197 160.466 243.96 160.466 244.756 cv
160.466 245.551 160.782 246.314 161.344 246.877 cv
161.907 247.44 162.67 247.756 163.466 247.756 cv
cp
@
grestore
gsave
197.1 245.129 mo
203.6 245.129 li
203.6 238.629 li
197.1 238.629 li
cp
clp
.5 lw
[] 0 dsh
200.35 244.879 mo
201.146 244.879 201.909 244.563 202.472 244.001 cv
203.034 243.438 203.35 242.675 203.35 241.879 cv
203.35 241.084 203.034 240.32 202.472 239.758 cv
201.909 239.195 201.146 238.879 200.35 238.879 cv
199.555 238.879 198.792 239.195 198.229 239.758 cv
197.666 240.32 197.35 241.084 197.35 241.879 cv
197.35 242.675 197.666 243.438 198.229 244.001 cv
198.792 244.563 199.555 244.879 200.35 244.879 cv
cp
@
grestore
gsave
233.985 239.629 mo
240.485 239.629 li
240.485 233.129 li
233.985 233.129 li
cp
clp
.5 lw
[] 0 dsh
237.235 239.379 mo
238.03 239.379 238.794 239.063 239.356 238.5 cv
239.919 237.937 240.235 237.174 240.235 236.379 cv
240.235 235.583 239.919 234.82 239.356 234.257 cv
238.794 233.695 238.03 233.379 237.235 233.379 cv
236.439 233.379 235.676 233.695 235.114 234.257 cv
234.551 234.82 234.235 235.583 234.235 236.379 cv
234.235 237.174 234.551 237.937 235.114 238.5 cv
235.676 239.063 236.439 239.379 237.235 239.379 cv
cp
@
grestore
gsave
270.869 222.774 mo
277.369 222.774 li
277.369 216.274 li
270.869 216.274 li
cp
clp
.5 lw
[] 0 dsh
274.119 222.524 mo
274.915 222.524 275.678 222.208 276.241 221.645 cv
276.803 221.082 277.119 220.319 277.119 219.524 cv
277.119 218.728 276.803 217.965 276.241 217.402 cv
275.678 216.84 274.915 216.524 274.119 216.524 cv
273.324 216.524 272.561 216.84 271.998 217.402 cv
271.436 217.965 271.119 218.728 271.119 219.524 cv
271.119 220.319 271.436 221.082 271.998 221.645 cv
272.561 222.208 273.324 222.524 274.119 222.524 cv
cp
@
grestore
gsave
307.754 196.482 mo
314.254 196.482 li
314.254 189.982 li
307.754 189.982 li
cp
clp
.5 lw
[] 0 dsh
311.004 196.232 mo
311.8 196.232 312.563 195.916 313.125 195.353 cv
313.688 194.791 314.004 194.028 314.004 193.232 cv
314.004 192.436 313.688 191.673 313.125 191.111 cv
312.563 190.548 311.8 190.232 311.004 190.232 cv
310.208 190.232 309.445 190.548 308.883 191.111 cv
308.32 191.673 308.004 192.436 308.004 193.232 cv
308.004 194.028 308.32 194.791 308.883 195.353 cv
309.445 195.916 310.208 196.232 311.004 196.232 cv
cp
@
grestore
gsave
344.639 193.858 mo
351.139 193.858 li
351.139 187.358 li
344.639 187.358 li
cp
clp
.5 lw
[] 0 dsh
347.889 193.608 mo
348.684 193.608 349.447 193.292 350.01 192.729 cv
350.572 192.167 350.889 191.403 350.889 190.608 cv
350.889 189.812 350.572 189.049 350.01 188.486 cv
349.447 187.924 348.684 187.608 347.889 187.608 cv
347.093 187.608 346.33 187.924 345.767 188.486 cv
345.205 189.049 344.889 189.812 344.889 190.608 cv
344.889 191.403 345.205 192.167 345.767 192.729 cv
346.33 193.292 347.093 193.608 347.889 193.608 cv
cp
@
grestore
gsave
381.523 172.007 mo
388.023 172.007 li
388.023 165.507 li
381.523 165.507 li
cp
clp
.5 lw
[] 0 dsh
384.773 171.757 mo
385.569 171.757 386.332 171.441 386.894 170.878 cv
387.457 170.316 387.773 169.553 387.773 168.757 cv
387.773 167.961 387.457 167.198 386.894 166.636 cv
386.332 166.073 385.569 165.757 384.773 165.757 cv
383.978 165.757 383.214 166.073 382.652 166.636 cv
382.089 167.198 381.773 167.961 381.773 168.757 cv
381.773 169.553 382.089 170.316 382.652 170.878 cv
383.214 171.441 383.978 171.757 384.773 171.757 cv
cp
@
grestore
gsave
418.408 136.783 mo
424.908 136.783 li
424.908 130.283 li
418.408 130.283 li
cp
clp
.5 lw
[] 0 dsh
421.658 136.533 mo
422.453 136.533 423.216 136.217 423.779 135.654 cv
424.342 135.092 424.658 134.329 424.658 133.533 cv
424.658 132.737 424.342 131.974 423.779 131.412 cv
423.216 130.849 422.453 130.533 421.658 130.533 cv
420.862 130.533 420.099 130.849 419.536 131.412 cv
418.974 131.974 418.658 132.737 418.658 133.533 cv
418.658 134.329 418.974 135.092 419.536 135.654 cv
420.099 136.217 420.862 136.533 421.658 136.533 cv
cp
@
grestore
gsave
455.292 127.296 mo
461.792 127.296 li
461.792 120.796 li
455.292 120.796 li
cp
clp
.5 lw
[] 0 dsh
458.542 127.046 mo
459.338 127.046 460.101 126.73 460.664 126.167 cv
461.226 125.605 461.542 124.841 461.542 124.046 cv
461.542 123.25 461.226 122.487 460.664 121.924 cv
460.101 121.362 459.338 121.046 458.542 121.046 cv
457.747 121.046 456.984 121.362 456.421 121.924 cv
455.858 122.487 455.542 123.25 455.542 124.046 cv
455.542 124.841 455.858 125.605 456.421 126.167 cv
456.984 126.73 457.747 127.046 458.542 127.046 cv
cp
@
grestore
gsave
492.177 92.8794 mo
498.677 92.8794 li
498.677 86.3794 li
492.177 86.3794 li
cp
clp
.5 lw
[] 0 dsh
495.427 92.6294 mo
496.223 92.6294 496.986 92.3133 497.548 91.7507 cv
498.111 91.1881 498.427 90.425 498.427 89.6294 cv
498.427 88.8338 498.111 88.0706 497.548 87.508 cv
496.986 86.9455 496.223 86.6294 495.427 86.6294 cv
494.631 86.6294 493.868 86.9455 493.306 87.508 cv
492.743 88.0706 492.427 88.8338 492.427 89.6294 cv
492.427 90.425 492.743 91.1881 493.306 91.7507 cv
493.868 92.3133 494.631 92.6294 495.427 92.6294 cv
cp
@
grestore
gsave
529.061 54.5772 mo
535.561 54.5772 li
535.561 48.0772 li
529.061 48.0772 li
cp
clp
.5 lw
[] 0 dsh
532.311 54.3272 mo
533.107 54.3272 533.87 54.0111 534.433 53.4485 cv
534.995 52.8859 535.311 52.1228 535.311 51.3272 cv
535.311 50.5316 534.995 49.7684 534.433 49.2059 cv
533.87 48.6433 533.107 48.3272 532.311 48.3272 cv
531.516 48.3272 530.753 48.6433 530.19 49.2059 cv
529.628 49.7684 529.311 50.5316 529.311 51.3272 cv
529.311 52.1228 529.628 52.8859 530.19 53.4485 cv
530.753 54.0111 531.516 54.3272 532.311 54.3272 cv
cp
@
grestore
grestore
52.812 256.968 mo
52.812 252.968 li
f
52.812 256.968 mo
52.812 252.968 li
@
52.812 29.88 mo
52.812 33.88 li
f
52.812 29.88 mo
52.812 33.88 li
@
53.628 265.941 mo
53.064 265.941 52.62 266.097 52.296 266.397 cv
51.972 266.697 51.816 267.105 51.816 267.633 cv
51.816 268.161 51.972 268.581 52.296 268.881 cv
52.62 269.181 53.064 269.325 53.628 269.325 cv
54.18 269.325 54.624 269.181 54.948 268.869 cv
55.272 268.569 55.44 268.161 55.44 267.633 cv
55.44 267.105 55.272 266.697 54.96 266.397 cv
54.636 266.097 54.192 265.941 53.628 265.941 cv
52.44 265.437 mo
51.936 265.317 51.54 265.077 51.252 264.729 cv
50.964 264.381 50.832 263.961 50.832 263.457 cv
50.832 262.761 51.072 262.209 51.576 261.801 cv
52.068 261.393 52.752 261.189 53.628 261.189 cv
54.492 261.189 55.176 261.393 55.68 261.801 cv
56.172 262.209 56.424 262.761 56.424 263.457 cv
56.424 263.961 56.28 264.381 55.992 264.729 cv
55.704 265.077 55.32 265.317 54.816 265.437 cv
55.38 265.569 55.824 265.833 56.148 266.217 cv
56.46 266.601 56.628 267.081 56.628 267.633 cv
56.628 268.485 56.364 269.133 55.848 269.577 cv
55.32 270.033 54.588 270.249 53.628 270.249 cv
52.656 270.249 51.912 270.033 51.396 269.577 cv
50.88 269.133 50.628 268.485 50.628 267.633 cv
50.628 267.081 50.784 266.601 51.108 266.217 cv
51.42 265.833 51.864 265.569 52.44 265.437 cv
52.008 263.565 mo
52.008 264.021 52.14 264.381 52.428 264.633 cv
52.716 264.885 53.112 265.005 53.628 265.005 cv
54.132 265.005 54.528 264.885 54.816 264.633 cv
55.104 264.381 55.248 264.021 55.248 263.565 cv
55.248 263.109 55.104 262.761 54.816 262.509 cv
54.528 262.257 54.132 262.125 53.628 262.125 cv
53.112 262.125 52.716 262.257 52.428 262.509 cv
52.14 262.761 52.008 263.109 52.008 263.565 cv
f
89.6966 256.968 mo
89.6966 252.968 li
f
89.6966 256.968 mo
89.6966 252.968 li
@
89.6966 29.88 mo
89.6966 33.88 li
f
89.6966 29.88 mo
89.6966 33.88 li
@
87.9931 269.913 mo
87.9931 268.833 li
88.2811 268.977 88.5811 269.085 88.8931 269.157 cv
89.1931 269.229 89.4931 269.265 89.7931 269.265 cv
90.5611 269.265 91.1611 269.013 91.5691 268.485 cv
91.9771 267.957 92.2171 267.165 92.2891 266.085 cv
92.0491 266.421 91.7611 266.685 91.4251 266.865 cv
91.0771 267.045 90.6931 267.129 90.2731 267.129 cv
89.3851 267.129 88.6891 266.865 88.1851 266.337 cv
87.6811 265.809 87.4291 265.089 87.4291 264.165 cv
87.4291 263.277 87.6931 262.557 88.2211 262.005 cv
88.7491 261.465 89.4571 261.189 90.3451 261.189 cv
91.3531 261.189 92.1331 261.585 92.6611 262.353 cv
93.1891 263.133 93.4651 264.261 93.4651 265.725 cv
93.4651 267.117 93.1291 268.209 92.4811 269.025 cv
91.8211 269.841 90.9451 270.249 89.8411 270.249 cv
89.5411 270.249 89.2411 270.213 88.9411 270.165 cv
88.6291 270.117 88.3171 270.033 87.9931 269.913 cv
90.3451 266.205 mo
90.8731 266.205 91.2931 266.025 91.6051 265.665 cv
91.9171 265.305 92.0731 264.801 92.0731 264.165 cv
92.0731 263.541 91.9171 263.037 91.6051 262.677 cv
91.2931 262.317 90.8731 262.125 90.3451 262.125 cv
89.8171 262.125 89.3971 262.317 89.0851 262.677 cv
88.7731 263.037 88.6171 263.541 88.6171 264.165 cv
88.6171 264.801 88.7731 265.305 89.0851 265.665 cv
89.3971 266.025 89.8171 266.205 90.3451 266.205 cv
f
126.581 256.968 mo
126.581 252.968 li
f
126.581 256.968 mo
126.581 252.968 li
@
126.581 29.88 mo
126.581 33.88 li
f
126.581 29.88 mo
126.581 33.88 li
@
121.483 269.097 mo
123.415 269.097 li
123.415 262.425 li
121.315 262.845 li
121.315 261.765 li
123.403 261.345 li
124.591 261.345 li
124.591 269.097 li
126.523 269.097 li
126.523 270.093 li
121.483 270.093 li
121.483 269.097 li
f
131.443 262.125 mo
130.831 262.125 130.375 262.425 130.063 263.025 cv
129.751 263.625 129.607 264.525 129.607 265.725 cv
129.607 266.925 129.751 267.825 130.063 268.425 cv
130.375 269.025 130.831 269.325 131.443 269.325 cv
132.055 269.325 132.511 269.025 132.823 268.425 cv
133.123 267.825 133.279 266.925 133.279 265.725 cv
133.279 264.525 133.123 263.625 132.823 263.025 cv
132.511 262.425 132.055 262.125 131.443 262.125 cv
131.443 261.189 mo
132.415 261.189 133.159 261.585 133.687 262.353 cv
134.203 263.133 134.467 264.261 134.467 265.725 cv
134.467 267.201 134.203 268.329 133.687 269.097 cv
133.159 269.865 132.415 270.249 131.443 270.249 cv
130.459 270.249 129.703 269.865 129.187 269.097 cv
128.671 268.329 128.419 267.201 128.419 265.725 cv
128.419 264.261 128.671 263.133 129.187 262.353 cv
129.703 261.585 130.459 261.189 131.443 261.189 cv
f
163.466 256.968 mo
163.466 252.968 li
f
163.466 256.968 mo
163.466 252.968 li
@
163.466 29.88 mo
163.466 33.88 li
f
163.466 29.88 mo
163.466 33.88 li
@
158.571 269.097 mo
160.503 269.097 li
160.503 262.425 li
158.403 262.845 li
158.403 261.765 li
160.491 261.345 li
161.679 261.345 li
161.679 269.097 li
163.611 269.097 li
163.611 270.093 li
158.571 270.093 li
158.571 269.097 li
f
167.019 269.097 mo
171.147 269.097 li
171.147 270.093 li
165.591 270.093 li
165.591 269.097 li
166.035 268.641 166.647 268.017 167.427 267.225 cv
168.195 266.445 168.687 265.941 168.891 265.713 cv
169.275 265.293 169.539 264.933 169.683 264.633 cv
169.827 264.345 169.911 264.045 169.911 263.757 cv
169.911 263.301 169.743 262.917 169.419 262.629 cv
169.095 262.341 168.675 262.185 168.147 262.185 cv
167.775 262.185 167.379 262.257 166.971 262.377 cv
166.563 262.509 166.119 262.701 165.651 262.965 cv
165.651 261.765 li
166.131 261.573 166.575 261.429 166.983 261.333 cv
167.391 261.237 167.775 261.189 168.123 261.189 cv
169.023 261.189 169.743 261.417 170.283 261.873 cv
170.823 262.329 171.099 262.929 171.099 263.685 cv
171.099 264.045 171.027 264.393 170.895 264.705 cv
170.763 265.029 170.523 265.413 170.163 265.845 cv
170.067 265.965 169.755 266.289 169.227 266.829 cv
168.699 267.369 167.967 268.125 167.019 269.097 cv
f
200.35 256.968 mo
200.35 252.968 li
f
200.35 256.968 mo
200.35 252.968 li
@
200.35 29.88 mo
200.35 33.88 li
f
200.35 29.88 mo
200.35 33.88 li
@
195.237 269.097 mo
197.169 269.097 li
197.169 262.425 li
195.069 262.845 li
195.069 261.765 li
197.157 261.345 li
198.345 261.345 li
198.345 269.097 li
200.277 269.097 li
200.277 270.093 li
195.237 270.093 li
195.237 269.097 li
f
205.341 265.245 mo
204.813 265.245 204.393 265.437 204.081 265.797 cv
203.769 266.157 203.613 266.661 203.613 267.285 cv
203.613 267.921 203.769 268.425 204.081 268.785 cv
204.393 269.145 204.813 269.325 205.341 269.325 cv
205.869 269.325 206.289 269.145 206.601 268.785 cv
206.913 268.425 207.069 267.921 207.069 267.285 cv
207.069 266.661 206.913 266.157 206.601 265.797 cv
206.289 265.437 205.869 265.245 205.341 265.245 cv
207.693 261.537 mo
207.693 262.617 li
207.393 262.473 207.093 262.365 206.793 262.293 cv
206.481 262.221 206.181 262.185 205.893 262.185 cv
205.101 262.185 204.501 262.449 204.093 262.977 cv
203.685 263.505 203.445 264.309 203.397 265.365 cv
203.625 265.029 203.913 264.765 204.261 264.585 cv
204.609 264.405 204.993 264.309 205.413 264.309 cv
206.289 264.309 206.985 264.585 207.489 265.113 cv
207.993 265.641 208.257 266.373 208.257 267.285 cv
208.257 268.185 207.981 268.905 207.453 269.445 cv
206.925 269.985 206.217 270.249 205.341 270.249 cv
204.333 270.249 203.553 269.865 203.025 269.097 cv
202.485 268.329 202.221 267.201 202.221 265.725 cv
202.221 264.345 202.545 263.241 203.205 262.425 cv
203.853 261.609 204.741 261.189 205.845 261.189 cv
206.133 261.189 206.433 261.225 206.745 261.273 cv
207.045 261.333 207.357 261.417 207.693 261.537 cv
f
237.235 256.968 mo
237.235 252.968 li
f
237.235 256.968 mo
237.235 252.968 li
@
237.235 29.88 mo
237.235 33.88 li
f
237.235 29.88 mo
237.235 33.88 li
@
232.734 269.097 mo
236.862 269.097 li
236.862 270.093 li
231.306 270.093 li
231.306 269.097 li
231.75 268.641 232.362 268.017 233.142 267.225 cv
233.91 266.445 234.402 265.941 234.606 265.713 cv
234.99 265.293 235.254 264.933 235.398 264.633 cv
235.542 264.345 235.626 264.045 235.626 263.757 cv
235.626 263.301 235.458 262.917 235.134 262.629 cv
234.81 262.341 234.39 262.185 233.862 262.185 cv
233.49 262.185 233.094 262.257 232.686 262.377 cv
232.278 262.509 231.834 262.701 231.366 262.965 cv
231.366 261.765 li
231.846 261.573 232.29 261.429 232.698 261.333 cv
233.106 261.237 233.49 261.189 233.838 261.189 cv
234.738 261.189 235.458 261.417 235.998 261.873 cv
236.538 262.329 236.814 262.929 236.814 263.685 cv
236.814 264.045 236.742 264.393 236.61 264.705 cv
236.478 265.029 236.238 265.413 235.878 265.845 cv
235.782 265.965 235.47 266.289 234.942 266.829 cv
234.414 267.369 233.682 268.125 232.734 269.097 cv
f
241.878 262.125 mo
241.266 262.125 240.81 262.425 240.498 263.025 cv
240.186 263.625 240.042 264.525 240.042 265.725 cv
240.042 266.925 240.186 267.825 240.498 268.425 cv
240.81 269.025 241.266 269.325 241.878 269.325 cv
242.49 269.325 242.946 269.025 243.258 268.425 cv
243.558 267.825 243.714 266.925 243.714 265.725 cv
243.714 264.525 243.558 263.625 243.258 263.025 cv
242.946 262.425 242.49 262.125 241.878 262.125 cv
241.878 261.189 mo
242.85 261.189 243.594 261.585 244.122 262.353 cv
244.638 263.133 244.902 264.261 244.902 265.725 cv
244.902 267.201 244.638 268.329 244.122 269.097 cv
243.594 269.865 242.85 270.249 241.878 270.249 cv
240.894 270.249 240.138 269.865 239.622 269.097 cv
239.106 268.329 238.854 267.201 238.854 265.725 cv
238.854 264.261 239.106 263.133 239.622 262.353 cv
240.138 261.585 240.894 261.189 241.878 261.189 cv
f
274.119 256.968 mo
274.119 252.968 li
f
274.119 256.968 mo
274.119 252.968 li
@
274.119 29.88 mo
274.119 33.88 li
f
274.119 29.88 mo
274.119 33.88 li
@
272.21 265.377 mo
272.774 265.497 273.218 265.749 273.53 266.133 cv
273.842 266.517 274.01 266.997 274.01 267.549 cv
274.01 268.413 273.71 269.085 273.122 269.553 cv
272.522 270.021 271.682 270.249 270.59 270.249 cv
270.218 270.249 269.834 270.213 269.45 270.141 cv
269.066 270.081 268.658 269.973 268.25 269.829 cv
268.25 268.689 li
268.574 268.881 268.934 269.025 269.33 269.121 cv
269.714 269.217 270.122 269.265 270.554 269.265 cv
271.298 269.265 271.862 269.121 272.246 268.833 cv
272.63 268.545 272.834 268.113 272.834 267.549 cv
272.834 267.045 272.654 266.637 272.294 266.349 cv
271.934 266.061 271.43 265.905 270.782 265.905 cv
269.762 265.905 li
269.762 264.933 li
270.83 264.933 li
271.406 264.933 271.85 264.825 272.162 264.585 cv
272.474 264.357 272.63 264.021 272.63 263.577 cv
272.63 263.133 272.462 262.785 272.15 262.545 cv
271.826 262.305 271.37 262.185 270.782 262.185 cv
270.458 262.185 270.11 262.221 269.738 262.293 cv
269.366 262.365 268.958 262.473 268.514 262.617 cv
268.514 261.561 li
268.958 261.441 269.378 261.345 269.774 261.285 cv
270.158 261.225 270.53 261.189 270.89 261.189 cv
271.778 261.189 272.486 261.393 273.014 261.801 cv
273.542 262.209 273.806 262.761 273.806 263.457 cv
273.806 263.937 273.662 264.345 273.386 264.681 cv
273.11 265.017 272.714 265.257 272.21 265.377 cv
f
278.786 262.125 mo
278.174 262.125 277.718 262.425 277.406 263.025 cv
277.094 263.625 276.95 264.525 276.95 265.725 cv
276.95 266.925 277.094 267.825 277.406 268.425 cv
277.718 269.025 278.174 269.325 278.786 269.325 cv
279.398 269.325 279.854 269.025 280.166 268.425 cv
280.466 267.825 280.622 266.925 280.622 265.725 cv
280.622 264.525 280.466 263.625 280.166 263.025 cv
279.854 262.425 279.398 262.125 278.786 262.125 cv
278.786 261.189 mo
279.758 261.189 280.502 261.585 281.03 262.353 cv
281.546 263.133 281.81 264.261 281.81 265.725 cv
281.81 267.201 281.546 268.329 281.03 269.097 cv
280.502 269.865 279.758 270.249 278.786 270.249 cv
277.802 270.249 277.046 269.865 276.53 269.097 cv
276.014 268.329 275.762 267.201 275.762 265.725 cv
275.762 264.261 276.014 263.133 276.53 262.353 cv
277.046 261.585 277.802 261.189 278.786 261.189 cv
f
311.004 256.968 mo
311.004 252.968 li
f
311.004 256.968 mo
311.004 252.968 li
@
311.004 29.88 mo
311.004 33.88 li
f
311.004 29.88 mo
311.004 33.88 li
@
308.595 262.377 mo
305.607 267.045 li
308.595 267.045 li
308.595 262.377 li
308.283 261.345 mo
309.771 261.345 li
309.771 267.045 li
311.019 267.045 li
311.019 268.029 li
309.771 268.029 li
309.771 270.093 li
308.595 270.093 li
308.595 268.029 li
304.647 268.029 li
304.647 266.889 li
308.283 261.345 li
f
315.507 262.125 mo
314.895 262.125 314.439 262.425 314.127 263.025 cv
313.815 263.625 313.671 264.525 313.671 265.725 cv
313.671 266.925 313.815 267.825 314.127 268.425 cv
314.439 269.025 314.895 269.325 315.507 269.325 cv
316.119 269.325 316.575 269.025 316.887 268.425 cv
317.187 267.825 317.343 266.925 317.343 265.725 cv
317.343 264.525 317.187 263.625 316.887 263.025 cv
316.575 262.425 316.119 262.125 315.507 262.125 cv
315.507 261.189 mo
316.479 261.189 317.223 261.585 317.751 262.353 cv
318.267 263.133 318.531 264.261 318.531 265.725 cv
318.531 267.201 318.267 268.329 317.751 269.097 cv
317.223 269.865 316.479 270.249 315.507 270.249 cv
314.523 270.249 313.767 269.865 313.251 269.097 cv
312.735 268.329 312.483 267.201 312.483 265.725 cv
312.483 264.261 312.735 263.133 313.251 262.353 cv
313.767 261.585 314.523 261.189 315.507 261.189 cv
f
347.889 256.968 mo
347.889 252.968 li
f
347.889 256.968 mo
347.889 252.968 li
@
347.889 29.88 mo
347.889 33.88 li
f
347.889 29.88 mo
347.889 33.88 li
@
342.403 261.345 mo
347.047 261.345 li
347.047 262.341 li
343.483 262.341 li
343.483 264.489 li
343.651 264.429 343.831 264.381 343.999 264.357 cv
344.167 264.333 344.347 264.309 344.515 264.309 cv
345.487 264.309 346.255 264.585 346.831 265.113 cv
347.407 265.653 347.695 266.373 347.695 267.285 cv
347.695 268.233 347.395 268.965 346.807 269.481 cv
346.219 269.997 345.391 270.249 344.335 270.249 cv
343.963 270.249 343.591 270.213 343.207 270.165 cv
342.823 270.105 342.439 270.021 342.031 269.889 cv
342.031 268.701 li
342.379 268.893 342.739 269.037 343.123 269.133 cv
343.495 269.229 343.891 269.265 344.311 269.265 cv
344.983 269.265 345.523 269.097 345.919 268.737 cv
346.303 268.377 346.507 267.897 346.507 267.285 cv
346.507 266.685 346.303 266.205 345.919 265.845 cv
345.523 265.485 344.983 265.305 344.311 265.305 cv
343.999 265.305 343.675 265.341 343.363 265.413 cv
343.051 265.485 342.727 265.593 342.403 265.737 cv
342.403 261.345 li
f
352.555 262.125 mo
351.943 262.125 351.487 262.425 351.175 263.025 cv
350.863 263.625 350.719 264.525 350.719 265.725 cv
350.719 266.925 350.863 267.825 351.175 268.425 cv
351.487 269.025 351.943 269.325 352.555 269.325 cv
353.167 269.325 353.623 269.025 353.935 268.425 cv
354.235 267.825 354.391 266.925 354.391 265.725 cv
354.391 264.525 354.235 263.625 353.935 263.025 cv
353.623 262.425 353.167 262.125 352.555 262.125 cv
352.555 261.189 mo
353.527 261.189 354.271 261.585 354.799 262.353 cv
355.315 263.133 355.579 264.261 355.579 265.725 cv
355.579 267.201 355.315 268.329 354.799 269.097 cv
354.271 269.865 353.527 270.249 352.555 270.249 cv
351.571 270.249 350.815 269.865 350.299 269.097 cv
349.783 268.329 349.531 267.201 349.531 265.725 cv
349.531 264.261 349.783 263.133 350.299 262.353 cv
350.815 261.585 351.571 261.189 352.555 261.189 cv
f
384.773 256.968 mo
384.773 252.968 li
f
384.773 256.968 mo
384.773 252.968 li
@
384.773 29.88 mo
384.773 33.88 li
f
384.773 29.88 mo
384.773 33.88 li
@
381.913 265.245 mo
381.385 265.245 380.965 265.437 380.653 265.797 cv
380.341 266.157 380.185 266.661 380.185 267.285 cv
380.185 267.921 380.341 268.425 380.653 268.785 cv
380.965 269.145 381.385 269.325 381.913 269.325 cv
382.441 269.325 382.861 269.145 383.173 268.785 cv
383.485 268.425 383.641 267.921 383.641 267.285 cv
383.641 266.661 383.485 266.157 383.173 265.797 cv
382.861 265.437 382.441 265.245 381.913 265.245 cv
384.265 261.537 mo
384.265 262.617 li
383.965 262.473 383.665 262.365 383.365 262.293 cv
383.053 262.221 382.753 262.185 382.465 262.185 cv
381.673 262.185 381.073 262.449 380.665 262.977 cv
380.257 263.505 380.017 264.309 379.969 265.365 cv
380.197 265.029 380.485 264.765 380.833 264.585 cv
381.181 264.405 381.565 264.309 381.985 264.309 cv
382.861 264.309 383.557 264.585 384.061 265.113 cv
384.565 265.641 384.829 266.373 384.829 267.285 cv
384.829 268.185 384.553 268.905 384.025 269.445 cv
383.497 269.985 382.789 270.249 381.913 270.249 cv
380.905 270.249 380.125 269.865 379.597 269.097 cv
379.057 268.329 378.793 267.201 378.793 265.725 cv
378.793 264.345 379.117 263.241 379.777 262.425 cv
380.425 261.609 381.313 261.189 382.417 261.189 cv
382.705 261.189 383.005 261.225 383.317 261.273 cv
383.617 261.333 383.929 261.417 384.265 261.537 cv
f
389.401 262.125 mo
388.789 262.125 388.333 262.425 388.021 263.025 cv
387.709 263.625 387.565 264.525 387.565 265.725 cv
387.565 266.925 387.709 267.825 388.021 268.425 cv
388.333 269.025 388.789 269.325 389.401 269.325 cv
390.013 269.325 390.469 269.025 390.781 268.425 cv
391.081 267.825 391.237 266.925 391.237 265.725 cv
391.237 264.525 391.081 263.625 390.781 263.025 cv
390.469 262.425 390.013 262.125 389.401 262.125 cv
389.401 261.189 mo
390.373 261.189 391.117 261.585 391.645 262.353 cv
392.161 263.133 392.425 264.261 392.425 265.725 cv
392.425 267.201 392.161 268.329 391.645 269.097 cv
391.117 269.865 390.373 270.249 389.401 270.249 cv
388.417 270.249 387.661 269.865 387.145 269.097 cv
386.629 268.329 386.377 267.201 386.377 265.725 cv
386.377 264.261 386.629 263.133 387.145 262.353 cv
387.661 261.585 388.417 261.189 389.401 261.189 cv
f
421.658 256.968 mo
421.658 252.968 li
f
421.658 256.968 mo
421.658 252.968 li
@
421.658 29.88 mo
421.658 33.88 li
f
421.658 29.88 mo
421.658 33.88 li
@
415.892 261.345 mo
421.52 261.345 li
421.52 261.849 li
418.34 270.093 li
417.104 270.093 li
420.092 262.341 li
415.892 262.341 li
415.892 261.345 li
f
426.356 262.125 mo
425.744 262.125 425.288 262.425 424.976 263.025 cv
424.664 263.625 424.52 264.525 424.52 265.725 cv
424.52 266.925 424.664 267.825 424.976 268.425 cv
425.288 269.025 425.744 269.325 426.356 269.325 cv
426.968 269.325 427.424 269.025 427.736 268.425 cv
428.036 267.825 428.192 266.925 428.192 265.725 cv
428.192 264.525 428.036 263.625 427.736 263.025 cv
427.424 262.425 426.968 262.125 426.356 262.125 cv
426.356 261.189 mo
427.328 261.189 428.072 261.585 428.6 262.353 cv
429.116 263.133 429.38 264.261 429.38 265.725 cv
429.38 267.201 429.116 268.329 428.6 269.097 cv
428.072 269.865 427.328 270.249 426.356 270.249 cv
425.372 270.249 424.616 269.865 424.1 269.097 cv
423.584 268.329 423.332 267.201 423.332 265.725 cv
423.332 264.261 423.584 263.133 424.1 262.353 cv
424.616 261.585 425.372 261.189 426.356 261.189 cv
f
458.542 256.968 mo
458.542 252.968 li
f
458.542 256.968 mo
458.542 252.968 li
@
458.542 29.88 mo
458.542 33.88 li
f
458.542 29.88 mo
458.542 33.88 li
@
455.522 265.941 mo
454.958 265.941 454.514 266.097 454.19 266.397 cv
453.866 266.697 453.71 267.105 453.71 267.633 cv
453.71 268.161 453.866 268.581 454.19 268.881 cv
454.514 269.181 454.958 269.325 455.522 269.325 cv
456.074 269.325 456.518 269.181 456.842 268.869 cv
457.166 268.569 457.334 268.161 457.334 267.633 cv
457.334 267.105 457.166 266.697 456.854 266.397 cv
456.53 266.097 456.086 265.941 455.522 265.941 cv
454.334 265.437 mo
453.83 265.317 453.434 265.077 453.146 264.729 cv
452.858 264.381 452.726 263.961 452.726 263.457 cv
452.726 262.761 452.966 262.209 453.47 261.801 cv
453.962 261.393 454.646 261.189 455.522 261.189 cv
456.386 261.189 457.07 261.393 457.574 261.801 cv
458.066 262.209 458.318 262.761 458.318 263.457 cv
458.318 263.961 458.174 264.381 457.886 264.729 cv
457.598 265.077 457.214 265.317 456.71 265.437 cv
457.274 265.569 457.718 265.833 458.042 266.217 cv
458.354 266.601 458.522 267.081 458.522 267.633 cv
458.522 268.485 458.258 269.133 457.742 269.577 cv
457.214 270.033 456.482 270.249 455.522 270.249 cv
454.55 270.249 453.806 270.033 453.29 269.577 cv
452.774 269.133 452.522 268.485 452.522 267.633 cv
452.522 267.081 452.678 266.601 453.002 266.217 cv
453.314 265.833 453.758 265.569 454.334 265.437 cv
453.902 263.565 mo
453.902 264.021 454.034 264.381 454.322 264.633 cv
454.61 264.885 455.006 265.005 455.522 265.005 cv
456.026 265.005 456.422 264.885 456.71 264.633 cv
456.998 264.381 457.142 264.021 457.142 263.565 cv
457.142 263.109 456.998 262.761 456.71 262.509 cv
456.422 262.257 456.026 262.125 455.522 262.125 cv
455.006 262.125 454.61 262.257 454.322 262.509 cv
454.034 262.761 453.902 263.109 453.902 263.565 cv
f
463.154 262.125 mo
462.542 262.125 462.086 262.425 461.774 263.025 cv
461.462 263.625 461.318 264.525 461.318 265.725 cv
461.318 266.925 461.462 267.825 461.774 268.425 cv
462.086 269.025 462.542 269.325 463.154 269.325 cv
463.766 269.325 464.222 269.025 464.534 268.425 cv
464.834 267.825 464.99 266.925 464.99 265.725 cv
464.99 264.525 464.834 263.625 464.534 263.025 cv
464.222 262.425 463.766 262.125 463.154 262.125 cv
463.154 261.189 mo
464.126 261.189 464.87 261.585 465.398 262.353 cv
465.914 263.133 466.178 264.261 466.178 265.725 cv
466.178 267.201 465.914 268.329 465.398 269.097 cv
464.87 269.865 464.126 270.249 463.154 270.249 cv
462.17 270.249 461.414 269.865 460.898 269.097 cv
460.382 268.329 460.13 267.201 460.13 265.725 cv
460.13 264.261 460.382 263.133 460.898 262.353 cv
461.414 261.585 462.17 261.189 463.154 261.189 cv
f
495.427 256.968 mo
495.427 252.968 li
f
495.427 256.968 mo
495.427 252.968 li
@
495.427 29.88 mo
495.427 33.88 li
f
495.427 29.88 mo
495.427 33.88 li
@
489.88 269.913 mo
489.88 268.833 li
490.168 268.977 490.468 269.085 490.78 269.157 cv
491.08 269.229 491.38 269.265 491.68 269.265 cv
492.448 269.265 493.048 269.013 493.456 268.485 cv
493.864 267.957 494.104 267.165 494.176 266.085 cv
493.936 266.421 493.648 266.685 493.312 266.865 cv
492.964 267.045 492.58 267.129 492.16 267.129 cv
491.272 267.129 490.576 266.865 490.072 266.337 cv
489.568 265.809 489.316 265.089 489.316 264.165 cv
489.316 263.277 489.58 262.557 490.108 262.005 cv
490.636 261.465 491.344 261.189 492.232 261.189 cv
493.24 261.189 494.02 261.585 494.548 262.353 cv
495.076 263.133 495.352 264.261 495.352 265.725 cv
495.352 267.117 495.016 268.209 494.368 269.025 cv
493.708 269.841 492.832 270.249 491.728 270.249 cv
491.428 270.249 491.128 270.213 490.828 270.165 cv
490.516 270.117 490.204 270.033 489.88 269.913 cv
492.232 266.205 mo
492.76 266.205 493.18 266.025 493.492 265.665 cv
493.804 265.305 493.96 264.801 493.96 264.165 cv
493.96 263.541 493.804 263.037 493.492 262.677 cv
493.18 262.317 492.76 262.125 492.232 262.125 cv
491.704 262.125 491.284 262.317 490.972 262.677 cv
490.66 263.037 490.504 263.541 490.504 264.165 cv
490.504 264.801 490.66 265.305 490.972 265.665 cv
491.284 266.025 491.704 266.205 492.232 266.205 cv
f
500.008 262.125 mo
499.396 262.125 498.94 262.425 498.628 263.025 cv
498.316 263.625 498.172 264.525 498.172 265.725 cv
498.172 266.925 498.316 267.825 498.628 268.425 cv
498.94 269.025 499.396 269.325 500.008 269.325 cv
500.62 269.325 501.076 269.025 501.388 268.425 cv
501.688 267.825 501.844 266.925 501.844 265.725 cv
501.844 264.525 501.688 263.625 501.388 263.025 cv
501.076 262.425 500.62 262.125 500.008 262.125 cv
500.008 261.189 mo
500.98 261.189 501.724 261.585 502.252 262.353 cv
502.768 263.133 503.032 264.261 503.032 265.725 cv
503.032 267.201 502.768 268.329 502.252 269.097 cv
501.724 269.865 500.98 270.249 500.008 270.249 cv
499.024 270.249 498.268 269.865 497.752 269.097 cv
497.236 268.329 496.984 267.201 496.984 265.725 cv
496.984 264.261 497.236 263.133 497.752 262.353 cv
498.268 261.585 499.024 261.189 500.008 261.189 cv
f
532.311 256.968 mo
532.311 252.968 li
f
532.311 256.968 mo
532.311 252.968 li
@
532.311 29.88 mo
532.311 33.88 li
f
532.311 29.88 mo
532.311 33.88 li
@
523.393 269.097 mo
525.325 269.097 li
525.325 262.425 li
523.225 262.845 li
523.225 261.765 li
525.313 261.345 li
526.501 261.345 li
526.501 269.097 li
528.433 269.097 li
528.433 270.093 li
523.393 270.093 li
523.393 269.097 li
f
533.353 262.125 mo
532.741 262.125 532.285 262.425 531.973 263.025 cv
531.661 263.625 531.517 264.525 531.517 265.725 cv
531.517 266.925 531.661 267.825 531.973 268.425 cv
532.285 269.025 532.741 269.325 533.353 269.325 cv
533.965 269.325 534.421 269.025 534.733 268.425 cv
535.033 267.825 535.189 266.925 535.189 265.725 cv
535.189 264.525 535.033 263.625 534.733 263.025 cv
534.421 262.425 533.965 262.125 533.353 262.125 cv
533.353 261.189 mo
534.325 261.189 535.069 261.585 535.597 262.353 cv
536.113 263.133 536.377 264.261 536.377 265.725 cv
536.377 267.201 536.113 268.329 535.597 269.097 cv
535.069 269.865 534.325 270.249 533.353 270.249 cv
532.369 270.249 531.613 269.865 531.097 269.097 cv
530.581 268.329 530.329 267.201 530.329 265.725 cv
530.329 264.261 530.581 263.133 531.097 262.353 cv
531.613 261.585 532.369 261.189 533.353 261.189 cv
f
540.985 262.125 mo
540.373 262.125 539.917 262.425 539.605 263.025 cv
539.293 263.625 539.149 264.525 539.149 265.725 cv
539.149 266.925 539.293 267.825 539.605 268.425 cv
539.917 269.025 540.373 269.325 540.985 269.325 cv
541.597 269.325 542.053 269.025 542.365 268.425 cv
542.665 267.825 542.821 266.925 542.821 265.725 cv
542.821 264.525 542.665 263.625 542.365 263.025 cv
542.053 262.425 541.597 262.125 540.985 262.125 cv
540.985 261.189 mo
541.957 261.189 542.701 261.585 543.229 262.353 cv
543.745 263.133 544.009 264.261 544.009 265.725 cv
544.009 267.201 543.745 268.329 543.229 269.097 cv
542.701 269.865 541.957 270.249 540.985 270.249 cv
540.001 270.249 539.245 269.865 538.729 269.097 cv
538.213 268.329 537.961 267.201 537.961 265.725 cv
537.961 264.261 538.213 263.133 538.729 262.353 cv
539.245 261.585 540.001 261.189 540.985 261.189 cv
f
52.812 256.968 mo
56.812 256.968 li
f
52.812 256.968 mo
56.812 256.968 li
@
569.196 256.968 mo
565.196 256.968 li
f
569.196 256.968 mo
565.196 256.968 li
@
46.5811 252.312 mo
45.9691 252.312 45.5131 252.612 45.2011 253.212 cv
44.8891 253.812 44.7451 254.712 44.7451 255.912 cv
44.7451 257.112 44.8891 258.012 45.2011 258.612 cv
45.5131 259.212 45.9691 259.512 46.5811 259.512 cv
47.1931 259.512 47.6491 259.212 47.9611 258.612 cv
48.2611 258.012 48.4171 257.112 48.4171 255.912 cv
48.4171 254.712 48.2611 253.812 47.9611 253.212 cv
47.6491 252.612 47.1931 252.312 46.5811 252.312 cv
46.5811 251.376 mo
47.5531 251.376 48.2971 251.772 48.8251 252.54 cv
49.3411 253.32 49.6051 254.448 49.6051 255.912 cv
49.6051 257.388 49.3411 258.516 48.8251 259.284 cv
48.2971 260.052 47.5531 260.436 46.5811 260.436 cv
45.5971 260.436 44.8411 260.052 44.3251 259.284 cv
43.8091 258.516 43.5571 257.388 43.5571 255.912 cv
43.5571 254.448 43.8091 253.32 44.3251 252.54 cv
44.8411 251.772 45.5971 251.376 46.5811 251.376 cv
f
52.812 231.736 mo
56.812 231.736 li
f
52.812 231.736 mo
56.812 231.736 li
@
569.196 231.736 mo
565.196 231.736 li
f
569.196 231.736 mo
565.196 231.736 li
@
29.4875 234.052 mo
31.4195 234.052 li
31.4195 227.38 li
29.3195 227.8 li
29.3195 226.72 li
31.4075 226.3 li
32.5955 226.3 li
32.5955 234.052 li
34.5275 234.052 li
34.5275 235.048 li
29.4875 235.048 li
29.4875 234.052 li
f
39.4475 227.08 mo
38.8355 227.08 38.3795 227.38 38.0675 227.98 cv
37.7555 228.58 37.6115 229.48 37.6115 230.68 cv
37.6115 231.88 37.7555 232.78 38.0675 233.38 cv
38.3795 233.98 38.8355 234.28 39.4475 234.28 cv
40.0595 234.28 40.5155 233.98 40.8275 233.38 cv
41.1275 232.78 41.2835 231.88 41.2835 230.68 cv
41.2835 229.48 41.1275 228.58 40.8275 227.98 cv
40.5155 227.38 40.0595 227.08 39.4475 227.08 cv
39.4475 226.144 mo
40.4195 226.144 41.1635 226.54 41.6915 227.308 cv
42.2075 228.088 42.4715 229.216 42.4715 230.68 cv
42.4715 232.156 42.2075 233.284 41.6915 234.052 cv
41.1635 234.82 40.4195 235.204 39.4475 235.204 cv
38.4635 235.204 37.7075 234.82 37.1915 234.052 cv
36.6755 233.284 36.4235 232.156 36.4235 230.68 cv
36.4235 229.216 36.6755 228.088 37.1915 227.308 cv
37.7075 226.54 38.4635 226.144 39.4475 226.144 cv
f
47.0795 227.08 mo
46.4675 227.08 46.0115 227.38 45.6995 227.98 cv
45.3875 228.58 45.2435 229.48 45.2435 230.68 cv
45.2435 231.88 45.3875 232.78 45.6995 233.38 cv
46.0115 233.98 46.4675 234.28 47.0795 234.28 cv
47.6915 234.28 48.1475 233.98 48.4595 233.38 cv
48.7595 232.78 48.9155 231.88 48.9155 230.68 cv
48.9155 229.48 48.7595 228.58 48.4595 227.98 cv
48.1475 227.38 47.6915 227.08 47.0795 227.08 cv
47.0795 226.144 mo
48.0515 226.144 48.7955 226.54 49.3235 227.308 cv
49.8395 228.088 50.1035 229.216 50.1035 230.68 cv
50.1035 232.156 49.8395 233.284 49.3235 234.052 cv
48.7955 234.82 48.0515 235.204 47.0795 235.204 cv
46.0955 235.204 45.3395 234.82 44.8235 234.052 cv
44.3075 233.284 44.0555 232.156 44.0555 230.68 cv
44.0555 229.216 44.3075 228.088 44.8235 227.308 cv
45.3395 226.54 46.0955 226.144 47.0795 226.144 cv
f
52.812 206.504 mo
56.812 206.504 li
f
52.812 206.504 mo
56.812 206.504 li
@
569.196 206.504 mo
565.196 206.504 li
f
569.196 206.504 mo
565.196 206.504 li
@
29.866 208.82 mo
33.994 208.82 li
33.994 209.816 li
28.438 209.816 li
28.438 208.82 li
28.882 208.365 29.494 207.74 30.274 206.949 cv
31.042 206.169 31.534 205.665 31.738 205.436 cv
32.122 205.016 32.386 204.656 32.53 204.356 cv
32.674 204.068 32.758 203.768 32.758 203.48 cv
32.758 203.024 32.59 202.641 32.266 202.352 cv
31.942 202.064 31.522 201.908 30.994 201.908 cv
30.622 201.908 30.226 201.98 29.818 202.1 cv
29.41 202.232 28.966 202.424 28.498 202.688 cv
28.498 201.488 li
28.978 201.296 29.422 201.152 29.83 201.057 cv
30.238 200.96 30.622 200.912 30.97 200.912 cv
31.87 200.912 32.59 201.141 33.13 201.596 cv
33.67 202.052 33.946 202.652 33.946 203.408 cv
33.946 203.768 33.874 204.117 33.742 204.428 cv
33.61 204.753 33.37 205.137 33.01 205.568 cv
32.914 205.688 32.602 206.012 32.074 206.552 cv
31.546 207.092 30.814 207.848 29.866 208.82 cv
f
39.01 201.848 mo
38.398 201.848 37.942 202.148 37.63 202.749 cv
37.318 203.348 37.174 204.249 37.174 205.449 cv
37.174 206.648 37.318 207.548 37.63 208.148 cv
37.942 208.749 38.398 209.048 39.01 209.048 cv
39.622 209.048 40.078 208.749 40.39 208.148 cv
40.69 207.548 40.846 206.648 40.846 205.449 cv
40.846 204.249 40.69 203.348 40.39 202.749 cv
40.078 202.148 39.622 201.848 39.01 201.848 cv
39.01 200.912 mo
39.982 200.912 40.726 201.309 41.254 202.076 cv
41.77 202.856 42.034 203.984 42.034 205.449 cv
42.034 206.924 41.77 208.052 41.254 208.82 cv
40.726 209.589 39.982 209.973 39.01 209.973 cv
38.026 209.973 37.27 209.589 36.754 208.82 cv
36.238 208.052 35.986 206.924 35.986 205.449 cv
35.986 203.984 36.238 202.856 36.754 202.076 cv
37.27 201.309 38.026 200.912 39.01 200.912 cv
f
46.642 201.848 mo
46.03 201.848 45.574 202.148 45.262 202.749 cv
44.95 203.348 44.806 204.249 44.806 205.449 cv
44.806 206.648 44.95 207.548 45.262 208.148 cv
45.574 208.749 46.03 209.048 46.642 209.048 cv
47.254 209.048 47.71 208.749 48.022 208.148 cv
48.322 207.548 48.478 206.648 48.478 205.449 cv
48.478 204.249 48.322 203.348 48.022 202.749 cv
47.71 202.148 47.254 201.848 46.642 201.848 cv
46.642 200.912 mo
47.614 200.912 48.358 201.309 48.886 202.076 cv
49.402 202.856 49.666 203.984 49.666 205.449 cv
49.666 206.924 49.402 208.052 48.886 208.82 cv
48.358 209.589 47.614 209.973 46.642 209.973 cv
45.658 209.973 44.902 209.589 44.386 208.82 cv
43.87 208.052 43.618 206.924 43.618 205.449 cv
43.618 203.984 43.87 202.856 44.386 202.076 cv
44.902 201.309 45.658 200.912 46.642 200.912 cv
f
52.812 181.272 mo
56.812 181.272 li
f
52.812 181.272 mo
56.812 181.272 li
@
569.196 181.272 mo
565.196 181.272 li
f
569.196 181.272 mo
565.196 181.272 li
@
32.4809 179.868 mo
33.0449 179.988 33.4889 180.24 33.8009 180.624 cv
34.1129 181.008 34.2809 181.488 34.2809 182.04 cv
34.2809 182.904 33.9809 183.576 33.3929 184.044 cv
32.7929 184.512 31.9529 184.74 30.8609 184.74 cv
30.4889 184.74 30.1049 184.704 29.7209 184.632 cv
29.3369 184.572 28.9289 184.464 28.5209 184.32 cv
28.5209 183.18 li
28.8449 183.372 29.2049 183.516 29.6009 183.612 cv
29.9849 183.708 30.3929 183.756 30.8249 183.756 cv
31.5689 183.756 32.1329 183.612 32.5169 183.324 cv
32.9009 183.036 33.1049 182.604 33.1049 182.04 cv
33.1049 181.536 32.9249 181.128 32.5649 180.84 cv
32.2049 180.552 31.7009 180.396 31.0529 180.396 cv
30.0329 180.396 li
30.0329 179.424 li
31.1009 179.424 li
31.6769 179.424 32.1209 179.316 32.4329 179.076 cv
32.7449 178.848 32.9009 178.512 32.9009 178.068 cv
32.9009 177.624 32.7329 177.276 32.4209 177.036 cv
32.0969 176.796 31.6409 176.676 31.0529 176.676 cv
30.7289 176.676 30.3809 176.712 30.0089 176.784 cv
29.6369 176.856 29.2289 176.964 28.7849 177.108 cv
28.7849 176.052 li
29.2289 175.932 29.6489 175.836 30.0449 175.776 cv
30.4289 175.716 30.8009 175.68 31.1609 175.68 cv
32.0489 175.68 32.7569 175.884 33.2849 176.292 cv
33.8129 176.7 34.0769 177.252 34.0769 177.948 cv
34.0769 178.428 33.9329 178.836 33.6569 179.172 cv
33.3809 179.508 32.9849 179.748 32.4809 179.868 cv
f
39.0569 176.616 mo
38.4449 176.616 37.9889 176.916 37.6769 177.516 cv
37.3649 178.116 37.2209 179.016 37.2209 180.216 cv
37.2209 181.416 37.3649 182.316 37.6769 182.916 cv
37.9889 183.516 38.4449 183.816 39.0569 183.816 cv
39.6689 183.816 40.1249 183.516 40.4369 182.916 cv
40.7369 182.316 40.8929 181.416 40.8929 180.216 cv
40.8929 179.016 40.7369 178.116 40.4369 177.516 cv
40.1249 176.916 39.6689 176.616 39.0569 176.616 cv
39.0569 175.68 mo
40.0289 175.68 40.7729 176.076 41.3009 176.844 cv
41.8169 177.624 42.0809 178.752 42.0809 180.216 cv
42.0809 181.692 41.8169 182.82 41.3009 183.588 cv
40.7729 184.356 40.0289 184.74 39.0569 184.74 cv
38.0729 184.74 37.3169 184.356 36.8009 183.588 cv
36.2849 182.82 36.0329 181.692 36.0329 180.216 cv
36.0329 178.752 36.2849 177.624 36.8009 176.844 cv
37.3169 176.076 38.0729 175.68 39.0569 175.68 cv
f
46.6889 176.616 mo
46.0769 176.616 45.6209 176.916 45.3089 177.516 cv
44.9969 178.116 44.8529 179.016 44.8529 180.216 cv
44.8529 181.416 44.9969 182.316 45.3089 182.916 cv
45.6209 183.516 46.0769 183.816 46.6889 183.816 cv
47.3009 183.816 47.7569 183.516 48.0689 182.916 cv
48.3689 182.316 48.5249 181.416 48.5249 180.216 cv
48.5249 179.016 48.3689 178.116 48.0689 177.516 cv
47.7569 176.916 47.3009 176.616 46.6889 176.616 cv
46.6889 175.68 mo
47.6609 175.68 48.4049 176.076 48.9329 176.844 cv
49.4489 177.624 49.7129 178.752 49.7129 180.216 cv
49.7129 181.692 49.4489 182.82 48.9329 183.588 cv
48.4049 184.356 47.6609 184.74 46.6889 184.74 cv
45.7049 184.74 44.9489 184.356 44.4329 183.588 cv
43.9169 182.82 43.6649 181.692 43.6649 180.216 cv
43.6649 178.752 43.9169 177.624 44.4329 176.844 cv
44.9489 176.076 45.7049 175.68 46.6889 175.68 cv
f
52.812 156.04 mo
56.812 156.04 li
f
52.812 156.04 mo
56.812 156.04 li
@
569.196 156.04 mo
565.196 156.04 li
f
569.196 156.04 mo
565.196 156.04 li
@
31.8167 151.636 mo
28.8288 156.304 li
31.8167 156.304 li
31.8167 151.636 li
31.5047 150.604 mo
32.9928 150.604 li
32.9928 156.304 li
34.2407 156.304 li
34.2407 157.288 li
32.9928 157.288 li
32.9928 159.352 li
31.8167 159.352 li
31.8167 157.288 li
27.8687 157.288 li
27.8687 156.148 li
31.5047 150.604 li
f
38.7288 151.384 mo
38.1168 151.384 37.6608 151.684 37.3488 152.285 cv
37.0368 152.884 36.8928 153.785 36.8928 154.984 cv
36.8928 156.184 37.0368 157.084 37.3488 157.684 cv
37.6608 158.285 38.1168 158.584 38.7288 158.584 cv
39.3408 158.584 39.7968 158.285 40.1088 157.684 cv
40.4088 157.084 40.5648 156.184 40.5648 154.984 cv
40.5648 153.785 40.4088 152.884 40.1088 152.285 cv
39.7968 151.684 39.3408 151.384 38.7288 151.384 cv
38.7288 150.448 mo
39.7008 150.448 40.4448 150.844 40.9728 151.612 cv
41.4888 152.392 41.7528 153.52 41.7528 154.984 cv
41.7528 156.46 41.4888 157.588 40.9728 158.356 cv
40.4448 159.124 39.7008 159.508 38.7288 159.508 cv
37.7448 159.508 36.9888 159.124 36.4728 158.356 cv
35.9568 157.588 35.7048 156.46 35.7048 154.984 cv
35.7048 153.52 35.9568 152.392 36.4728 151.612 cv
36.9888 150.844 37.7448 150.448 38.7288 150.448 cv
f
46.3608 151.384 mo
45.7488 151.384 45.2928 151.684 44.9808 152.285 cv
44.6688 152.884 44.5248 153.785 44.5248 154.984 cv
44.5248 156.184 44.6688 157.084 44.9808 157.684 cv
45.2928 158.285 45.7488 158.584 46.3608 158.584 cv
46.9728 158.584 47.4288 158.285 47.7408 157.684 cv
48.0408 157.084 48.1968 156.184 48.1968 154.984 cv
48.1968 153.785 48.0408 152.884 47.7408 152.285 cv
47.4288 151.684 46.9728 151.384 46.3608 151.384 cv
46.3608 150.448 mo
47.3328 150.448 48.0768 150.844 48.6048 151.612 cv
49.1208 152.392 49.3848 153.52 49.3848 154.984 cv
49.3848 156.46 49.1208 157.588 48.6048 158.356 cv
48.0768 159.124 47.3328 159.508 46.3608 159.508 cv
45.3768 159.508 44.6208 159.124 44.1048 158.356 cv
43.5888 157.588 43.3368 156.46 43.3368 154.984 cv
43.3368 153.52 43.5888 152.392 44.1048 151.612 cv
44.6208 150.844 45.3768 150.448 46.3608 150.448 cv
f
52.812 130.808 mo
56.812 130.808 li
f
52.812 130.808 mo
56.812 130.808 li
@
569.196 130.808 mo
565.196 130.808 li
f
569.196 130.808 mo
565.196 130.808 li
@
28.9049 125.372 mo
33.5489 125.372 li
33.5489 126.368 li
29.9849 126.368 li
29.9849 128.516 li
30.1529 128.456 30.3329 128.408 30.5009 128.384 cv
30.6689 128.36 30.8489 128.336 31.0169 128.336 cv
31.9889 128.336 32.7569 128.612 33.3329 129.14 cv
33.9089 129.68 34.1969 130.4 34.1969 131.312 cv
34.1969 132.26 33.8969 132.992 33.3089 133.508 cv
32.7209 134.024 31.8929 134.276 30.8369 134.276 cv
30.4649 134.276 30.0929 134.24 29.7089 134.192 cv
29.3249 134.132 28.9409 134.048 28.5329 133.916 cv
28.5329 132.728 li
28.8809 132.92 29.2409 133.064 29.6249 133.16 cv
29.9969 133.256 30.3929 133.292 30.8129 133.292 cv
31.4849 133.292 32.0249 133.124 32.4209 132.764 cv
32.8049 132.404 33.0089 131.924 33.0089 131.312 cv
33.0089 130.712 32.8049 130.232 32.4209 129.872 cv
32.0249 129.512 31.4849 129.332 30.8129 129.332 cv
30.5009 129.332 30.1769 129.368 29.8649 129.44 cv
29.5529 129.512 29.2289 129.62 28.9049 129.764 cv
28.9049 125.372 li
f
39.0569 126.152 mo
38.4449 126.152 37.9889 126.452 37.6769 127.052 cv
37.3649 127.652 37.2209 128.552 37.2209 129.752 cv
37.2209 130.952 37.3649 131.852 37.6769 132.452 cv
37.9889 133.052 38.4449 133.352 39.0569 133.352 cv
39.6689 133.352 40.1249 133.052 40.4369 132.452 cv
40.7369 131.852 40.8929 130.952 40.8929 129.752 cv
40.8929 128.552 40.7369 127.652 40.4369 127.052 cv
40.1249 126.452 39.6689 126.152 39.0569 126.152 cv
39.0569 125.216 mo
40.0289 125.216 40.7729 125.612 41.3009 126.38 cv
41.8169 127.16 42.0809 128.288 42.0809 129.752 cv
42.0809 131.228 41.8169 132.356 41.3009 133.124 cv
40.7729 133.892 40.0289 134.276 39.0569 134.276 cv
38.0729 134.276 37.3169 133.892 36.8009 133.124 cv
36.2849 132.356 36.0329 131.228 36.0329 129.752 cv
36.0329 128.288 36.2849 127.16 36.8009 126.38 cv
37.3169 125.612 38.0729 125.216 39.0569 125.216 cv
f
46.6889 126.152 mo
46.0769 126.152 45.6209 126.452 45.3089 127.052 cv
44.9969 127.652 44.8529 128.552 44.8529 129.752 cv
44.8529 130.952 44.9969 131.852 45.3089 132.452 cv
45.6209 133.052 46.0769 133.352 46.6889 133.352 cv
47.3009 133.352 47.7569 133.052 48.0689 132.452 cv
48.3689 131.852 48.5249 130.952 48.5249 129.752 cv
48.5249 128.552 48.3689 127.652 48.0689 127.052 cv
47.7569 126.452 47.3009 126.152 46.6889 126.152 cv
46.6889 125.216 mo
47.6609 125.216 48.4049 125.612 48.9329 126.38 cv
49.4489 127.16 49.7129 128.288 49.7129 129.752 cv
49.7129 131.228 49.4489 132.356 48.9329 133.124 cv
48.4049 133.892 47.6609 134.276 46.6889 134.276 cv
45.7049 134.276 44.9489 133.892 44.4329 133.124 cv
43.9169 132.356 43.6649 131.228 43.6649 129.752 cv
43.6649 128.288 43.9169 127.16 44.4329 126.38 cv
44.9489 125.612 45.7049 125.216 46.6889 125.216 cv
f
52.812 105.576 mo
56.812 105.576 li
f
52.812 105.576 mo
56.812 105.576 li
@
569.196 105.576 mo
565.196 105.576 li
f
569.196 105.576 mo
565.196 105.576 li
@
31.4907 104.04 mo
30.9627 104.04 30.5428 104.232 30.2308 104.592 cv
29.9188 104.952 29.7628 105.456 29.7628 106.08 cv
29.7628 106.716 29.9188 107.22 30.2308 107.58 cv
30.5428 107.94 30.9627 108.12 31.4907 108.12 cv
32.0187 108.12 32.4388 107.94 32.7508 107.58 cv
33.0628 107.22 33.2188 106.716 33.2188 106.08 cv
33.2188 105.456 33.0628 104.952 32.7508 104.592 cv
32.4388 104.232 32.0187 104.04 31.4907 104.04 cv
33.8428 100.332 mo
33.8428 101.412 li
33.5428 101.268 33.2428 101.16 32.9427 101.088 cv
32.6307 101.016 32.3307 100.98 32.0428 100.98 cv
31.2507 100.98 30.6508 101.244 30.2428 101.772 cv
29.8348 102.3 29.5947 103.104 29.5468 104.16 cv
29.7747 103.824 30.0627 103.56 30.4108 103.38 cv
30.7588 103.2 31.1427 103.104 31.5627 103.104 cv
32.4388 103.104 33.1348 103.38 33.6388 103.908 cv
34.1427 104.436 34.4067 105.168 34.4067 106.08 cv
34.4067 106.98 34.1307 107.7 33.6027 108.24 cv
33.0747 108.78 32.3667 109.044 31.4907 109.044 cv
30.4827 109.044 29.7028 108.66 29.1748 107.892 cv
28.6348 107.124 28.3708 105.996 28.3708 104.52 cv
28.3708 103.14 28.6947 102.036 29.3547 101.22 cv
30.0028 100.404 30.8908 99.9845 31.9948 99.9845 cv
32.2827 99.9845 32.5827 100.02 32.8947 100.068 cv
33.1948 100.128 33.5068 100.212 33.8428 100.332 cv
f
38.9788 100.92 mo
38.3668 100.92 37.9108 101.22 37.5988 101.82 cv
37.2868 102.42 37.1428 103.32 37.1428 104.52 cv
37.1428 105.72 37.2868 106.62 37.5988 107.22 cv
37.9108 107.82 38.3668 108.12 38.9788 108.12 cv
39.5908 108.12 40.0468 107.82 40.3588 107.22 cv
40.6588 106.62 40.8148 105.72 40.8148 104.52 cv
40.8148 103.32 40.6588 102.42 40.3588 101.82 cv
40.0468 101.22 39.5908 100.92 38.9788 100.92 cv
38.9788 99.9845 mo
39.9508 99.9845 40.6948 100.38 41.2228 101.148 cv
41.7388 101.928 42.0028 103.056 42.0028 104.52 cv
42.0028 105.996 41.7388 107.124 41.2228 107.892 cv
40.6948 108.66 39.9508 109.044 38.9788 109.044 cv
37.9948 109.044 37.2388 108.66 36.7228 107.892 cv
36.2068 107.124 35.9548 105.996 35.9548 104.52 cv
35.9548 103.056 36.2068 101.928 36.7228 101.148 cv
37.2388 100.38 37.9948 99.9845 38.9788 99.9845 cv
f
46.6108 100.92 mo
45.9988 100.92 45.5428 101.22 45.2308 101.82 cv
44.9188 102.42 44.7748 103.32 44.7748 104.52 cv
44.7748 105.72 44.9188 106.62 45.2308 107.22 cv
45.5428 107.82 45.9988 108.12 46.6108 108.12 cv
47.2228 108.12 47.6788 107.82 47.9908 107.22 cv
48.2908 106.62 48.4468 105.72 48.4468 104.52 cv
48.4468 103.32 48.2908 102.42 47.9908 101.82 cv
47.6788 101.22 47.2228 100.92 46.6108 100.92 cv
46.6108 99.9845 mo
47.5828 99.9845 48.3268 100.38 48.8548 101.148 cv
49.3708 101.928 49.6348 103.056 49.6348 104.52 cv
49.6348 105.996 49.3708 107.124 48.8548 107.892 cv
48.3268 108.66 47.5828 109.044 46.6108 109.044 cv
45.6268 109.044 44.8708 108.66 44.3548 107.892 cv
43.8388 107.124 43.5868 105.996 43.5868 104.52 cv
43.5868 103.056 43.8388 101.928 44.3548 101.148 cv
44.8708 100.38 45.6268 99.9845 46.6108 99.9845 cv
f
52.812 80.344 mo
56.812 80.344 li
f
52.812 80.344 mo
56.812 80.344 li
@
569.196 80.344 mo
565.196 80.344 li
f
569.196 80.344 mo
565.196 80.344 li
@
28.6554 74.9085 mo
34.2834 74.9085 li
34.2834 75.4125 li
31.1034 83.6565 li
29.8674 83.6565 li
32.8554 75.9045 li
28.6554 75.9045 li
28.6554 74.9085 li
f
39.1194 75.6885 mo
38.5074 75.6885 38.0514 75.9885 37.7394 76.5885 cv
37.4274 77.1885 37.2834 78.0885 37.2834 79.2885 cv
37.2834 80.4885 37.4274 81.3885 37.7394 81.9885 cv
38.0514 82.5885 38.5074 82.8885 39.1194 82.8885 cv
39.7314 82.8885 40.1874 82.5885 40.4994 81.9885 cv
40.7994 81.3885 40.9554 80.4885 40.9554 79.2885 cv
40.9554 78.0885 40.7994 77.1885 40.4994 76.5885 cv
40.1874 75.9885 39.7314 75.6885 39.1194 75.6885 cv
39.1194 74.7525 mo
40.0914 74.7525 40.8354 75.1485 41.3634 75.9165 cv
41.8794 76.6965 42.1434 77.8245 42.1434 79.2885 cv
42.1434 80.7645 41.8794 81.8925 41.3634 82.6605 cv
40.8354 83.4285 40.0914 83.8125 39.1194 83.8125 cv
38.1354 83.8125 37.3794 83.4285 36.8634 82.6605 cv
36.3474 81.8925 36.0954 80.7645 36.0954 79.2885 cv
36.0954 77.8245 36.3474 76.6965 36.8634 75.9165 cv
37.3794 75.1485 38.1354 74.7525 39.1194 74.7525 cv
f
46.7514 75.6885 mo
46.1394 75.6885 45.6834 75.9885 45.3714 76.5885 cv
45.0594 77.1885 44.9154 78.0885 44.9154 79.2885 cv
44.9154 80.4885 45.0594 81.3885 45.3714 81.9885 cv
45.6834 82.5885 46.1394 82.8885 46.7514 82.8885 cv
47.3634 82.8885 47.8194 82.5885 48.1314 81.9885 cv
48.4314 81.3885 48.5874 80.4885 48.5874 79.2885 cv
48.5874 78.0885 48.4314 77.1885 48.1314 76.5885 cv
47.8194 75.9885 47.3634 75.6885 46.7514 75.6885 cv
46.7514 74.7525 mo
47.7234 74.7525 48.4674 75.1485 48.9954 75.9165 cv
49.5114 76.6965 49.7754 77.8245 49.7754 79.2885 cv
49.7754 80.7645 49.5114 81.8925 48.9954 82.6605 cv
48.4674 83.4285 47.7234 83.8125 46.7514 83.8125 cv
45.7674 83.8125 45.0114 83.4285 44.4954 82.6605 cv
43.9794 81.8925 43.7274 80.7645 43.7274 79.2885 cv
43.7274 77.8245 43.9794 76.6965 44.4954 75.9165 cv
45.0114 75.1485 45.7674 74.7525 46.7514 74.7525 cv
f
52.812 55.112 mo
56.812 55.112 li
f
52.812 55.112 mo
56.812 55.112 li
@
569.196 55.112 mo
565.196 55.112 li
f
569.196 55.112 mo
565.196 55.112 li
@
31.3155 54.2725 mo
30.7515 54.2725 30.3075 54.4285 29.9835 54.7285 cv
29.6595 55.0285 29.5035 55.4365 29.5035 55.9645 cv
29.5035 56.4925 29.6595 56.9125 29.9835 57.2125 cv
30.3075 57.5125 30.7515 57.6565 31.3155 57.6565 cv
31.8675 57.6565 32.3115 57.5125 32.6355 57.2005 cv
32.9595 56.9005 33.1275 56.4925 33.1275 55.9645 cv
33.1275 55.4365 32.9595 55.0285 32.6475 54.7285 cv
32.3235 54.4285 31.8795 54.2725 31.3155 54.2725 cv
30.1275 53.7685 mo
29.6235 53.6485 29.2275 53.4085 28.9395 53.0605 cv
28.6515 52.7125 28.5195 52.2925 28.5195 51.7885 cv
28.5195 51.0925 28.7595 50.5405 29.2635 50.1325 cv
29.7555 49.7245 30.4395 49.5205 31.3155 49.5205 cv
32.1795 49.5205 32.8635 49.7245 33.3675 50.1325 cv
33.8595 50.5405 34.1115 51.0925 34.1115 51.7885 cv
34.1115 52.2925 33.9675 52.7125 33.6795 53.0605 cv
33.3915 53.4085 33.0075 53.6485 32.5035 53.7685 cv
33.0675 53.9005 33.5115 54.1645 33.8355 54.5485 cv
34.1475 54.9325 34.3155 55.4125 34.3155 55.9645 cv
34.3155 56.8165 34.0515 57.4645 33.5355 57.9085 cv
33.0075 58.3645 32.2755 58.5805 31.3155 58.5805 cv
30.3435 58.5805 29.5995 58.3645 29.0835 57.9085 cv
28.5675 57.4645 28.3155 56.8165 28.3155 55.9645 cv
28.3155 55.4125 28.4715 54.9325 28.7955 54.5485 cv
29.1075 54.1645 29.5515 53.9005 30.1275 53.7685 cv
29.6955 51.8965 mo
29.6955 52.3525 29.8275 52.7125 30.1155 52.9645 cv
30.4035 53.2165 30.7995 53.3365 31.3155 53.3365 cv
31.8195 53.3365 32.2155 53.2165 32.5035 52.9645 cv
32.7915 52.7125 32.9355 52.3525 32.9355 51.8965 cv
32.9355 51.4405 32.7915 51.0925 32.5035 50.8405 cv
32.2155 50.5885 31.8195 50.4565 31.3155 50.4565 cv
30.7995 50.4565 30.4035 50.5885 30.1155 50.8405 cv
29.8275 51.0925 29.6955 51.4405 29.6955 51.8965 cv
f
38.9475 50.4565 mo
38.3355 50.4565 37.8795 50.7565 37.5675 51.3565 cv
37.2555 51.9565 37.1115 52.8565 37.1115 54.0565 cv
37.1115 55.2565 37.2555 56.1565 37.5675 56.7565 cv
37.8795 57.3565 38.3355 57.6565 38.9475 57.6565 cv
39.5595 57.6565 40.0155 57.3565 40.3275 56.7565 cv
40.6275 56.1565 40.7835 55.2565 40.7835 54.0565 cv
40.7835 52.8565 40.6275 51.9565 40.3275 51.3565 cv
40.0155 50.7565 39.5595 50.4565 38.9475 50.4565 cv
38.9475 49.5205 mo
39.9195 49.5205 40.6635 49.9165 41.1915 50.6845 cv
41.7075 51.4645 41.9715 52.5925 41.9715 54.0565 cv
41.9715 55.5325 41.7075 56.6605 41.1915 57.4285 cv
40.6635 58.1965 39.9195 58.5805 38.9475 58.5805 cv
37.9635 58.5805 37.2075 58.1965 36.6915 57.4285 cv
36.1755 56.6605 35.9235 55.5325 35.9235 54.0565 cv
35.9235 52.5925 36.1755 51.4645 36.6915 50.6845 cv
37.2075 49.9165 37.9635 49.5205 38.9475 49.5205 cv
f
46.5795 50.4565 mo
45.9675 50.4565 45.5115 50.7565 45.1995 51.3565 cv
44.8875 51.9565 44.7435 52.8565 44.7435 54.0565 cv
44.7435 55.2565 44.8875 56.1565 45.1995 56.7565 cv
45.5115 57.3565 45.9675 57.6565 46.5795 57.6565 cv
47.1915 57.6565 47.6475 57.3565 47.9595 56.7565 cv
48.2595 56.1565 48.4155 55.2565 48.4155 54.0565 cv
48.4155 52.8565 48.2595 51.9565 47.9595 51.3565 cv
47.6475 50.7565 47.1915 50.4565 46.5795 50.4565 cv
46.5795 49.5205 mo
47.5515 49.5205 48.2955 49.9165 48.8235 50.6845 cv
49.3395 51.4645 49.6035 52.5925 49.6035 54.0565 cv
49.6035 55.5325 49.3395 56.6605 48.8235 57.4285 cv
48.2955 58.1965 47.5515 58.5805 46.5795 58.5805 cv
45.5955 58.5805 44.8395 58.1965 44.3235 57.4285 cv
43.8075 56.6605 43.5555 55.5325 43.5555 54.0565 cv
43.5555 52.5925 43.8075 51.4645 44.3235 50.6845 cv
44.8395 49.9165 45.5955 49.5205 46.5795 49.5205 cv
f
52.812 29.88 mo
56.812 29.88 li
f
52.812 29.88 mo
56.812 29.88 li
@
569.196 29.88 mo
565.196 29.88 li
f
569.196 29.88 mo
565.196 29.88 li
@
28.757 33.0125 mo
28.757 31.9325 li
29.045 32.0765 29.345 32.1845 29.657 32.2565 cv
29.957 32.3285 30.257 32.3645 30.557 32.3645 cv
31.325 32.3645 31.925 32.1125 32.333 31.5845 cv
32.741 31.0565 32.981 30.2645 33.053 29.1845 cv
32.813 29.5205 32.525 29.7845 32.189 29.9645 cv
31.841 30.1445 31.457 30.2285 31.037 30.2285 cv
30.149 30.2285 29.453 29.9645 28.949 29.4365 cv
28.445 28.9085 28.193 28.1885 28.193 27.2645 cv
28.193 26.3765 28.457 25.6565 28.985 25.1045 cv
29.513 24.5645 30.221 24.2885 31.109 24.2885 cv
32.117 24.2885 32.897 24.6845 33.425 25.4525 cv
33.953 26.2325 34.229 27.3605 34.229 28.8245 cv
34.229 30.2165 33.893 31.3085 33.245 32.1245 cv
32.585 32.9405 31.709 33.3485 30.605 33.3485 cv
30.305 33.3485 30.005 33.3125 29.705 33.2645 cv
29.393 33.2165 29.081 33.1325 28.757 33.0125 cv
31.109 29.3045 mo
31.637 29.3045 32.057 29.1245 32.369 28.7645 cv
32.681 28.4045 32.837 27.9005 32.837 27.2645 cv
32.837 26.6405 32.681 26.1365 32.369 25.7765 cv
32.057 25.4165 31.637 25.2245 31.109 25.2245 cv
30.581 25.2245 30.161 25.4165 29.849 25.7765 cv
29.537 26.1365 29.381 26.6405 29.381 27.2645 cv
29.381 27.9005 29.537 28.4045 29.849 28.7645 cv
30.161 29.1245 30.581 29.3045 31.109 29.3045 cv
f
38.885 25.2245 mo
38.273 25.2245 37.817 25.5245 37.505 26.1245 cv
37.193 26.7245 37.049 27.6245 37.049 28.8245 cv
37.049 30.0245 37.193 30.9245 37.505 31.5245 cv
37.817 32.1245 38.273 32.4245 38.885 32.4245 cv
39.497 32.4245 39.953 32.1245 40.265 31.5245 cv
40.565 30.9245 40.721 30.0245 40.721 28.8245 cv
40.721 27.6245 40.565 26.7245 40.265 26.1245 cv
39.953 25.5245 39.497 25.2245 38.885 25.2245 cv
38.885 24.2885 mo
39.857 24.2885 40.601 24.6845 41.129 25.4525 cv
41.645 26.2325 41.909 27.3605 41.909 28.8245 cv
41.909 30.3005 41.645 31.4285 41.129 32.1965 cv
40.601 32.9645 39.857 33.3485 38.885 33.3485 cv
37.901 33.3485 37.145 32.9645 36.629 32.1965 cv
36.113 31.4285 35.861 30.3005 35.861 28.8245 cv
35.861 27.3605 36.113 26.2325 36.629 25.4525 cv
37.145 24.6845 37.901 24.2885 38.885 24.2885 cv
f
46.517 25.2245 mo
45.905 25.2245 45.449 25.5245 45.137 26.1245 cv
44.825 26.7245 44.681 27.6245 44.681 28.8245 cv
44.681 30.0245 44.825 30.9245 45.137 31.5245 cv
45.449 32.1245 45.905 32.4245 46.517 32.4245 cv
47.129 32.4245 47.585 32.1245 47.897 31.5245 cv
48.197 30.9245 48.353 30.0245 48.353 28.8245 cv
48.353 27.6245 48.197 26.7245 47.897 26.1245 cv
47.585 25.5245 47.129 25.2245 46.517 25.2245 cv
46.517 24.2885 mo
47.489 24.2885 48.233 24.6845 48.761 25.4525 cv
49.277 26.2325 49.541 27.3605 49.541 28.8245 cv
49.541 30.3005 49.277 31.4285 48.761 32.1965 cv
48.233 32.9645 47.489 33.3485 46.517 33.3485 cv
45.533 33.3485 44.777 32.9645 44.261 32.1965 cv
43.745 31.4285 43.493 30.3005 43.493 28.8245 cv
43.493 27.3605 43.745 26.2325 44.261 25.4525 cv
44.777 24.6845 45.533 24.2885 46.517 24.2885 cv
f
5 22.6719 mo
193.219 22.6719 li
193.219 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
5 22.6719 mo
193.219 22.6719 li
193.219 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
12 13.0938 mo
26 13.0938 li
@
9 16.0938 mo
15 16.0938 li
15 10.0938 li
9 10.0938 li
cp
f
.5 lw
0 lc
0 lj
9 16.0938 mo
15 16.0938 li
15 10.0938 li
9 10.0938 li
cp
@
23 16.0938 mo
29 16.0938 li
29 10.0938 li
23 10.0938 li
cp
f
23 16.0938 mo
29 16.0938 li
29 10.0938 li
23 10.0938 li
cp
@
40.71 8.99375 mo
40.71 9.74375 li
39.85 9.74375 li
39.53 9.74375 39.3 9.81375 39.18 9.94375 cv
39.05 10.0737 38.99 10.3037 38.99 10.6437 cv
38.99 11.1237 li
40.47 11.1237 li
40.47 11.8237 li
38.99 11.8237 li
38.99 16.5938 li
38.09 16.5938 li
38.09 11.8237 li
37.23 11.8237 li
37.23 11.1237 li
38.09 11.1237 li
38.09 10.7437 li
38.09 10.1437 38.23 9.69375 38.51 9.41375 cv
38.79 9.13375 39.24 8.99375 39.86 8.99375 cv
40.71 8.99375 li
f
45.0601 11.9537 mo
45.0601 8.99375 li
45.9601 8.99375 li
45.9601 16.5938 li
45.0601 16.5938 li
45.0601 15.7738 li
44.87 16.1038 44.6301 16.3438 44.34 16.4937 cv
44.05 16.6437 43.71 16.7237 43.3101 16.7237 cv
42.6501 16.7237 42.1101 16.4638 41.69 15.9438 cv
41.2701 15.4237 41.07 14.7238 41.07 13.8637 cv
41.07 13.0037 41.2701 12.3137 41.69 11.7837 cv
42.1101 11.2638 42.6501 10.9937 43.3101 10.9937 cv
43.71 10.9937 44.05 11.0737 44.34 11.2337 cv
44.6301 11.3937 44.87 11.6337 45.0601 11.9537 cv
42 13.8637 mo
42 14.5238 42.1301 15.0437 42.4001 15.4237 cv
42.6701 15.8038 43.05 15.9838 43.5301 15.9838 cv
44 15.9838 44.37 15.8038 44.6501 15.4237 cv
44.9201 15.0437 45.0601 14.5238 45.0601 13.8637 cv
45.0601 13.2037 44.9201 12.6937 44.6501 12.3137 cv
44.37 11.9338 44 11.7437 43.5301 11.7437 cv
43.05 11.7437 42.6701 11.9338 42.4001 12.3137 cv
42.1301 12.6937 42 13.2037 42 13.8637 cv
f
50.3 13.8438 mo
49.57 13.8438 49.07 13.9338 48.79 14.0938 cv
48.51 14.2638 48.37 14.5437 48.37 14.9438 cv
48.37 15.2638 48.47 15.5238 48.68 15.7037 cv
48.89 15.8938 49.18 15.9838 49.54 15.9838 cv
50.04 15.9838 50.44 15.8138 50.74 15.4537 cv
51.04 15.1038 51.19 14.6337 51.19 14.0437 cv
51.19 13.8438 li
50.3 13.8438 li
52.09 13.4738 mo
52.09 16.5938 li
51.19 16.5938 li
51.19 15.7638 li
50.98 16.1038 50.72 16.3438 50.42 16.4937 cv
50.12 16.6437 49.74 16.7237 49.3 16.7237 cv
48.74 16.7237 48.29 16.5737 47.96 16.2638 cv
47.63 15.9537 47.47 15.5337 47.47 15.0037 cv
47.47 14.3938 47.67 13.9338 48.09 13.6137 cv
48.5 13.3038 49.11 13.1437 49.93 13.1437 cv
51.19 13.1437 li
51.19 13.0538 li
51.19 12.6437 51.05 12.3237 50.78 12.0938 cv
50.51 11.8737 50.13 11.7537 49.64 11.7537 cv
49.32 11.7537 49.02 11.7937 48.72 11.8737 cv
48.42 11.9537 48.14 12.0637 47.87 12.2037 cv
47.87 11.3737 li
48.19 11.2537 48.51 11.1537 48.82 11.0938 cv
49.13 11.0337 49.43 10.9937 49.73 10.9937 cv
50.52 10.9937 51.11 11.2037 51.5 11.6137 cv
51.89 12.0238 52.09 12.6437 52.09 13.4738 cv
f
53.4901 13.4537 mo
56.1201 13.4537 li
56.1201 14.2537 li
53.4901 14.2537 li
53.4901 13.4537 li
f
61.49 11.3337 mo
61.49 12.1737 li
61.23 12.0337 60.98 11.9338 60.72 11.8637 cv
60.46 11.7937 60.21 11.7537 59.95 11.7537 cv
59.37 11.7537 58.91 11.9438 58.59 12.3137 cv
58.27 12.6838 58.11 13.2037 58.11 13.8637 cv
58.11 14.5337 58.27 15.0538 58.59 15.4237 cv
58.91 15.7937 59.37 15.9738 59.95 15.9738 cv
60.21 15.9738 60.46 15.9438 60.72 15.8737 cv
60.98 15.8038 61.23 15.6938 61.49 15.5538 cv
61.49 16.3838 li
61.23 16.5037 60.97 16.5938 60.71 16.6437 cv
60.44 16.6938 60.15 16.7237 59.85 16.7237 cv
59.03 16.7237 58.37 16.4737 57.89 15.9537 cv
57.4 15.4438 57.16 14.7437 57.16 13.8637 cv
57.16 12.9737 57.4 12.2738 57.89 11.7638 cv
58.38 11.2537 59.05 10.9937 59.91 10.9937 cv
60.19 10.9937 60.46 11.0238 60.72 11.0837 cv
60.98 11.1437 61.24 11.2237 61.49 11.3337 cv
f
63.05 11.1237 mo
63.95 11.1237 li
63.95 16.5938 li
63.05 16.5938 li
63.05 11.1237 li
63.05 8.99375 mo
63.95 8.99375 li
63.95 10.1337 li
63.05 10.1337 li
63.05 8.99375 li
f
66.72 9.57375 mo
66.72 11.1237 li
68.57 11.1237 li
68.57 11.8237 li
66.72 11.8237 li
66.72 14.7937 li
66.72 15.2437 66.78 15.5337 66.9 15.6537 cv
67.02 15.7837 67.27 15.8438 67.65 15.8438 cv
68.57 15.8438 li
68.57 16.5938 li
67.65 16.5938 li
66.95 16.5938 66.47 16.4638 66.21 16.2038 cv
65.95 15.9438 65.82 15.4738 65.82 14.7937 cv
65.82 11.8237 li
65.16 11.8237 li
65.16 11.1237 li
65.82 11.1237 li
65.82 9.57375 li
66.72 9.57375 li
f
1 lw
1 lj
[6 6 ] 0 dsh
91.3281 13.0938 mo
105.328 13.0938 li
@
91.3281 17.3364 mo
93.8737 13.0938 li
91.3281 8.8511 li
88.7825 13.0938 li
cp
f
.5 lw
0 lj
[] 0 dsh
91.3281 17.3364 mo
93.8737 13.0938 li
91.3281 8.8511 li
88.7825 13.0938 li
cp
@
105.328 17.3364 mo
107.874 13.0938 li
105.328 8.8511 li
102.783 13.0938 li
cp
f
105.328 17.3364 mo
107.874 13.0938 li
105.328 8.8511 li
102.783 13.0938 li
cp
@
117.268 11.1237 mo
118.168 11.1237 li
118.168 16.5938 li
117.268 16.5938 li
117.268 11.1237 li
117.268 8.99375 mo
118.168 8.99375 li
118.168 10.1337 li
117.268 10.1337 li
117.268 8.99375 li
f
123.988 11.3337 mo
123.988 12.1737 li
123.728 12.0337 123.478 11.9338 123.218 11.8637 cv
122.958 11.7937 122.708 11.7537 122.448 11.7537 cv
121.868 11.7537 121.408 11.9438 121.088 12.3137 cv
120.768 12.6838 120.608 13.2037 120.608 13.8637 cv
120.608 14.5337 120.768 15.0538 121.088 15.4237 cv
121.408 15.7937 121.868 15.9738 122.448 15.9738 cv
122.708 15.9738 122.958 15.9438 123.218 15.8737 cv
123.478 15.8038 123.728 15.6938 123.988 15.5538 cv
123.988 16.3838 li
123.728 16.5037 123.468 16.5938 123.208 16.6437 cv
122.938 16.6938 122.648 16.7237 122.348 16.7237 cv
121.528 16.7237 120.868 16.4737 120.388 15.9537 cv
119.898 15.4438 119.658 14.7437 119.658 13.8637 cv
119.658 12.9737 119.898 12.2738 120.388 11.7638 cv
120.878 11.2537 121.548 10.9937 122.408 10.9937 cv
122.688 10.9937 122.958 11.0238 123.218 11.0837 cv
123.478 11.1437 123.738 11.2237 123.988 11.3337 cv
f
126.438 9.57375 mo
126.438 11.1237 li
128.288 11.1237 li
128.288 11.8237 li
126.438 11.8237 li
126.438 14.7937 li
126.438 15.2437 126.498 15.5337 126.618 15.6537 cv
126.738 15.7837 126.988 15.8438 127.368 15.8438 cv
128.288 15.8438 li
128.288 16.5938 li
127.368 16.5938 li
126.668 16.5938 126.188 16.4638 125.928 16.2038 cv
125.668 15.9438 125.538 15.4738 125.538 14.7937 cv
125.538 11.8237 li
124.878 11.8237 li
124.878 11.1237 li
125.538 11.1237 li
125.538 9.57375 li
126.438 9.57375 li
f
1 lw
1 lj
[1 3 ] 0 dsh
150.359 13.0938 mo
164.359 13.0938 li
@
gsave
147.109 16.3438 mo
153.609 16.3438 li
153.609 9.84375 li
147.109 9.84375 li
cp
clp
.5 lw
[] 0 dsh
150.359 16.0938 mo
151.155 16.0938 151.918 15.7777 152.481 15.2151 cv
153.043 14.6525 153.359 13.8894 153.359 13.0938 cv
153.359 12.2981 153.043 11.535 152.481 10.9724 cv
151.918 10.4098 151.155 10.0938 150.359 10.0938 cv
149.564 10.0938 148.801 10.4098 148.238 10.9724 cv
147.675 11.535 147.359 12.2981 147.359 13.0938 cv
147.359 13.8894 147.675 14.6525 148.238 15.2151 cv
148.801 15.7777 149.564 16.0938 150.359 16.0938 cv
cp
@
grestore
gsave
161.109 16.3438 mo
167.609 16.3438 li
167.609 9.84375 li
161.109 9.84375 li
cp
clp
.5 lw
[] 0 dsh
164.359 16.0938 mo
165.155 16.0938 165.918 15.7777 166.481 15.2151 cv
167.043 14.6525 167.359 13.8894 167.359 13.0938 cv
167.359 12.2981 167.043 11.535 166.481 10.9724 cv
165.918 10.4098 165.155 10.0938 164.359 10.0938 cv
163.564 10.0938 162.801 10.4098 162.238 10.9724 cv
161.675 11.535 161.359 12.2981 161.359 13.0938 cv
161.359 13.8894 161.675 14.6525 162.238 15.2151 cv
162.801 15.7777 163.564 16.0938 164.359 16.0938 cv
cp
@
grestore
179.789 11.2837 mo
179.789 12.1337 li
179.529 12.0138 179.269 11.9137 178.999 11.8438 cv
178.719 11.7837 178.439 11.7437 178.149 11.7437 cv
177.699 11.7437 177.359 11.8137 177.139 11.9537 cv
176.919 12.0938 176.809 12.2937 176.809 12.5637 cv
176.809 12.7738 176.889 12.9338 177.049 13.0538 cv
177.209 13.1737 177.529 13.2937 178.009 13.3937 cv
178.319 13.4637 li
178.959 13.6038 179.409 13.8038 179.679 14.0437 cv
179.939 14.2937 180.079 14.6438 180.079 15.0837 cv
180.079 15.5938 179.879 15.9937 179.479 16.2838 cv
179.079 16.5837 178.519 16.7237 177.819 16.7237 cv
177.519 16.7237 177.219 16.6938 176.899 16.6437 cv
176.579 16.5938 176.249 16.5138 175.899 16.3937 cv
175.899 15.4637 li
176.229 15.6438 176.559 15.7738 176.879 15.8538 cv
177.199 15.9438 177.519 15.9838 177.839 15.9838 cv
178.259 15.9838 178.589 15.9137 178.819 15.7738 cv
179.039 15.6337 179.159 15.4237 179.159 15.1537 cv
179.159 14.9137 179.069 14.7238 178.909 14.5938 cv
178.749 14.4637 178.389 14.3337 177.829 14.2137 cv
177.519 14.1437 li
176.959 14.0238 176.549 13.8438 176.309 13.6038 cv
176.059 13.3637 175.939 13.0337 175.939 12.6038 cv
175.939 12.0938 176.119 11.6937 176.479 11.4137 cv
176.839 11.1337 177.359 10.9937 178.039 10.9937 cv
178.369 10.9937 178.679 11.0238 178.979 11.0737 cv
179.269 11.1237 179.539 11.1937 179.789 11.2837 cv
f
185.449 11.3337 mo
185.449 12.1737 li
185.189 12.0337 184.939 11.9338 184.679 11.8637 cv
184.419 11.7937 184.169 11.7537 183.909 11.7537 cv
183.329 11.7537 182.869 11.9438 182.549 12.3137 cv
182.229 12.6838 182.069 13.2037 182.069 13.8637 cv
182.069 14.5337 182.229 15.0538 182.549 15.4237 cv
182.869 15.7937 183.329 15.9738 183.909 15.9738 cv
184.169 15.9738 184.419 15.9438 184.679 15.8737 cv
184.939 15.8038 185.189 15.6938 185.449 15.5538 cv
185.449 16.3838 li
185.189 16.5037 184.929 16.5938 184.669 16.6437 cv
184.399 16.6938 184.109 16.7237 183.809 16.7237 cv
182.989 16.7237 182.329 16.4737 181.849 15.9537 cv
181.359 15.4438 181.119 14.7437 181.119 13.8637 cv
181.119 12.9737 181.359 12.2738 181.849 11.7638 cv
182.339 11.2537 183.009 10.9937 183.869 10.9937 cv
184.149 10.9937 184.419 11.0238 184.679 11.0837 cv
184.939 11.1437 185.199 11.2237 185.449 11.3337 cv
f
187.899 9.57375 mo
187.899 11.1237 li
189.749 11.1237 li
189.749 11.8237 li
187.899 11.8237 li
187.899 14.7937 li
187.899 15.2437 187.959 15.5337 188.079 15.6537 cv
188.199 15.7837 188.449 15.8438 188.829 15.8438 cv
189.749 15.8438 li
189.749 16.5938 li
188.829 16.5938 li
188.129 16.5938 187.649 16.4638 187.389 16.2038 cv
187.129 15.9438 186.999 15.4738 186.999 14.7937 cv
186.999 11.8237 li
186.339 11.8237 li
186.339 11.1237 li
186.999 11.1237 li
186.999 9.57375 li
187.899 9.57375 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
