%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: f-measuremulti.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: xintao
%%CreationDate: 2018/1/30, 13:44:22
%%BoundingBox: 0 0 587 299
%%HiResBoundingBox: 0 0 586.8000 298.8000
%%CropBox: 0 0 586.8000 298.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-01-30T13:44:02+08:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -298.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 298.8 li
586.8 298.8 li
586.8 0 li
cp
clp
gsave
0 298.8 mo
587 298.8 li
587 -.200012 li
0 -.200012 li
cp
clp
0 298.8 mo
586.8 298.8 li
586.8 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
f
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
52.812 256.968 mo
569.196 256.968 li
1 /0 /CSD get_res sepcs
1 sep
@
52.812 256.968 mo
52.812 29.88 li
@
52.812 29.88 mo
569.196 29.88 li
@
569.196 256.968 mo
569.196 29.88 li
@
52.812 256.968 mo
52.812 252.968 li
f
.5 lw
0 lc
1 lj
52.812 256.968 mo
52.812 252.968 li
@
52.812 29.88 mo
52.812 33.88 li
f
52.812 29.88 mo
52.812 33.88 li
@
51.6906 269.097 mo
53.6226 269.097 li
53.6226 262.425 li
51.5226 262.845 li
51.5226 261.765 li
53.6106 261.345 li
54.7986 261.345 li
54.7986 269.097 li
56.7306 269.097 li
56.7306 270.093 li
51.6906 270.093 li
51.6906 269.097 li
f
81.5 256.968 mo
81.5 252.968 li
f
81.5 256.968 mo
81.5 252.968 li
@
81.5 29.88 mo
81.5 33.88 li
f
81.5 29.88 mo
81.5 33.88 li
@
81.0228 269.097 mo
85.1507 269.097 li
85.1507 270.093 li
79.5947 270.093 li
79.5947 269.097 li
80.0387 268.641 80.6507 268.017 81.4307 267.225 cv
82.1988 266.445 82.6908 265.941 82.8948 265.713 cv
83.2787 265.293 83.5427 264.933 83.6868 264.633 cv
83.8307 264.345 83.9147 264.045 83.9147 263.757 cv
83.9147 263.301 83.7467 262.917 83.4228 262.629 cv
83.0987 262.341 82.6787 262.185 82.1507 262.185 cv
81.7787 262.185 81.3828 262.257 80.9747 262.377 cv
80.5667 262.509 80.1227 262.701 79.6547 262.965 cv
79.6547 261.765 li
80.1348 261.573 80.5788 261.429 80.9867 261.333 cv
81.3948 261.237 81.7787 261.189 82.1267 261.189 cv
83.0267 261.189 83.7467 261.417 84.2868 261.873 cv
84.8268 262.329 85.1028 262.929 85.1028 263.685 cv
85.1028 264.045 85.0307 264.393 84.8988 264.705 cv
84.7667 265.029 84.5267 265.413 84.1667 265.845 cv
84.0707 265.965 83.7588 266.289 83.2308 266.829 cv
82.7028 267.369 81.9707 268.125 81.0228 269.097 cv
f
110.188 256.968 mo
110.188 252.968 li
f
110.188 256.968 mo
110.188 252.968 li
@
110.188 29.88 mo
110.188 33.88 li
f
110.188 29.88 mo
110.188 33.88 li
@
112.185 265.377 mo
112.749 265.497 113.193 265.749 113.505 266.133 cv
113.817 266.517 113.985 266.997 113.985 267.549 cv
113.985 268.413 113.685 269.085 113.097 269.553 cv
112.497 270.021 111.657 270.249 110.565 270.249 cv
110.193 270.249 109.809 270.213 109.425 270.141 cv
109.041 270.081 108.633 269.973 108.225 269.829 cv
108.225 268.689 li
108.549 268.881 108.909 269.025 109.305 269.121 cv
109.689 269.217 110.097 269.265 110.529 269.265 cv
111.273 269.265 111.837 269.121 112.221 268.833 cv
112.605 268.545 112.809 268.113 112.809 267.549 cv
112.809 267.045 112.629 266.637 112.269 266.349 cv
111.909 266.061 111.405 265.905 110.757 265.905 cv
109.737 265.905 li
109.737 264.933 li
110.805 264.933 li
111.381 264.933 111.825 264.825 112.137 264.585 cv
112.449 264.357 112.605 264.021 112.605 263.577 cv
112.605 263.133 112.437 262.785 112.125 262.545 cv
111.801 262.305 111.345 262.185 110.757 262.185 cv
110.433 262.185 110.085 262.221 109.713 262.293 cv
109.341 262.365 108.933 262.473 108.489 262.617 cv
108.489 261.561 li
108.933 261.441 109.353 261.345 109.749 261.285 cv
110.133 261.225 110.505 261.189 110.865 261.189 cv
111.753 261.189 112.461 261.393 112.989 261.801 cv
113.517 262.209 113.781 262.761 113.781 263.457 cv
113.781 263.937 113.637 264.345 113.361 264.681 cv
113.085 265.017 112.689 265.257 112.185 265.377 cv
f
138.876 256.968 mo
138.876 252.968 li
f
138.876 256.968 mo
138.876 252.968 li
@
138.876 29.88 mo
138.876 33.88 li
f
138.876 29.88 mo
138.876 33.88 li
@
140.225 262.377 mo
137.237 267.045 li
140.225 267.045 li
140.225 262.377 li
139.913 261.345 mo
141.401 261.345 li
141.401 267.045 li
142.649 267.045 li
142.649 268.029 li
141.401 268.029 li
141.401 270.093 li
140.225 270.093 li
140.225 268.029 li
136.277 268.029 li
136.277 266.889 li
139.913 261.345 li
f
167.564 256.968 mo
167.564 252.968 li
f
167.564 256.968 mo
167.564 252.968 li
@
167.564 29.88 mo
167.564 33.88 li
f
167.564 29.88 mo
167.564 33.88 li
@
166.024 261.345 mo
170.668 261.345 li
170.668 262.341 li
167.104 262.341 li
167.104 264.489 li
167.272 264.429 167.452 264.381 167.62 264.357 cv
167.788 264.333 167.968 264.309 168.136 264.309 cv
169.108 264.309 169.876 264.585 170.452 265.113 cv
171.028 265.653 171.316 266.373 171.316 267.285 cv
171.316 268.233 171.016 268.965 170.428 269.481 cv
169.84 269.997 169.012 270.249 167.956 270.249 cv
167.584 270.249 167.212 270.213 166.828 270.165 cv
166.444 270.105 166.06 270.021 165.652 269.889 cv
165.652 268.701 li
166 268.893 166.36 269.037 166.744 269.133 cv
167.116 269.229 167.512 269.265 167.932 269.265 cv
168.604 269.265 169.144 269.097 169.54 268.737 cv
169.924 268.377 170.128 267.897 170.128 267.285 cv
170.128 266.685 169.924 266.205 169.54 265.845 cv
169.144 265.485 168.604 265.305 167.932 265.305 cv
167.62 265.305 167.296 265.341 166.984 265.413 cv
166.672 265.485 166.348 265.593 166.024 265.737 cv
166.024 261.345 li
f
196.252 256.968 mo
196.252 252.968 li
f
196.252 256.968 mo
196.252 252.968 li
@
196.252 29.88 mo
196.252 33.88 li
f
196.252 29.88 mo
196.252 33.88 li
@
197.196 265.245 mo
196.668 265.245 196.248 265.437 195.936 265.797 cv
195.624 266.157 195.468 266.661 195.468 267.285 cv
195.468 267.921 195.624 268.425 195.936 268.785 cv
196.248 269.145 196.668 269.325 197.196 269.325 cv
197.724 269.325 198.144 269.145 198.456 268.785 cv
198.768 268.425 198.924 267.921 198.924 267.285 cv
198.924 266.661 198.768 266.157 198.456 265.797 cv
198.144 265.437 197.724 265.245 197.196 265.245 cv
199.548 261.537 mo
199.548 262.617 li
199.248 262.473 198.948 262.365 198.648 262.293 cv
198.336 262.221 198.036 262.185 197.748 262.185 cv
196.956 262.185 196.356 262.449 195.948 262.977 cv
195.54 263.505 195.3 264.309 195.252 265.365 cv
195.48 265.029 195.768 264.765 196.116 264.585 cv
196.464 264.405 196.848 264.309 197.268 264.309 cv
198.144 264.309 198.84 264.585 199.344 265.113 cv
199.848 265.641 200.112 266.373 200.112 267.285 cv
200.112 268.185 199.836 268.905 199.308 269.445 cv
198.78 269.985 198.072 270.249 197.196 270.249 cv
196.188 270.249 195.408 269.865 194.88 269.097 cv
194.34 268.329 194.076 267.201 194.076 265.725 cv
194.076 264.345 194.4 263.241 195.06 262.425 cv
195.708 261.609 196.596 261.189 197.7 261.189 cv
197.988 261.189 198.288 261.225 198.6 261.273 cv
198.9 261.333 199.212 261.417 199.548 261.537 cv
f
224.94 256.968 mo
224.94 252.968 li
f
224.94 256.968 mo
224.94 252.968 li
@
224.94 29.88 mo
224.94 33.88 li
f
224.94 29.88 mo
224.94 33.88 li
@
223.111 261.345 mo
228.74 261.345 li
228.74 261.849 li
225.56 270.093 li
224.324 270.093 li
227.312 262.341 li
223.111 262.341 li
223.111 261.345 li
f
253.628 256.968 mo
253.628 252.968 li
f
253.628 256.968 mo
253.628 252.968 li
@
253.628 29.88 mo
253.628 33.88 li
f
253.628 29.88 mo
253.628 33.88 li
@
254.444 265.941 mo
253.88 265.941 253.436 266.097 253.112 266.397 cv
252.788 266.697 252.632 267.105 252.632 267.633 cv
252.632 268.161 252.788 268.581 253.112 268.881 cv
253.436 269.181 253.88 269.325 254.444 269.325 cv
254.996 269.325 255.44 269.181 255.764 268.869 cv
256.088 268.569 256.256 268.161 256.256 267.633 cv
256.256 267.105 256.088 266.697 255.776 266.397 cv
255.452 266.097 255.008 265.941 254.444 265.941 cv
253.256 265.437 mo
252.752 265.317 252.356 265.077 252.068 264.729 cv
251.78 264.381 251.648 263.961 251.648 263.457 cv
251.648 262.761 251.888 262.209 252.392 261.801 cv
252.884 261.393 253.568 261.189 254.444 261.189 cv
255.308 261.189 255.992 261.393 256.496 261.801 cv
256.988 262.209 257.24 262.761 257.24 263.457 cv
257.24 263.961 257.096 264.381 256.808 264.729 cv
256.52 265.077 256.136 265.317 255.632 265.437 cv
256.196 265.569 256.64 265.833 256.964 266.217 cv
257.276 266.601 257.444 267.081 257.444 267.633 cv
257.444 268.485 257.18 269.133 256.664 269.577 cv
256.136 270.033 255.404 270.249 254.444 270.249 cv
253.472 270.249 252.728 270.033 252.212 269.577 cv
251.696 269.133 251.444 268.485 251.444 267.633 cv
251.444 267.081 251.6 266.601 251.924 266.217 cv
252.236 265.833 252.68 265.569 253.256 265.437 cv
252.824 263.565 mo
252.824 264.021 252.956 264.381 253.244 264.633 cv
253.532 264.885 253.928 265.005 254.444 265.005 cv
254.948 265.005 255.344 264.885 255.632 264.633 cv
255.92 264.381 256.064 264.021 256.064 263.565 cv
256.064 263.109 255.92 262.761 255.632 262.509 cv
255.344 262.257 254.948 262.125 254.444 262.125 cv
253.928 262.125 253.532 262.257 253.244 262.509 cv
252.956 262.761 252.824 263.109 252.824 263.565 cv
f
282.316 256.968 mo
282.316 252.968 li
f
282.316 256.968 mo
282.316 252.968 li
@
282.316 29.88 mo
282.316 33.88 li
f
282.316 29.88 mo
282.316 33.88 li
@
280.613 269.913 mo
280.613 268.833 li
280.901 268.977 281.201 269.085 281.513 269.157 cv
281.813 269.229 282.113 269.265 282.413 269.265 cv
283.181 269.265 283.781 269.013 284.189 268.485 cv
284.597 267.957 284.837 267.165 284.909 266.085 cv
284.669 266.421 284.381 266.685 284.045 266.865 cv
283.697 267.045 283.313 267.129 282.893 267.129 cv
282.005 267.129 281.309 266.865 280.805 266.337 cv
280.301 265.809 280.049 265.089 280.049 264.165 cv
280.049 263.277 280.313 262.557 280.841 262.005 cv
281.369 261.465 282.077 261.189 282.965 261.189 cv
283.973 261.189 284.753 261.585 285.281 262.353 cv
285.809 263.133 286.085 264.261 286.085 265.725 cv
286.085 267.117 285.749 268.209 285.101 269.025 cv
284.441 269.841 283.565 270.249 282.461 270.249 cv
282.161 270.249 281.861 270.213 281.561 270.165 cv
281.249 270.117 280.937 270.033 280.613 269.913 cv
282.965 266.205 mo
283.493 266.205 283.913 266.025 284.225 265.665 cv
284.537 265.305 284.693 264.801 284.693 264.165 cv
284.693 263.541 284.537 263.037 284.225 262.677 cv
283.913 262.317 283.493 262.125 282.965 262.125 cv
282.437 262.125 282.017 262.317 281.705 262.677 cv
281.393 263.037 281.237 263.541 281.237 264.165 cv
281.237 264.801 281.393 265.305 281.705 265.665 cv
282.017 266.025 282.437 266.205 282.965 266.205 cv
f
311.004 256.968 mo
311.004 252.968 li
f
311.004 256.968 mo
311.004 252.968 li
@
311.004 29.88 mo
311.004 33.88 li
f
311.004 29.88 mo
311.004 33.88 li
@
305.906 269.097 mo
307.838 269.097 li
307.838 262.425 li
305.738 262.845 li
305.738 261.765 li
307.826 261.345 li
309.014 261.345 li
309.014 269.097 li
310.946 269.097 li
310.946 270.093 li
305.906 270.093 li
305.906 269.097 li
f
315.866 262.125 mo
315.254 262.125 314.798 262.425 314.486 263.025 cv
314.174 263.625 314.03 264.525 314.03 265.725 cv
314.03 266.925 314.174 267.825 314.486 268.425 cv
314.798 269.025 315.254 269.325 315.866 269.325 cv
316.478 269.325 316.934 269.025 317.246 268.425 cv
317.546 267.825 317.702 266.925 317.702 265.725 cv
317.702 264.525 317.546 263.625 317.246 263.025 cv
316.934 262.425 316.478 262.125 315.866 262.125 cv
315.866 261.189 mo
316.838 261.189 317.582 261.585 318.11 262.353 cv
318.626 263.133 318.89 264.261 318.89 265.725 cv
318.89 267.201 318.626 268.329 318.11 269.097 cv
317.582 269.865 316.838 270.249 315.866 270.249 cv
314.882 270.249 314.126 269.865 313.61 269.097 cv
313.094 268.329 312.842 267.201 312.842 265.725 cv
312.842 264.261 313.094 263.133 313.61 262.353 cv
314.126 261.585 314.882 261.189 315.866 261.189 cv
f
339.692 256.968 mo
339.692 252.968 li
f
339.692 256.968 mo
339.692 252.968 li
@
339.692 29.88 mo
339.692 33.88 li
f
339.692 29.88 mo
339.692 33.88 li
@
335.191 269.097 mo
339.319 269.097 li
339.319 270.093 li
333.763 270.093 li
333.763 269.097 li
334.207 268.641 334.819 268.017 335.599 267.225 cv
336.367 266.445 336.859 265.941 337.063 265.713 cv
337.447 265.293 337.711 264.933 337.855 264.633 cv
337.999 264.345 338.083 264.045 338.083 263.757 cv
338.083 263.301 337.915 262.917 337.591 262.629 cv
337.267 262.341 336.847 262.185 336.319 262.185 cv
335.947 262.185 335.551 262.257 335.143 262.377 cv
334.735 262.509 334.291 262.701 333.823 262.965 cv
333.823 261.765 li
334.303 261.573 334.747 261.429 335.155 261.333 cv
335.563 261.237 335.947 261.189 336.295 261.189 cv
337.195 261.189 337.915 261.417 338.455 261.873 cv
338.995 262.329 339.271 262.929 339.271 263.685 cv
339.271 264.045 339.199 264.393 339.067 264.705 cv
338.935 265.029 338.695 265.413 338.335 265.845 cv
338.239 265.965 337.927 266.289 337.399 266.829 cv
336.871 267.369 336.139 268.125 335.191 269.097 cv
f
344.335 262.125 mo
343.723 262.125 343.267 262.425 342.955 263.025 cv
342.643 263.625 342.499 264.525 342.499 265.725 cv
342.499 266.925 342.643 267.825 342.955 268.425 cv
343.267 269.025 343.723 269.325 344.335 269.325 cv
344.947 269.325 345.403 269.025 345.715 268.425 cv
346.015 267.825 346.171 266.925 346.171 265.725 cv
346.171 264.525 346.015 263.625 345.715 263.025 cv
345.403 262.425 344.947 262.125 344.335 262.125 cv
344.335 261.189 mo
345.307 261.189 346.051 261.585 346.579 262.353 cv
347.095 263.133 347.359 264.261 347.359 265.725 cv
347.359 267.201 347.095 268.329 346.579 269.097 cv
346.051 269.865 345.307 270.249 344.335 270.249 cv
343.351 270.249 342.595 269.865 342.079 269.097 cv
341.563 268.329 341.311 267.201 341.311 265.725 cv
341.311 264.261 341.563 263.133 342.079 262.353 cv
342.595 261.585 343.351 261.189 344.335 261.189 cv
f
368.38 256.968 mo
368.38 252.968 li
f
368.38 256.968 mo
368.38 252.968 li
@
368.38 29.88 mo
368.38 33.88 li
f
368.38 29.88 mo
368.38 33.88 li
@
366.471 265.377 mo
367.035 265.497 367.479 265.749 367.791 266.133 cv
368.103 266.517 368.271 266.997 368.271 267.549 cv
368.271 268.413 367.971 269.085 367.383 269.553 cv
366.783 270.021 365.943 270.249 364.851 270.249 cv
364.479 270.249 364.095 270.213 363.711 270.141 cv
363.327 270.081 362.919 269.973 362.511 269.829 cv
362.511 268.689 li
362.835 268.881 363.195 269.025 363.591 269.121 cv
363.975 269.217 364.383 269.265 364.815 269.265 cv
365.559 269.265 366.123 269.121 366.507 268.833 cv
366.891 268.545 367.095 268.113 367.095 267.549 cv
367.095 267.045 366.915 266.637 366.555 266.349 cv
366.195 266.061 365.691 265.905 365.043 265.905 cv
364.023 265.905 li
364.023 264.933 li
365.091 264.933 li
365.667 264.933 366.111 264.825 366.423 264.585 cv
366.735 264.357 366.891 264.021 366.891 263.577 cv
366.891 263.133 366.723 262.785 366.411 262.545 cv
366.087 262.305 365.631 262.185 365.043 262.185 cv
364.719 262.185 364.371 262.221 363.999 262.293 cv
363.627 262.365 363.219 262.473 362.775 262.617 cv
362.775 261.561 li
363.219 261.441 363.639 261.345 364.035 261.285 cv
364.419 261.225 364.791 261.189 365.151 261.189 cv
366.039 261.189 366.747 261.393 367.275 261.801 cv
367.803 262.209 368.067 262.761 368.067 263.457 cv
368.067 263.937 367.923 264.345 367.647 264.681 cv
367.371 265.017 366.975 265.257 366.471 265.377 cv
f
373.047 262.125 mo
372.435 262.125 371.979 262.425 371.667 263.025 cv
371.355 263.625 371.211 264.525 371.211 265.725 cv
371.211 266.925 371.355 267.825 371.667 268.425 cv
371.979 269.025 372.435 269.325 373.047 269.325 cv
373.659 269.325 374.115 269.025 374.427 268.425 cv
374.727 267.825 374.883 266.925 374.883 265.725 cv
374.883 264.525 374.727 263.625 374.427 263.025 cv
374.115 262.425 373.659 262.125 373.047 262.125 cv
373.047 261.189 mo
374.019 261.189 374.763 261.585 375.291 262.353 cv
375.807 263.133 376.071 264.261 376.071 265.725 cv
376.071 267.201 375.807 268.329 375.291 269.097 cv
374.763 269.865 374.019 270.249 373.047 270.249 cv
372.063 270.249 371.307 269.865 370.791 269.097 cv
370.275 268.329 370.023 267.201 370.023 265.725 cv
370.023 264.261 370.275 263.133 370.791 262.353 cv
371.307 261.585 372.063 261.189 373.047 261.189 cv
f
397.068 256.968 mo
397.068 252.968 li
f
397.068 256.968 mo
397.068 252.968 li
@
397.068 29.88 mo
397.068 33.88 li
f
397.068 29.88 mo
397.068 33.88 li
@
394.659 262.377 mo
391.671 267.045 li
394.659 267.045 li
394.659 262.377 li
394.347 261.345 mo
395.835 261.345 li
395.835 267.045 li
397.083 267.045 li
397.083 268.029 li
395.835 268.029 li
395.835 270.093 li
394.659 270.093 li
394.659 268.029 li
390.711 268.029 li
390.711 266.889 li
394.347 261.345 li
f
401.571 262.125 mo
400.959 262.125 400.503 262.425 400.191 263.025 cv
399.879 263.625 399.735 264.525 399.735 265.725 cv
399.735 266.925 399.879 267.825 400.191 268.425 cv
400.503 269.025 400.959 269.325 401.571 269.325 cv
402.183 269.325 402.639 269.025 402.951 268.425 cv
403.251 267.825 403.407 266.925 403.407 265.725 cv
403.407 264.525 403.251 263.625 402.951 263.025 cv
402.639 262.425 402.183 262.125 401.571 262.125 cv
401.571 261.189 mo
402.543 261.189 403.287 261.585 403.815 262.353 cv
404.331 263.133 404.595 264.261 404.595 265.725 cv
404.595 267.201 404.331 268.329 403.815 269.097 cv
403.287 269.865 402.543 270.249 401.571 270.249 cv
400.587 270.249 399.831 269.865 399.315 269.097 cv
398.799 268.329 398.547 267.201 398.547 265.725 cv
398.547 264.261 398.799 263.133 399.315 262.353 cv
399.831 261.585 400.587 261.189 401.571 261.189 cv
f
425.756 256.968 mo
425.756 252.968 li
f
425.756 256.968 mo
425.756 252.968 li
@
425.756 29.88 mo
425.756 33.88 li
f
425.756 29.88 mo
425.756 33.88 li
@
420.271 261.345 mo
424.915 261.345 li
424.915 262.341 li
421.351 262.341 li
421.351 264.489 li
421.519 264.429 421.699 264.381 421.867 264.357 cv
422.035 264.333 422.215 264.309 422.383 264.309 cv
423.355 264.309 424.123 264.585 424.699 265.113 cv
425.275 265.653 425.563 266.373 425.563 267.285 cv
425.563 268.233 425.263 268.965 424.675 269.481 cv
424.087 269.997 423.259 270.249 422.203 270.249 cv
421.831 270.249 421.459 270.213 421.075 270.165 cv
420.691 270.105 420.307 270.021 419.899 269.889 cv
419.899 268.701 li
420.247 268.893 420.607 269.037 420.991 269.133 cv
421.363 269.229 421.759 269.265 422.179 269.265 cv
422.851 269.265 423.391 269.097 423.787 268.737 cv
424.171 268.377 424.375 267.897 424.375 267.285 cv
424.375 266.685 424.171 266.205 423.787 265.845 cv
423.391 265.485 422.851 265.305 422.179 265.305 cv
421.867 265.305 421.543 265.341 421.231 265.413 cv
420.919 265.485 420.595 265.593 420.271 265.737 cv
420.271 261.345 li
f
430.423 262.125 mo
429.811 262.125 429.355 262.425 429.043 263.025 cv
428.731 263.625 428.587 264.525 428.587 265.725 cv
428.587 266.925 428.731 267.825 429.043 268.425 cv
429.355 269.025 429.811 269.325 430.423 269.325 cv
431.035 269.325 431.491 269.025 431.803 268.425 cv
432.103 267.825 432.259 266.925 432.259 265.725 cv
432.259 264.525 432.103 263.625 431.803 263.025 cv
431.491 262.425 431.035 262.125 430.423 262.125 cv
430.423 261.189 mo
431.395 261.189 432.139 261.585 432.667 262.353 cv
433.183 263.133 433.447 264.261 433.447 265.725 cv
433.447 267.201 433.183 268.329 432.667 269.097 cv
432.139 269.865 431.395 270.249 430.423 270.249 cv
429.439 270.249 428.683 269.865 428.167 269.097 cv
427.651 268.329 427.399 267.201 427.399 265.725 cv
427.399 264.261 427.651 263.133 428.167 262.353 cv
428.683 261.585 429.439 261.189 430.423 261.189 cv
f
454.444 256.968 mo
454.444 252.968 li
f
454.444 256.968 mo
454.444 252.968 li
@
454.444 29.88 mo
454.444 33.88 li
f
454.444 29.88 mo
454.444 33.88 li
@
451.584 265.245 mo
451.056 265.245 450.636 265.437 450.324 265.797 cv
450.012 266.157 449.856 266.661 449.856 267.285 cv
449.856 267.921 450.012 268.425 450.324 268.785 cv
450.636 269.145 451.056 269.325 451.584 269.325 cv
452.112 269.325 452.532 269.145 452.844 268.785 cv
453.156 268.425 453.312 267.921 453.312 267.285 cv
453.312 266.661 453.156 266.157 452.844 265.797 cv
452.532 265.437 452.112 265.245 451.584 265.245 cv
453.936 261.537 mo
453.936 262.617 li
453.636 262.473 453.336 262.365 453.036 262.293 cv
452.724 262.221 452.424 262.185 452.136 262.185 cv
451.344 262.185 450.744 262.449 450.336 262.977 cv
449.928 263.505 449.688 264.309 449.64 265.365 cv
449.868 265.029 450.156 264.765 450.504 264.585 cv
450.852 264.405 451.236 264.309 451.656 264.309 cv
452.532 264.309 453.228 264.585 453.732 265.113 cv
454.236 265.641 454.5 266.373 454.5 267.285 cv
454.5 268.185 454.224 268.905 453.696 269.445 cv
453.168 269.985 452.46 270.249 451.584 270.249 cv
450.576 270.249 449.796 269.865 449.268 269.097 cv
448.728 268.329 448.464 267.201 448.464 265.725 cv
448.464 264.345 448.788 263.241 449.448 262.425 cv
450.096 261.609 450.984 261.189 452.088 261.189 cv
452.376 261.189 452.676 261.225 452.988 261.273 cv
453.288 261.333 453.6 261.417 453.936 261.537 cv
f
459.072 262.125 mo
458.46 262.125 458.004 262.425 457.692 263.025 cv
457.38 263.625 457.236 264.525 457.236 265.725 cv
457.236 266.925 457.38 267.825 457.692 268.425 cv
458.004 269.025 458.46 269.325 459.072 269.325 cv
459.684 269.325 460.14 269.025 460.452 268.425 cv
460.752 267.825 460.908 266.925 460.908 265.725 cv
460.908 264.525 460.752 263.625 460.452 263.025 cv
460.14 262.425 459.684 262.125 459.072 262.125 cv
459.072 261.189 mo
460.044 261.189 460.788 261.585 461.316 262.353 cv
461.832 263.133 462.096 264.261 462.096 265.725 cv
462.096 267.201 461.832 268.329 461.316 269.097 cv
460.788 269.865 460.044 270.249 459.072 270.249 cv
458.088 270.249 457.332 269.865 456.816 269.097 cv
456.3 268.329 456.048 267.201 456.048 265.725 cv
456.048 264.261 456.3 263.133 456.816 262.353 cv
457.332 261.585 458.088 261.189 459.072 261.189 cv
f
483.132 256.968 mo
483.132 252.968 li
f
483.132 256.968 mo
483.132 252.968 li
@
483.132 29.88 mo
483.132 33.88 li
f
483.132 29.88 mo
483.132 33.88 li
@
477.366 261.345 mo
482.994 261.345 li
482.994 261.849 li
479.814 270.093 li
478.578 270.093 li
481.566 262.341 li
477.366 262.341 li
477.366 261.345 li
f
487.83 262.125 mo
487.218 262.125 486.762 262.425 486.45 263.025 cv
486.138 263.625 485.994 264.525 485.994 265.725 cv
485.994 266.925 486.138 267.825 486.45 268.425 cv
486.762 269.025 487.218 269.325 487.83 269.325 cv
488.442 269.325 488.898 269.025 489.21 268.425 cv
489.51 267.825 489.666 266.925 489.666 265.725 cv
489.666 264.525 489.51 263.625 489.21 263.025 cv
488.898 262.425 488.442 262.125 487.83 262.125 cv
487.83 261.189 mo
488.802 261.189 489.546 261.585 490.074 262.353 cv
490.59 263.133 490.854 264.261 490.854 265.725 cv
490.854 267.201 490.59 268.329 490.074 269.097 cv
489.546 269.865 488.802 270.249 487.83 270.249 cv
486.846 270.249 486.09 269.865 485.574 269.097 cv
485.058 268.329 484.806 267.201 484.806 265.725 cv
484.806 264.261 485.058 263.133 485.574 262.353 cv
486.09 261.585 486.846 261.189 487.83 261.189 cv
f
511.82 256.968 mo
511.82 252.968 li
f
511.82 256.968 mo
511.82 252.968 li
@
511.82 29.88 mo
511.82 33.88 li
f
511.82 29.88 mo
511.82 33.88 li
@
508.8 265.941 mo
508.236 265.941 507.792 266.097 507.468 266.397 cv
507.144 266.697 506.988 267.105 506.988 267.633 cv
506.988 268.161 507.144 268.581 507.468 268.881 cv
507.792 269.181 508.236 269.325 508.8 269.325 cv
509.352 269.325 509.796 269.181 510.12 268.869 cv
510.444 268.569 510.612 268.161 510.612 267.633 cv
510.612 267.105 510.444 266.697 510.132 266.397 cv
509.808 266.097 509.364 265.941 508.8 265.941 cv
507.612 265.437 mo
507.108 265.317 506.712 265.077 506.424 264.729 cv
506.136 264.381 506.004 263.961 506.004 263.457 cv
506.004 262.761 506.244 262.209 506.748 261.801 cv
507.24 261.393 507.924 261.189 508.8 261.189 cv
509.664 261.189 510.348 261.393 510.852 261.801 cv
511.344 262.209 511.596 262.761 511.596 263.457 cv
511.596 263.961 511.452 264.381 511.164 264.729 cv
510.876 265.077 510.492 265.317 509.988 265.437 cv
510.552 265.569 510.996 265.833 511.32 266.217 cv
511.632 266.601 511.8 267.081 511.8 267.633 cv
511.8 268.485 511.536 269.133 511.02 269.577 cv
510.492 270.033 509.76 270.249 508.8 270.249 cv
507.828 270.249 507.084 270.033 506.568 269.577 cv
506.052 269.133 505.8 268.485 505.8 267.633 cv
505.8 267.081 505.956 266.601 506.28 266.217 cv
506.592 265.833 507.036 265.569 507.612 265.437 cv
507.18 263.565 mo
507.18 264.021 507.312 264.381 507.6 264.633 cv
507.888 264.885 508.284 265.005 508.8 265.005 cv
509.304 265.005 509.7 264.885 509.988 264.633 cv
510.276 264.381 510.42 264.021 510.42 263.565 cv
510.42 263.109 510.276 262.761 509.988 262.509 cv
509.7 262.257 509.304 262.125 508.8 262.125 cv
508.284 262.125 507.888 262.257 507.6 262.509 cv
507.312 262.761 507.18 263.109 507.18 263.565 cv
f
516.432 262.125 mo
515.82 262.125 515.364 262.425 515.052 263.025 cv
514.74 263.625 514.596 264.525 514.596 265.725 cv
514.596 266.925 514.74 267.825 515.052 268.425 cv
515.364 269.025 515.82 269.325 516.432 269.325 cv
517.044 269.325 517.5 269.025 517.812 268.425 cv
518.112 267.825 518.268 266.925 518.268 265.725 cv
518.268 264.525 518.112 263.625 517.812 263.025 cv
517.5 262.425 517.044 262.125 516.432 262.125 cv
516.432 261.189 mo
517.404 261.189 518.148 261.585 518.676 262.353 cv
519.192 263.133 519.456 264.261 519.456 265.725 cv
519.456 267.201 519.192 268.329 518.676 269.097 cv
518.148 269.865 517.404 270.249 516.432 270.249 cv
515.448 270.249 514.692 269.865 514.176 269.097 cv
513.66 268.329 513.408 267.201 513.408 265.725 cv
513.408 264.261 513.66 263.133 514.176 262.353 cv
514.692 261.585 515.448 261.189 516.432 261.189 cv
f
540.508 256.968 mo
540.508 252.968 li
f
540.508 256.968 mo
540.508 252.968 li
@
540.508 29.88 mo
540.508 33.88 li
f
540.508 29.88 mo
540.508 33.88 li
@
534.961 269.913 mo
534.961 268.833 li
535.249 268.977 535.549 269.085 535.861 269.157 cv
536.161 269.229 536.461 269.265 536.761 269.265 cv
537.529 269.265 538.129 269.013 538.537 268.485 cv
538.945 267.957 539.185 267.165 539.257 266.085 cv
539.017 266.421 538.729 266.685 538.393 266.865 cv
538.045 267.045 537.661 267.129 537.241 267.129 cv
536.353 267.129 535.657 266.865 535.153 266.337 cv
534.649 265.809 534.397 265.089 534.397 264.165 cv
534.397 263.277 534.661 262.557 535.189 262.005 cv
535.717 261.465 536.425 261.189 537.313 261.189 cv
538.321 261.189 539.101 261.585 539.629 262.353 cv
540.157 263.133 540.433 264.261 540.433 265.725 cv
540.433 267.117 540.097 268.209 539.449 269.025 cv
538.789 269.841 537.913 270.249 536.809 270.249 cv
536.509 270.249 536.209 270.213 535.909 270.165 cv
535.597 270.117 535.285 270.033 534.961 269.913 cv
537.313 266.205 mo
537.841 266.205 538.261 266.025 538.573 265.665 cv
538.885 265.305 539.041 264.801 539.041 264.165 cv
539.041 263.541 538.885 263.037 538.573 262.677 cv
538.261 262.317 537.841 262.125 537.313 262.125 cv
536.785 262.125 536.365 262.317 536.053 262.677 cv
535.741 263.037 535.585 263.541 535.585 264.165 cv
535.585 264.801 535.741 265.305 536.053 265.665 cv
536.365 266.025 536.785 266.205 537.313 266.205 cv
f
545.089 262.125 mo
544.477 262.125 544.021 262.425 543.709 263.025 cv
543.397 263.625 543.253 264.525 543.253 265.725 cv
543.253 266.925 543.397 267.825 543.709 268.425 cv
544.021 269.025 544.477 269.325 545.089 269.325 cv
545.701 269.325 546.157 269.025 546.469 268.425 cv
546.769 267.825 546.925 266.925 546.925 265.725 cv
546.925 264.525 546.769 263.625 546.469 263.025 cv
546.157 262.425 545.701 262.125 545.089 262.125 cv
545.089 261.189 mo
546.061 261.189 546.805 261.585 547.333 262.353 cv
547.849 263.133 548.113 264.261 548.113 265.725 cv
548.113 267.201 547.849 268.329 547.333 269.097 cv
546.805 269.865 546.061 270.249 545.089 270.249 cv
544.105 270.249 543.349 269.865 542.833 269.097 cv
542.317 268.329 542.065 267.201 542.065 265.725 cv
542.065 264.261 542.317 263.133 542.833 262.353 cv
543.349 261.585 544.105 261.189 545.089 261.189 cv
f
221.224 289.557 mo
220.768 289.197 220.384 288.801 220.072 288.345 cv
219.748 287.889 219.484 287.397 219.28 286.893 cv
219.076 286.389 218.92 285.849 218.824 285.285 cv
218.716 284.733 218.668 284.169 218.668 283.593 cv
218.668 283.017 218.716 282.453 218.824 281.889 cv
218.92 281.337 219.076 280.797 219.292 280.269 cv
219.496 279.753 219.76 279.261 220.084 278.805 cv
220.408 278.349 220.792 277.953 221.224 277.617 cv
221.284 277.593 li
221.392 277.593 li
221.452 277.629 li
221.488 277.701 li
221.464 277.773 li
221.068 278.157 220.744 278.577 220.48 279.009 cv
220.216 279.441 220.012 279.909 219.856 280.401 cv
219.7 280.905 219.592 281.409 219.52 281.937 cv
219.448 282.465 219.412 283.017 219.412 283.593 cv
219.412 286.137 220.084 288.057 221.452 289.377 cv
221.488 289.473 li
221.452 289.545 li
221.392 289.581 li
221.284 289.581 li
221.224 289.557 li
f
223.326 288.561 mo
223.47 288.669 223.65 288.729 223.866 288.729 cv
224.154 288.729 224.382 288.405 224.562 287.781 cv
224.634 287.469 224.838 286.485 225.174 284.781 cv
225.726 281.841 li
224.694 281.841 li
224.61 281.841 224.574 281.793 224.574 281.685 cv
224.598 281.517 224.658 281.421 224.73 281.421 cv
225.798 281.421 li
225.942 280.641 li
225.99 280.401 226.026 280.197 226.074 280.017 cv
226.11 279.849 226.146 279.681 226.194 279.537 cv
226.242 279.393 226.302 279.225 226.398 279.033 cv
226.53 278.769 226.71 278.553 226.95 278.385 cv
227.178 278.217 227.43 278.133 227.706 278.133 cv
227.874 278.133 228.042 278.169 228.21 278.229 cv
228.378 278.301 228.51 278.397 228.618 278.517 cv
228.726 278.649 228.786 278.805 228.786 278.973 cv
228.786 279.189 228.714 279.369 228.582 279.513 cv
228.438 279.657 228.282 279.729 228.09 279.729 cv
227.958 279.729 227.85 279.693 227.754 279.609 cv
227.658 279.537 227.622 279.429 227.622 279.297 cv
227.622 279.129 227.682 278.973 227.802 278.841 cv
227.922 278.709 228.066 278.637 228.246 278.613 cv
228.09 278.505 227.91 278.445 227.694 278.445 cv
227.574 278.445 227.454 278.505 227.346 278.613 cv
227.238 278.733 227.166 278.853 227.142 278.973 cv
227.094 279.189 226.974 279.741 226.806 280.629 cv
226.662 281.421 li
227.898 281.421 li
227.97 281.421 228.018 281.481 228.018 281.577 cv
227.982 281.685 li
227.934 281.805 li
227.862 281.841 li
226.578 281.841 li
226.026 284.769 li
225.954 285.201 225.87 285.633 225.774 286.065 cv
225.678 286.497 225.558 286.941 225.39 287.409 cv
225.222 287.865 225.018 288.261 224.754 288.573 cv
224.49 288.885 224.19 289.041 223.842 289.041 cv
223.566 289.041 223.326 288.957 223.11 288.813 cv
222.894 288.657 222.798 288.453 222.798 288.201 cv
222.798 287.985 222.858 287.805 222.99 287.661 cv
223.122 287.517 223.29 287.445 223.494 287.445 cv
223.614 287.445 223.722 287.481 223.818 287.565 cv
223.914 287.637 223.962 287.745 223.962 287.877 cv
223.962 288.045 223.89 288.201 223.77 288.345 cv
223.638 288.489 223.494 288.561 223.326 288.561 cv
f
228.807 289.581 mo
228.699 289.473 li
228.723 289.401 li
230.091 288.057 230.775 286.137 230.775 283.593 cv
230.775 281.049 230.091 279.117 228.747 277.797 cv
228.699 277.701 li
228.735 277.629 li
228.807 277.593 li
228.915 277.593 li
228.975 277.617 li
229.551 278.073 230.031 278.625 230.415 279.273 cv
230.799 279.921 231.075 280.617 231.255 281.349 cv
231.423 282.081 231.519 282.825 231.519 283.593 cv
231.519 284.169 231.471 284.721 231.375 285.273 cv
231.279 285.825 231.123 286.353 230.919 286.881 cv
230.703 287.409 230.439 287.889 230.127 288.345 cv
229.803 288.801 229.419 289.197 228.975 289.557 cv
228.915 289.581 li
228.807 289.581 li
f
236.398 286.437 mo
236.422 286.329 li
236.47 286.221 li
236.566 286.173 li
237.25 286.173 237.706 286.161 237.934 286.113 cv
238.15 286.065 238.27 285.945 238.318 285.765 cv
239.962 279.177 li
239.986 279.081 240.01 278.997 240.01 278.913 cv
240.01 278.853 239.866 278.817 239.59 278.817 cv
238.894 278.817 li
238.354 278.817 237.934 278.901 237.646 279.069 cv
237.358 279.237 237.142 279.453 237.01 279.717 cv
236.866 279.981 236.698 280.425 236.482 281.037 cv
236.362 281.145 li
236.254 281.145 li
236.17 281.145 236.134 281.097 236.134 280.989 cv
236.986 278.505 li
237.106 278.397 li
244.198 278.397 li
244.27 278.397 244.318 278.457 244.318 278.553 cv
243.922 281.037 li
243.874 281.109 li
243.802 281.145 li
243.694 281.145 li
243.61 281.145 243.574 281.097 243.574 280.989 cv
243.658 280.425 243.706 280.029 243.706 279.789 cv
243.706 279.513 243.646 279.297 243.526 279.153 cv
243.406 279.009 243.25 278.925 243.07 278.877 cv
242.878 278.841 242.638 278.817 242.338 278.817 cv
241.63 278.817 li
241.414 278.817 241.27 278.841 241.198 278.877 cv
241.126 278.925 241.054 279.033 241.006 279.225 cv
239.362 285.813 li
239.35 285.861 li
239.338 285.921 li
239.338 286.029 239.398 286.089 239.518 286.113 cv
239.722 286.161 240.166 286.173 240.85 286.173 cv
240.922 286.173 240.97 286.233 240.97 286.329 cv
240.934 286.449 240.91 286.521 240.898 286.545 cv
240.766 286.593 li
236.518 286.593 li
236.434 286.593 236.398 286.545 236.398 286.437 cv
f
243.49 286.377 mo
243.502 286.269 li
245.242 279.333 li
245.266 279.201 245.29 279.093 245.302 279.009 cv
245.302 278.889 245.038 278.817 244.522 278.817 cv
244.438 278.817 244.402 278.769 244.402 278.661 cv
244.426 278.553 li
244.474 278.445 li
244.57 278.397 li
246.19 278.265 li
246.226 278.265 li
246.262 278.301 li
246.31 278.325 li
246.334 278.421 li
245.398 282.165 li
245.878 281.589 246.466 281.289 247.15 281.289 cv
247.426 281.289 247.666 281.349 247.87 281.445 cv
248.074 281.541 248.23 281.697 248.35 281.889 cv
248.47 282.081 248.53 282.321 248.53 282.585 cv
248.53 282.921 248.458 283.317 248.314 283.773 cv
248.17 284.241 247.978 284.757 247.762 285.333 cv
247.642 285.597 247.594 285.837 247.594 286.053 cv
247.594 286.293 247.678 286.413 247.87 286.413 cv
248.182 286.413 248.434 286.245 248.65 285.909 cv
248.854 285.573 248.998 285.213 249.094 284.829 cv
249.19 284.757 li
249.334 284.757 li
249.406 284.793 li
249.442 284.865 li
249.43 284.901 li
249.358 285.189 249.25 285.477 249.106 285.753 cv
248.962 286.041 248.794 286.269 248.59 286.449 cv
248.374 286.617 248.134 286.713 247.846 286.713 cv
247.558 286.713 247.318 286.617 247.126 286.437 cv
246.922 286.245 246.826 286.017 246.826 285.729 cv
246.826 285.585 246.85 285.429 246.922 285.261 cv
247.138 284.661 247.33 284.133 247.486 283.653 cv
247.63 283.185 247.714 282.765 247.714 282.405 cv
247.714 282.177 247.666 281.985 247.57 281.829 cv
247.474 281.685 247.33 281.601 247.126 281.601 cv
246.694 281.601 246.31 281.733 245.998 281.997 cv
245.674 282.261 245.398 282.609 245.17 283.041 cv
244.354 286.317 li
244.318 286.437 244.258 286.533 244.174 286.605 cv
244.078 286.677 243.982 286.713 243.862 286.713 cv
243.754 286.713 243.67 286.677 243.598 286.617 cv
243.526 286.557 243.49 286.473 243.49 286.377 cv
f
252.18 286.713 mo
251.796 286.713 251.46 286.617 251.172 286.425 cv
250.884 286.233 250.668 285.957 250.524 285.621 cv
250.368 285.285 250.296 284.937 250.296 284.553 cv
250.296 283.989 250.44 283.449 250.728 282.945 cv
251.016 282.441 251.4 282.045 251.892 281.745 cv
252.384 281.445 252.912 281.289 253.476 281.289 cv
253.812 281.289 254.112 281.385 254.376 281.565 cv
254.628 281.745 254.76 281.997 254.76 282.321 cv
254.76 282.789 254.568 283.137 254.208 283.353 cv
253.836 283.581 253.416 283.725 252.96 283.773 cv
252.504 283.821 251.988 283.845 251.436 283.845 cv
251.4 283.845 li
251.268 284.325 251.208 284.733 251.208 285.069 cv
251.208 285.429 251.28 285.741 251.448 286.005 cv
251.616 286.281 251.868 286.413 252.204 286.413 cv
252.684 286.413 253.14 286.305 253.584 286.089 cv
254.016 285.873 254.376 285.561 254.652 285.177 cv
254.748 285.141 li
254.868 285.213 li
254.928 285.333 li
254.904 285.405 li
254.616 285.813 254.22 286.137 253.728 286.365 cv
253.224 286.593 252.708 286.713 252.18 286.713 cv
251.472 283.533 mo
251.928 283.533 252.36 283.521 252.756 283.473 cv
253.152 283.425 253.512 283.317 253.836 283.149 cv
254.148 282.981 254.316 282.705 254.316 282.333 cv
254.316 282.189 254.268 282.057 254.184 281.949 cv
254.1 281.841 253.992 281.757 253.872 281.697 cv
253.74 281.637 253.608 281.601 253.464 281.601 cv
253.128 281.601 252.816 281.697 252.552 281.877 cv
252.276 282.069 252.048 282.309 251.88 282.597 cv
251.7 282.897 251.568 283.209 251.472 283.533 cv
f
259.431 286.389 mo
259.443 286.281 li
260.343 282.705 li
260.391 282.489 260.427 282.285 260.427 282.117 cv
260.427 281.781 260.307 281.601 260.079 281.601 cv
259.827 281.601 259.635 281.757 259.515 282.057 cv
259.395 282.357 259.275 282.729 259.167 283.185 cv
259.131 283.245 li
259.071 283.257 li
258.927 283.257 li
258.855 283.221 li
258.831 283.137 li
258.915 282.789 258.999 282.489 259.083 282.249 cv
259.155 282.009 259.287 281.793 259.455 281.589 cv
259.623 281.397 259.827 281.289 260.091 281.289 cv
260.379 281.289 260.643 281.385 260.883 281.577 cv
261.111 281.769 261.231 282.009 261.231 282.297 cv
261.471 281.985 261.747 281.745 262.071 281.565 cv
262.383 281.385 262.731 281.289 263.091 281.289 cv
263.367 281.289 263.607 281.349 263.823 281.445 cv
264.027 281.541 264.183 281.697 264.303 281.889 cv
264.423 282.081 264.483 282.321 264.483 282.585 cv
264.483 282.921 264.399 283.317 264.255 283.773 cv
264.111 284.241 263.931 284.757 263.715 285.333 cv
263.595 285.597 263.547 285.837 263.547 286.053 cv
263.547 286.293 263.631 286.413 263.823 286.413 cv
264.135 286.413 264.387 286.245 264.603 285.909 cv
264.807 285.573 264.951 285.213 265.047 284.829 cv
265.143 284.757 li
265.287 284.757 li
265.359 284.793 li
265.395 284.865 li
265.383 284.901 li
265.275 285.357 265.083 285.777 264.819 286.149 cv
264.543 286.533 264.207 286.713 263.799 286.713 cv
263.511 286.713 263.271 286.617 263.079 286.437 cv
262.875 286.245 262.779 286.017 262.779 285.729 cv
262.779 285.585 262.803 285.429 262.875 285.261 cv
262.971 284.997 263.079 284.685 263.211 284.325 cv
263.343 283.965 263.451 283.629 263.535 283.293 cv
263.619 282.957 263.667 282.669 263.667 282.405 cv
263.667 282.189 263.619 281.997 263.523 281.841 cv
263.427 281.685 263.283 281.601 263.067 281.601 cv
262.767 281.601 262.491 281.673 262.251 281.793 cv
262.011 281.925 261.795 282.093 261.615 282.309 cv
261.423 282.525 261.255 282.777 261.111 283.065 cv
260.295 286.329 li
260.271 286.449 260.211 286.533 260.115 286.605 cv
260.019 286.677 259.911 286.713 259.791 286.713 cv
259.695 286.713 259.611 286.677 259.539 286.629 cv
259.467 286.581 259.431 286.497 259.431 286.389 cv
f
266.98 285.285 mo
266.98 285.021 267.016 284.757 267.088 284.481 cv
267.16 284.217 267.256 283.905 267.376 283.569 cv
267.496 283.233 267.616 282.933 267.712 282.681 cv
267.808 282.393 267.868 282.153 267.868 281.961 cv
267.868 281.721 267.772 281.601 267.604 281.601 cv
267.292 281.601 267.028 281.769 266.824 282.093 cv
266.608 282.429 266.464 282.789 266.368 283.185 cv
266.272 283.257 li
266.128 283.257 li
266.032 283.149 li
266.032 283.113 li
266.152 282.633 266.356 282.213 266.62 281.841 cv
266.884 281.481 267.22 281.289 267.628 281.289 cv
267.916 281.289 268.156 281.385 268.348 281.577 cv
268.54 281.769 268.648 281.997 268.648 282.285 cv
268.648 282.441 268.612 282.597 268.552 282.753 cv
268.504 282.849 268.42 283.065 268.3 283.389 cv
268.18 283.725 268.084 283.989 268.024 284.205 cv
267.952 284.421 267.904 284.637 267.856 284.841 cv
267.808 285.057 267.796 285.261 267.796 285.465 cv
267.796 285.729 267.844 285.957 267.964 286.137 cv
268.072 286.329 268.252 286.413 268.516 286.413 cv
269.02 286.413 269.476 286.101 269.86 285.465 cv
269.884 285.381 li
269.896 285.285 li
270.76 281.805 li
270.784 281.709 270.844 281.613 270.94 281.541 cv
271.036 281.469 271.144 281.421 271.264 281.421 cv
271.36 281.421 271.444 281.457 271.516 281.517 cv
271.588 281.577 271.624 281.661 271.624 281.757 cv
271.612 281.853 li
270.748 285.309 li
270.688 285.549 270.664 285.753 270.664 285.897 cv
270.664 286.245 270.772 286.413 271.012 286.413 cv
271.264 286.413 271.456 286.257 271.588 285.933 cv
271.708 285.621 271.816 285.249 271.912 284.829 cv
272.008 284.757 li
272.152 284.757 li
272.224 284.805 li
272.26 284.877 li
272.164 285.225 272.08 285.525 272.008 285.765 cv
271.924 286.005 271.792 286.233 271.624 286.425 cv
271.456 286.617 271.24 286.713 270.988 286.713 cv
270.724 286.713 270.496 286.641 270.304 286.521 cv
270.1 286.389 269.968 286.197 269.896 285.957 cv
269.704 286.197 269.5 286.377 269.26 286.509 cv
269.02 286.641 268.756 286.713 268.492 286.713 cv
268.024 286.713 267.652 286.593 267.388 286.341 cv
267.112 286.101 266.98 285.741 266.98 285.285 cv
f
273.493 286.389 mo
273.505 286.281 li
274.405 282.705 li
274.453 282.489 274.489 282.285 274.489 282.117 cv
274.489 281.781 274.369 281.601 274.141 281.601 cv
273.889 281.601 273.697 281.757 273.577 282.057 cv
273.457 282.357 273.337 282.729 273.229 283.185 cv
273.193 283.245 li
273.133 283.257 li
272.989 283.257 li
272.917 283.221 li
272.893 283.137 li
272.977 282.789 273.061 282.489 273.145 282.249 cv
273.217 282.009 273.349 281.793 273.517 281.589 cv
273.685 281.397 273.889 281.289 274.153 281.289 cv
274.441 281.289 274.705 281.385 274.945 281.577 cv
275.173 281.769 275.293 282.009 275.293 282.297 cv
275.533 281.985 275.809 281.745 276.133 281.565 cv
276.445 281.385 276.793 281.289 277.153 281.289 cv
277.525 281.289 277.849 281.385 278.125 281.577 cv
278.401 281.769 278.545 282.045 278.545 282.405 cv
278.785 282.057 279.073 281.781 279.409 281.589 cv
279.733 281.397 280.093 281.289 280.489 281.289 cv
280.897 281.289 281.233 281.409 281.485 281.625 cv
281.737 281.853 281.869 282.177 281.869 282.585 cv
281.869 282.921 281.785 283.317 281.641 283.773 cv
281.497 284.241 281.317 284.757 281.101 285.333 cv
280.981 285.621 280.933 285.861 280.933 286.053 cv
280.933 286.293 281.017 286.413 281.209 286.413 cv
281.521 286.413 281.773 286.245 281.989 285.909 cv
282.193 285.573 282.337 285.213 282.433 284.829 cv
282.529 284.757 li
282.673 284.757 li
282.745 284.793 li
282.781 284.865 li
282.769 284.901 li
282.649 285.357 282.457 285.777 282.193 286.149 cv
281.929 286.533 281.593 286.713 281.185 286.713 cv
280.897 286.713 280.657 286.617 280.465 286.437 cv
280.261 286.245 280.165 286.017 280.165 285.729 cv
280.165 285.597 280.189 285.441 280.261 285.261 cv
280.477 284.661 280.669 284.133 280.825 283.653 cv
280.969 283.185 281.053 282.765 281.053 282.405 cv
281.053 282.189 281.005 281.997 280.921 281.841 cv
280.825 281.685 280.681 281.601 280.465 281.601 cv
280.033 281.601 279.649 281.745 279.325 282.009 cv
279.001 282.273 278.725 282.633 278.497 283.065 cv
278.461 283.245 li
277.693 286.329 li
277.657 286.449 277.597 286.533 277.501 286.605 cv
277.405 286.677 277.297 286.713 277.189 286.713 cv
277.093 286.713 277.009 286.677 276.937 286.629 cv
276.865 286.581 276.829 286.497 276.829 286.389 cv
276.841 286.281 li
277.609 283.221 li
277.681 282.897 277.729 282.621 277.729 282.405 cv
277.729 282.189 277.681 281.997 277.585 281.841 cv
277.489 281.685 277.345 281.601 277.129 281.601 cv
276.829 281.601 276.553 281.673 276.313 281.793 cv
276.073 281.925 275.857 282.093 275.677 282.309 cv
275.485 282.525 275.317 282.777 275.173 283.065 cv
274.357 286.329 li
274.333 286.449 274.273 286.533 274.177 286.605 cv
274.081 286.677 273.973 286.713 273.853 286.713 cv
273.757 286.713 273.673 286.677 273.601 286.629 cv
273.529 286.581 273.493 286.497 273.493 286.389 cv
f
285.18 286.713 mo
284.688 286.713 284.304 286.533 284.04 286.161 cv
283.776 285.789 283.644 285.345 283.644 284.829 cv
283.644 284.757 283.656 284.613 283.692 284.397 cv
283.728 284.181 283.752 284.049 283.752 283.989 cv
284.916 279.333 li
284.94 279.201 284.964 279.093 284.976 279.009 cv
284.976 278.889 284.712 278.817 284.196 278.817 cv
284.112 278.817 284.076 278.769 284.076 278.661 cv
284.1 278.553 li
284.148 278.445 li
284.244 278.397 li
285.864 278.265 li
285.96 278.265 286.008 278.325 286.008 278.421 cv
285.12 281.961 li
285.576 281.517 286.032 281.289 286.488 281.289 cv
286.824 281.289 287.124 281.385 287.364 281.565 cv
287.604 281.745 287.796 281.985 287.916 282.273 cv
288.036 282.561 288.096 282.873 288.096 283.209 cv
288.096 283.593 288.012 284.001 287.868 284.409 cv
287.712 284.817 287.508 285.201 287.244 285.561 cv
286.98 285.921 286.668 286.197 286.308 286.401 cv
285.948 286.605 285.576 286.713 285.18 286.713 cv
285.204 286.413 mo
285.468 286.413 285.732 286.305 285.972 286.077 cv
286.212 285.849 286.404 285.585 286.548 285.297 cv
286.704 284.985 286.848 284.553 286.992 284.001 cv
287.136 283.449 287.208 283.017 287.208 282.681 cv
287.208 282.393 287.148 282.141 287.028 281.925 cv
286.908 281.709 286.716 281.601 286.464 281.601 cv
286.176 281.601 285.9 281.709 285.636 281.925 cv
285.372 282.141 285.132 282.393 284.94 282.681 cv
284.604 284.037 li
284.472 284.541 284.4 284.949 284.4 285.249 cv
284.4 285.561 284.46 285.825 284.592 286.065 cv
284.724 286.305 284.928 286.413 285.204 286.413 cv
f
290.667 286.713 mo
290.283 286.713 289.947 286.617 289.659 286.425 cv
289.371 286.233 289.155 285.957 289.011 285.621 cv
288.855 285.285 288.783 284.937 288.783 284.553 cv
288.783 283.989 288.927 283.449 289.215 282.945 cv
289.503 282.441 289.887 282.045 290.379 281.745 cv
290.871 281.445 291.399 281.289 291.963 281.289 cv
292.299 281.289 292.599 281.385 292.863 281.565 cv
293.115 281.745 293.247 281.997 293.247 282.321 cv
293.247 282.789 293.055 283.137 292.695 283.353 cv
292.323 283.581 291.903 283.725 291.447 283.773 cv
290.991 283.821 290.475 283.845 289.923 283.845 cv
289.887 283.845 li
289.755 284.325 289.695 284.733 289.695 285.069 cv
289.695 285.429 289.767 285.741 289.935 286.005 cv
290.103 286.281 290.355 286.413 290.691 286.413 cv
291.171 286.413 291.627 286.305 292.071 286.089 cv
292.503 285.873 292.863 285.561 293.139 285.177 cv
293.235 285.141 li
293.355 285.213 li
293.415 285.333 li
293.391 285.405 li
293.103 285.813 292.707 286.137 292.215 286.365 cv
291.711 286.593 291.195 286.713 290.667 286.713 cv
289.959 283.533 mo
290.415 283.533 290.847 283.521 291.243 283.473 cv
291.639 283.425 291.999 283.317 292.323 283.149 cv
292.635 282.981 292.803 282.705 292.803 282.333 cv
292.803 282.189 292.755 282.057 292.671 281.949 cv
292.587 281.841 292.479 281.757 292.359 281.697 cv
292.227 281.637 292.095 281.601 291.951 281.601 cv
291.615 281.601 291.303 281.697 291.039 281.877 cv
290.763 282.069 290.535 282.309 290.367 282.597 cv
290.187 282.897 290.055 283.209 289.959 283.533 cv
f
294.757 286.389 mo
294.769 286.281 li
295.669 282.705 li
295.717 282.489 295.753 282.285 295.753 282.117 cv
295.753 281.781 295.633 281.601 295.405 281.601 cv
295.153 281.601 294.961 281.757 294.841 282.057 cv
294.721 282.357 294.601 282.729 294.493 283.185 cv
294.457 283.245 li
294.397 283.257 li
294.253 283.257 li
294.181 283.221 li
294.157 283.137 li
294.241 282.789 294.325 282.489 294.409 282.249 cv
294.481 282.009 294.613 281.793 294.781 281.589 cv
294.949 281.397 295.153 281.289 295.417 281.289 cv
295.693 281.289 295.933 281.373 296.149 281.529 cv
296.353 281.697 296.485 281.901 296.533 282.165 cv
296.725 281.901 296.953 281.697 297.217 281.529 cv
297.481 281.373 297.769 281.289 298.081 281.289 cv
298.333 281.289 298.561 281.373 298.753 281.517 cv
298.945 281.661 299.041 281.865 299.041 282.117 cv
299.041 282.321 298.969 282.501 298.849 282.645 cv
298.717 282.801 298.549 282.873 298.345 282.873 cv
298.213 282.873 298.105 282.837 298.021 282.753 cv
297.925 282.681 297.889 282.573 297.889 282.441 cv
297.889 282.273 297.949 282.117 298.081 281.973 cv
298.201 281.829 298.357 281.757 298.525 281.757 cv
298.393 281.661 298.237 281.601 298.057 281.601 cv
297.709 281.601 297.409 281.733 297.157 281.973 cv
296.905 282.213 296.677 282.525 296.473 282.897 cv
295.621 286.329 li
295.597 286.449 295.537 286.533 295.441 286.605 cv
295.345 286.677 295.237 286.713 295.117 286.713 cv
295.021 286.713 294.937 286.677 294.865 286.629 cv
294.793 286.581 294.757 286.497 294.757 286.389 cv
f
304.819 286.713 mo
304.436 286.713 304.099 286.617 303.811 286.449 cv
303.512 286.281 303.284 286.041 303.128 285.729 cv
302.96 285.429 302.888 285.081 302.888 284.697 cv
302.888 284.157 303.031 283.617 303.344 283.089 cv
303.643 282.561 304.039 282.129 304.543 281.793 cv
305.048 281.457 305.576 281.289 306.128 281.289 cv
306.415 281.289 306.68 281.349 306.919 281.445 cv
307.147 281.541 307.352 281.685 307.52 281.865 cv
307.688 282.057 307.819 282.273 307.915 282.513 cv
308.012 282.765 308.06 283.029 308.06 283.317 cv
308.06 283.737 307.964 284.145 307.796 284.553 cv
307.616 284.961 307.375 285.321 307.076 285.657 cv
306.763 285.993 306.415 286.245 306.02 286.437 cv
305.624 286.617 305.228 286.713 304.819 286.713 cv
304.844 286.413 mo
305.203 286.413 305.527 286.293 305.815 286.053 cv
306.104 285.813 306.355 285.501 306.548 285.129 cv
306.74 284.769 306.884 284.373 306.979 283.965 cv
307.076 283.557 307.135 283.185 307.135 282.849 cv
307.135 282.513 307.039 282.213 306.871 281.973 cv
306.703 281.733 306.44 281.601 306.104 281.601 cv
305.635 281.601 305.228 281.805 304.88 282.201 cv
304.52 282.609 304.255 283.089 304.076 283.641 cv
303.896 284.193 303.811 284.709 303.811 285.165 cv
303.811 285.513 303.896 285.813 304.076 286.053 cv
304.255 286.293 304.508 286.413 304.844 286.413 cv
f
309.378 288.561 mo
309.522 288.669 309.702 288.729 309.918 288.729 cv
310.206 288.729 310.434 288.405 310.614 287.781 cv
310.686 287.469 310.89 286.485 311.226 284.781 cv
311.778 281.841 li
310.746 281.841 li
310.662 281.841 310.626 281.793 310.626 281.685 cv
310.65 281.517 310.71 281.421 310.782 281.421 cv
311.85 281.421 li
311.994 280.641 li
312.042 280.401 312.078 280.197 312.126 280.017 cv
312.162 279.849 312.198 279.681 312.246 279.537 cv
312.294 279.393 312.354 279.225 312.45 279.033 cv
312.582 278.769 312.762 278.553 313.002 278.385 cv
313.23 278.217 313.482 278.133 313.758 278.133 cv
313.926 278.133 314.094 278.169 314.262 278.229 cv
314.43 278.301 314.562 278.397 314.67 278.517 cv
314.778 278.649 314.838 278.805 314.838 278.973 cv
314.838 279.189 314.766 279.369 314.634 279.513 cv
314.49 279.657 314.334 279.729 314.142 279.729 cv
314.01 279.729 313.902 279.693 313.806 279.609 cv
313.71 279.537 313.674 279.429 313.674 279.297 cv
313.674 279.129 313.734 278.973 313.854 278.841 cv
313.974 278.709 314.118 278.637 314.298 278.613 cv
314.142 278.505 313.962 278.445 313.746 278.445 cv
313.626 278.445 313.506 278.505 313.398 278.613 cv
313.29 278.733 313.218 278.853 313.194 278.973 cv
313.146 279.189 313.026 279.741 312.858 280.629 cv
312.714 281.421 li
313.95 281.421 li
314.022 281.421 314.07 281.481 314.07 281.577 cv
314.034 281.685 li
313.986 281.805 li
313.914 281.841 li
312.63 281.841 li
312.078 284.769 li
312.006 285.201 311.922 285.633 311.826 286.065 cv
311.73 286.497 311.61 286.941 311.442 287.409 cv
311.274 287.865 311.07 288.261 310.806 288.573 cv
310.542 288.885 310.242 289.041 309.894 289.041 cv
309.618 289.041 309.378 288.957 309.162 288.813 cv
308.946 288.657 308.85 288.453 308.85 288.201 cv
308.85 287.985 308.91 287.805 309.042 287.661 cv
309.174 287.517 309.342 287.445 309.546 287.445 cv
309.666 287.445 309.774 287.481 309.87 287.565 cv
309.966 287.637 310.014 287.745 310.014 287.877 cv
310.014 288.045 309.942 288.201 309.822 288.345 cv
309.69 288.489 309.546 288.561 309.378 288.561 cv
f
317.852 286.593 mo
317.768 286.593 317.732 286.545 317.732 286.437 cv
317.756 286.341 li
317.792 286.221 li
317.888 286.173 li
318.644 286.173 319.088 285.933 319.22 285.441 cv
320.78 279.177 li
320.804 279.009 li
320.804 278.925 320.756 278.877 320.66 278.865 cv
320.504 278.841 320.216 278.817 319.796 278.817 cv
319.712 278.817 319.676 278.769 319.676 278.661 cv
319.7 278.553 li
319.748 278.445 li
319.832 278.397 li
321.944 278.397 li
322.1 278.529 li
323.036 285.405 li
327.404 278.529 li
327.452 278.445 327.536 278.397 327.632 278.397 cv
329.672 278.397 li
329.744 278.397 329.792 278.457 329.792 278.553 cv
329.756 278.661 li
329.708 278.781 li
329.636 278.817 li
329.144 278.817 328.808 278.853 328.616 278.901 cv
328.508 278.937 328.436 279.045 328.388 279.225 cv
326.744 285.813 li
326.72 285.981 li
326.732 286.065 li
326.768 286.101 li
326.864 286.125 li
327.008 286.161 327.296 286.173 327.728 286.173 cv
327.8 286.173 327.848 286.233 327.848 286.329 cv
327.812 286.449 327.788 286.521 327.776 286.545 cv
327.644 286.593 li
324.512 286.593 li
324.428 286.593 324.392 286.545 324.392 286.437 cv
324.416 286.329 li
324.464 286.221 li
324.548 286.173 li
325.028 286.173 325.376 286.149 325.568 286.089 cv
325.664 286.065 325.748 285.957 325.796 285.765 cv
327.524 278.817 li
322.676 286.461 li
322.628 286.557 322.544 286.593 322.436 286.593 cv
322.328 286.593 322.268 286.557 322.268 286.461 cv
321.248 278.913 li
319.604 285.489 li
319.58 285.573 li
319.568 285.669 li
319.568 285.885 319.652 286.017 319.832 286.077 cv
320.012 286.149 320.24 286.173 320.504 286.173 cv
320.576 286.173 320.624 286.233 320.624 286.329 cv
320.6 286.437 320.576 286.509 320.552 286.545 cv
320.42 286.593 li
317.852 286.593 li
f
329.447 286.593 mo
329.363 286.593 329.327 286.545 329.327 286.437 cv
329.35 286.329 li
329.398 286.221 li
329.483 286.173 li
329.962 286.173 330.311 286.149 330.503 286.089 cv
330.599 286.065 330.682 285.957 330.73 285.765 cv
332.375 279.177 li
332.398 279.009 li
332.398 278.925 332.35 278.877 332.255 278.865 cv
332.099 278.841 331.811 278.817 331.391 278.817 cv
331.307 278.817 331.271 278.769 331.271 278.661 cv
331.294 278.553 li
331.342 278.445 li
331.427 278.397 li
337.763 278.397 li
337.835 278.397 337.883 278.457 337.883 278.553 cv
337.595 281.037 li
337.547 281.109 li
337.475 281.145 li
337.367 281.145 li
337.283 281.145 337.247 281.097 337.247 280.989 cv
337.294 280.629 337.319 280.341 337.319 280.101 cv
337.319 279.705 337.223 279.417 337.055 279.225 cv
336.887 279.033 336.671 278.925 336.406 278.877 cv
336.143 278.841 335.783 278.817 335.327 278.817 cv
334.043 278.817 li
333.827 278.817 333.682 278.841 333.611 278.877 cv
333.539 278.913 333.467 279.033 333.419 279.225 cv
332.651 282.285 li
333.551 282.285 li
333.839 282.285 334.079 282.273 334.271 282.237 cv
334.451 282.213 334.607 282.153 334.727 282.057 cv
334.846 281.973 334.943 281.841 335.027 281.673 cv
335.099 281.505 335.182 281.277 335.255 280.989 cv
335.375 280.881 li
335.483 280.881 li
335.555 280.881 335.603 280.941 335.603 281.037 cv
334.871 284.001 li
334.751 284.109 li
334.643 284.109 li
334.559 284.109 334.523 284.061 334.523 283.953 cv
334.57 283.749 li
334.583 283.701 334.595 283.617 334.618 283.509 cv
334.63 283.413 334.643 283.317 334.643 283.233 cv
334.643 283.005 334.535 282.861 334.331 282.801 cv
334.126 282.741 333.863 282.705 333.539 282.705 cv
332.555 282.705 li
331.775 285.813 li
331.751 285.933 li
331.751 286.029 331.775 286.089 331.835 286.089 cv
332.039 286.149 332.447 286.173 333.059 286.173 cv
333.13 286.173 333.178 286.233 333.178 286.329 cv
333.143 286.449 333.118 286.521 333.107 286.545 cv
332.975 286.593 li
329.447 286.593 li
f
337.331 286.845 mo
337.259 286.797 li
337.235 286.725 li
337.931 283.941 li
338.027 283.869 li
338.171 283.869 li
338.243 283.905 li
338.267 283.989 li
338.195 284.265 338.171 284.505 338.171 284.721 cv
338.171 285.309 338.363 285.741 338.759 286.017 cv
339.155 286.305 339.659 286.437 340.271 286.437 cv
340.535 286.437 340.787 286.377 341.039 286.245 cv
341.291 286.125 341.519 285.957 341.711 285.741 cv
341.903 285.537 342.047 285.309 342.167 285.045 cv
342.275 284.793 342.335 284.529 342.335 284.265 cv
342.335 283.989 342.251 283.737 342.107 283.521 cv
341.963 283.305 341.759 283.161 341.495 283.089 cv
340.031 282.705 li
339.635 282.609 339.323 282.393 339.083 282.069 cv
338.843 281.757 338.735 281.397 338.735 280.989 cv
338.735 280.509 338.879 280.053 339.167 279.609 cv
339.455 279.165 339.827 278.805 340.283 278.541 cv
340.739 278.277 341.207 278.133 341.687 278.133 cv
342.047 278.133 342.383 278.205 342.695 278.337 cv
342.995 278.481 343.235 278.685 343.403 278.973 cv
344.087 278.169 li
344.171 278.133 li
344.243 278.133 li
344.315 278.181 li
344.351 278.253 li
343.655 281.037 li
343.559 281.121 li
343.415 281.121 li
343.343 281.121 343.307 281.085 343.307 280.989 cv
343.343 280.737 343.367 280.521 343.367 280.329 cv
343.367 279.969 343.295 279.645 343.175 279.369 cv
343.043 279.093 342.851 278.877 342.599 278.733 cv
342.335 278.589 342.023 278.517 341.651 278.517 cv
341.327 278.517 341.003 278.613 340.691 278.793 cv
340.379 278.985 340.115 279.225 339.923 279.525 cv
339.731 279.837 339.635 280.149 339.635 280.473 cv
339.635 280.737 339.707 280.965 339.863 281.157 cv
340.007 281.361 340.211 281.493 340.463 281.565 cv
341.927 281.949 li
342.191 282.021 342.419 282.153 342.611 282.321 cv
342.803 282.501 342.959 282.717 343.067 282.957 cv
343.163 283.197 343.223 283.461 343.223 283.749 cv
343.223 284.133 343.139 284.517 342.983 284.877 cv
342.815 285.249 342.599 285.585 342.311 285.885 cv
342.023 286.197 341.687 286.425 341.327 286.593 cv
340.967 286.761 340.595 286.845 340.223 286.845 cv
339.263 286.845 338.579 286.569 338.171 286.017 cv
337.499 286.809 li
337.415 286.845 li
337.331 286.845 li
f
348.049 285.729 mo
348.049 285.585 348.073 285.429 348.145 285.261 cv
349.117 282.681 li
349.213 282.393 349.273 282.153 349.273 281.961 cv
349.273 281.721 349.177 281.601 349.009 281.601 cv
348.697 281.601 348.433 281.769 348.229 282.093 cv
348.013 282.429 347.869 282.789 347.773 283.185 cv
347.677 283.257 li
347.533 283.257 li
347.437 283.149 li
347.437 283.113 li
347.557 282.633 347.761 282.213 348.025 281.841 cv
348.289 281.481 348.625 281.289 349.033 281.289 cv
349.321 281.289 349.561 281.385 349.753 281.577 cv
349.945 281.769 350.053 281.997 350.053 282.285 cv
350.053 282.441 350.017 282.597 349.957 282.753 cv
348.985 285.333 li
348.865 285.597 348.817 285.837 348.817 286.053 cv
348.817 286.293 348.901 286.413 349.093 286.413 cv
349.405 286.413 349.657 286.245 349.873 285.909 cv
350.077 285.573 350.221 285.213 350.317 284.829 cv
350.413 284.757 li
350.557 284.757 li
350.629 284.793 li
350.665 284.865 li
350.653 284.901 li
350.533 285.357 350.341 285.777 350.077 286.149 cv
349.801 286.533 349.465 286.713 349.069 286.713 cv
348.781 286.713 348.541 286.617 348.349 286.437 cv
348.145 286.245 348.049 286.017 348.049 285.729 cv
349.405 279.321 mo
349.405 279.153 349.465 279.009 349.609 278.865 cv
349.753 278.733 349.909 278.661 350.077 278.661 cv
350.209 278.661 350.317 278.709 350.413 278.793 cv
350.497 278.877 350.545 278.985 350.545 279.105 cv
350.545 279.285 350.473 279.441 350.329 279.573 cv
350.185 279.717 350.029 279.777 349.861 279.777 cv
349.729 279.777 349.621 279.741 349.537 279.645 cv
349.441 279.561 349.405 279.453 349.405 279.321 cv
f
352.168 286.389 mo
352.18 286.281 li
353.08 282.705 li
353.128 282.489 353.164 282.285 353.164 282.117 cv
353.164 281.781 353.044 281.601 352.816 281.601 cv
352.564 281.601 352.372 281.757 352.252 282.057 cv
352.132 282.357 352.012 282.729 351.904 283.185 cv
351.868 283.245 li
351.808 283.257 li
351.664 283.257 li
351.592 283.221 li
351.568 283.137 li
351.652 282.789 351.736 282.489 351.82 282.249 cv
351.892 282.009 352.024 281.793 352.192 281.589 cv
352.36 281.397 352.564 281.289 352.828 281.289 cv
353.116 281.289 353.38 281.385 353.62 281.577 cv
353.848 281.769 353.968 282.009 353.968 282.297 cv
354.208 281.985 354.484 281.745 354.808 281.565 cv
355.12 281.385 355.468 281.289 355.828 281.289 cv
356.104 281.289 356.344 281.349 356.56 281.445 cv
356.764 281.541 356.92 281.697 357.04 281.889 cv
357.16 282.081 357.22 282.321 357.22 282.585 cv
357.22 282.921 357.136 283.317 356.992 283.773 cv
356.848 284.241 356.668 284.757 356.452 285.333 cv
356.332 285.597 356.284 285.837 356.284 286.053 cv
356.284 286.293 356.368 286.413 356.56 286.413 cv
356.872 286.413 357.124 286.245 357.34 285.909 cv
357.544 285.573 357.688 285.213 357.784 284.829 cv
357.88 284.757 li
358.024 284.757 li
358.096 284.793 li
358.132 284.865 li
358.12 284.901 li
358.012 285.357 357.82 285.777 357.556 286.149 cv
357.28 286.533 356.944 286.713 356.536 286.713 cv
356.248 286.713 356.008 286.617 355.816 286.437 cv
355.612 286.245 355.516 286.017 355.516 285.729 cv
355.516 285.585 355.54 285.429 355.612 285.261 cv
355.708 284.997 355.816 284.685 355.948 284.325 cv
356.08 283.965 356.188 283.629 356.272 283.293 cv
356.356 282.957 356.404 282.669 356.404 282.405 cv
356.404 282.189 356.356 281.997 356.26 281.841 cv
356.164 281.685 356.02 281.601 355.804 281.601 cv
355.504 281.601 355.228 281.673 354.988 281.793 cv
354.748 281.925 354.532 282.093 354.352 282.309 cv
354.16 282.525 353.992 282.777 353.848 283.065 cv
353.032 286.329 li
353.008 286.449 352.948 286.533 352.852 286.605 cv
352.756 286.677 352.648 286.713 352.528 286.713 cv
352.432 286.713 352.348 286.677 352.276 286.629 cv
352.204 286.581 352.168 286.497 352.168 286.389 cv
f
362.35 285.621 mo
362.35 285.501 362.362 285.393 362.386 285.285 cv
363.25 281.841 li
361.99 281.841 li
361.906 281.841 361.87 281.793 361.87 281.685 cv
361.894 281.517 361.954 281.421 362.026 281.421 cv
363.358 281.421 li
363.838 279.465 li
363.862 279.369 363.922 279.273 364.018 279.201 cv
364.114 279.129 364.222 279.081 364.342 279.081 cv
364.438 279.081 364.522 279.117 364.594 279.177 cv
364.666 279.237 364.702 279.321 364.702 279.417 cv
364.69 279.477 li
364.69 279.513 li
364.21 281.421 li
365.446 281.421 li
365.518 281.421 365.566 281.481 365.566 281.577 cv
365.542 281.673 li
365.494 281.793 li
365.41 281.841 li
364.102 281.841 li
363.238 285.309 li
363.178 285.537 363.154 285.729 363.154 285.897 cv
363.154 286.245 363.262 286.413 363.502 286.413 cv
363.85 286.413 364.162 286.257 364.438 285.921 cv
364.702 285.585 364.918 285.225 365.062 284.829 cv
365.158 284.757 li
365.302 284.757 li
365.374 284.793 li
365.41 284.865 li
365.398 284.901 li
365.218 285.381 364.966 285.813 364.63 286.173 cv
364.294 286.533 363.91 286.713 363.478 286.713 cv
363.154 286.713 362.89 286.605 362.674 286.413 cv
362.458 286.209 362.35 285.945 362.35 285.621 cv
f
366.572 286.377 mo
366.584 286.269 li
368.324 279.333 li
368.348 279.201 368.372 279.093 368.384 279.009 cv
368.384 278.889 368.12 278.817 367.604 278.817 cv
367.52 278.817 367.484 278.769 367.484 278.661 cv
367.508 278.553 li
367.556 278.445 li
367.652 278.397 li
369.272 278.265 li
369.308 278.265 li
369.344 278.301 li
369.392 278.325 li
369.416 278.421 li
368.48 282.165 li
368.96 281.589 369.548 281.289 370.232 281.289 cv
370.508 281.289 370.748 281.349 370.952 281.445 cv
371.156 281.541 371.312 281.697 371.432 281.889 cv
371.552 282.081 371.612 282.321 371.612 282.585 cv
371.612 282.921 371.54 283.317 371.396 283.773 cv
371.252 284.241 371.06 284.757 370.844 285.333 cv
370.724 285.597 370.676 285.837 370.676 286.053 cv
370.676 286.293 370.76 286.413 370.952 286.413 cv
371.264 286.413 371.516 286.245 371.732 285.909 cv
371.936 285.573 372.08 285.213 372.176 284.829 cv
372.272 284.757 li
372.416 284.757 li
372.488 284.793 li
372.524 284.865 li
372.512 284.901 li
372.44 285.189 372.332 285.477 372.188 285.753 cv
372.044 286.041 371.876 286.269 371.672 286.449 cv
371.456 286.617 371.216 286.713 370.928 286.713 cv
370.64 286.713 370.4 286.617 370.208 286.437 cv
370.004 286.245 369.908 286.017 369.908 285.729 cv
369.908 285.585 369.932 285.429 370.004 285.261 cv
370.22 284.661 370.412 284.133 370.568 283.653 cv
370.712 283.185 370.796 282.765 370.796 282.405 cv
370.796 282.177 370.748 281.985 370.652 281.829 cv
370.556 281.685 370.412 281.601 370.208 281.601 cv
369.776 281.601 369.392 281.733 369.08 281.997 cv
368.756 282.261 368.48 282.609 368.252 283.041 cv
367.436 286.317 li
367.4 286.437 367.34 286.533 367.256 286.605 cv
367.16 286.677 367.064 286.713 366.944 286.713 cv
366.836 286.713 366.752 286.677 366.68 286.617 cv
366.608 286.557 366.572 286.473 366.572 286.377 cv
f
375.262 286.713 mo
374.878 286.713 374.542 286.617 374.254 286.425 cv
373.966 286.233 373.75 285.957 373.606 285.621 cv
373.45 285.285 373.378 284.937 373.378 284.553 cv
373.378 283.989 373.522 283.449 373.81 282.945 cv
374.098 282.441 374.482 282.045 374.974 281.745 cv
375.466 281.445 375.994 281.289 376.558 281.289 cv
376.894 281.289 377.194 281.385 377.458 281.565 cv
377.71 281.745 377.842 281.997 377.842 282.321 cv
377.842 282.789 377.65 283.137 377.29 283.353 cv
376.918 283.581 376.498 283.725 376.042 283.773 cv
375.586 283.821 375.07 283.845 374.518 283.845 cv
374.482 283.845 li
374.35 284.325 374.29 284.733 374.29 285.069 cv
374.29 285.429 374.362 285.741 374.53 286.005 cv
374.698 286.281 374.95 286.413 375.286 286.413 cv
375.766 286.413 376.222 286.305 376.666 286.089 cv
377.098 285.873 377.458 285.561 377.734 285.177 cv
377.83 285.141 li
377.95 285.213 li
378.01 285.333 li
377.986 285.405 li
377.698 285.813 377.302 286.137 376.81 286.365 cv
376.306 286.593 375.79 286.713 375.262 286.713 cv
374.554 283.533 mo
375.01 283.533 375.442 283.521 375.838 283.473 cv
376.234 283.425 376.594 283.317 376.918 283.149 cv
377.23 282.981 377.398 282.705 377.398 282.333 cv
377.398 282.189 377.35 282.057 377.266 281.949 cv
377.182 281.841 377.074 281.757 376.954 281.697 cv
376.822 281.637 376.69 281.601 376.546 281.601 cv
376.21 281.601 375.898 281.697 375.634 281.877 cv
375.358 282.069 375.13 282.309 374.962 282.597 cv
374.782 282.897 374.65 283.209 374.554 283.533 cv
f
382.321 286.845 mo
382.249 286.797 li
382.225 286.725 li
382.921 283.941 li
383.017 283.869 li
383.161 283.869 li
383.233 283.905 li
383.257 283.989 li
383.185 284.265 383.161 284.505 383.161 284.721 cv
383.161 285.309 383.353 285.741 383.749 286.017 cv
384.145 286.305 384.649 286.437 385.261 286.437 cv
385.525 286.437 385.777 286.377 386.029 286.245 cv
386.281 286.125 386.509 285.957 386.701 285.741 cv
386.893 285.537 387.037 285.309 387.157 285.045 cv
387.265 284.793 387.325 284.529 387.325 284.265 cv
387.325 283.989 387.241 283.737 387.097 283.521 cv
386.953 283.305 386.749 283.161 386.485 283.089 cv
385.021 282.705 li
384.625 282.609 384.313 282.393 384.073 282.069 cv
383.833 281.757 383.725 281.397 383.725 280.989 cv
383.725 280.509 383.869 280.053 384.157 279.609 cv
384.445 279.165 384.817 278.805 385.273 278.541 cv
385.729 278.277 386.197 278.133 386.677 278.133 cv
387.037 278.133 387.373 278.205 387.685 278.337 cv
387.985 278.481 388.225 278.685 388.393 278.973 cv
389.077 278.169 li
389.161 278.133 li
389.233 278.133 li
389.305 278.181 li
389.341 278.253 li
388.645 281.037 li
388.549 281.121 li
388.405 281.121 li
388.333 281.121 388.297 281.085 388.297 280.989 cv
388.333 280.737 388.357 280.521 388.357 280.329 cv
388.357 279.969 388.285 279.645 388.165 279.369 cv
388.033 279.093 387.841 278.877 387.589 278.733 cv
387.325 278.589 387.013 278.517 386.641 278.517 cv
386.317 278.517 385.993 278.613 385.681 278.793 cv
385.369 278.985 385.105 279.225 384.913 279.525 cv
384.721 279.837 384.625 280.149 384.625 280.473 cv
384.625 280.737 384.697 280.965 384.853 281.157 cv
384.997 281.361 385.201 281.493 385.453 281.565 cv
386.917 281.949 li
387.181 282.021 387.409 282.153 387.601 282.321 cv
387.793 282.501 387.949 282.717 388.057 282.957 cv
388.153 283.197 388.213 283.461 388.213 283.749 cv
388.213 284.133 388.129 284.517 387.973 284.877 cv
387.805 285.249 387.589 285.585 387.301 285.885 cv
387.013 286.197 386.677 286.425 386.317 286.593 cv
385.957 286.761 385.585 286.845 385.213 286.845 cv
384.253 286.845 383.569 286.569 383.161 286.017 cv
382.489 286.809 li
382.405 286.845 li
382.321 286.845 li
f
390.706 284.925 mo
390.706 285.213 390.754 285.477 390.874 285.705 cv
390.994 285.945 391.162 286.125 391.378 286.245 cv
391.594 286.377 391.846 286.437 392.146 286.437 cv
392.482 286.437 392.818 286.377 393.154 286.233 cv
393.478 286.089 393.766 285.897 394.03 285.645 cv
394.294 285.393 394.51 285.105 394.702 284.781 cv
394.882 284.469 395.014 284.145 395.098 283.833 cv
396.178 279.501 li
396.202 279.321 li
396.202 278.985 395.89 278.817 395.278 278.817 cv
395.194 278.817 395.158 278.769 395.158 278.661 cv
395.182 278.565 395.194 278.493 395.218 278.457 cv
395.362 278.397 li
397.966 278.397 li
398.05 278.457 li
398.086 278.553 li
398.062 278.649 li
398.002 278.781 li
397.93 278.817 li
397.162 278.817 396.718 279.069 396.598 279.549 cv
395.518 283.881 li
395.422 284.265 395.278 284.625 395.062 284.973 cv
394.846 285.333 394.582 285.645 394.27 285.933 cv
393.958 286.221 393.622 286.449 393.25 286.605 cv
392.878 286.761 392.494 286.845 392.11 286.845 cv
391.666 286.845 391.258 286.749 390.898 286.569 cv
390.538 286.377 390.25 286.113 390.046 285.765 cv
389.83 285.417 389.734 285.009 389.734 284.553 cv
389.734 284.289 389.758 284.049 389.818 283.833 cv
390.982 279.177 li
391.006 279.009 li
391.006 278.925 390.958 278.877 390.862 278.865 cv
390.706 278.841 390.418 278.817 389.998 278.817 cv
389.914 278.817 389.878 278.769 389.878 278.661 cv
389.902 278.565 389.926 278.493 389.938 278.457 cv
390.082 278.397 li
393.31 278.397 li
393.382 278.397 393.43 278.457 393.43 278.553 cv
393.406 278.661 li
393.358 278.769 li
393.274 278.817 li
392.782 278.817 392.446 278.853 392.254 278.901 cv
392.146 278.949 392.074 279.057 392.026 279.225 cv
390.862 283.881 li
390.754 284.313 390.706 284.661 390.706 284.925 cv
f
397.68 286.437 mo
397.704 286.329 li
397.752 286.221 li
397.848 286.173 li
398.532 286.173 398.988 286.161 399.216 286.113 cv
399.432 286.065 399.552 285.945 399.6 285.765 cv
401.244 279.177 li
401.268 279.081 401.292 278.997 401.292 278.913 cv
401.292 278.853 401.148 278.817 400.872 278.817 cv
400.176 278.817 li
399.636 278.817 399.216 278.901 398.928 279.069 cv
398.64 279.237 398.424 279.453 398.292 279.717 cv
398.148 279.981 397.98 280.425 397.764 281.037 cv
397.644 281.145 li
397.536 281.145 li
397.452 281.145 397.416 281.097 397.416 280.989 cv
398.268 278.505 li
398.388 278.397 li
405.48 278.397 li
405.552 278.397 405.6 278.457 405.6 278.553 cv
405.204 281.037 li
405.156 281.109 li
405.084 281.145 li
404.976 281.145 li
404.892 281.145 404.856 281.097 404.856 280.989 cv
404.94 280.425 404.988 280.029 404.988 279.789 cv
404.988 279.513 404.928 279.297 404.808 279.153 cv
404.688 279.009 404.532 278.925 404.352 278.877 cv
404.16 278.841 403.92 278.817 403.62 278.817 cv
402.912 278.817 li
402.696 278.817 402.552 278.841 402.48 278.877 cv
402.408 278.925 402.336 279.033 402.288 279.225 cv
400.644 285.813 li
400.632 285.861 li
400.62 285.921 li
400.62 286.029 400.68 286.089 400.8 286.113 cv
401.004 286.161 401.448 286.173 402.132 286.173 cv
402.204 286.173 402.252 286.233 402.252 286.329 cv
402.216 286.449 402.192 286.521 402.18 286.545 cv
402.048 286.593 li
397.8 286.593 li
397.716 286.593 397.68 286.545 397.68 286.437 cv
f
52.812 256.968 mo
56.812 256.968 li
f
52.812 256.968 mo
56.812 256.968 li
@
35.128 252.312 mo
34.516 252.312 34.06 252.612 33.748 253.212 cv
33.436 253.812 33.292 254.712 33.292 255.912 cv
33.292 257.112 33.436 258.012 33.748 258.612 cv
34.06 259.212 34.516 259.512 35.128 259.512 cv
35.74 259.512 36.196 259.212 36.508 258.612 cv
36.808 258.012 36.964 257.112 36.964 255.912 cv
36.964 254.712 36.808 253.812 36.508 253.212 cv
36.196 252.612 35.74 252.312 35.128 252.312 cv
35.128 251.376 mo
36.1 251.376 36.844 251.772 37.372 252.54 cv
37.888 253.32 38.152 254.448 38.152 255.912 cv
38.152 257.388 37.888 258.516 37.372 259.284 cv
36.844 260.052 36.1 260.436 35.128 260.436 cv
34.144 260.436 33.388 260.052 32.872 259.284 cv
32.356 258.516 32.104 257.388 32.104 255.912 cv
32.104 254.448 32.356 253.32 32.872 252.54 cv
33.388 251.772 34.144 251.376 35.128 251.376 cv
f
40.228 258.792 mo
41.464 258.792 li
41.464 260.28 li
40.228 260.28 li
40.228 258.792 li
f
46.5759 252.312 mo
45.9639 252.312 45.5079 252.612 45.1959 253.212 cv
44.8839 253.812 44.7399 254.712 44.7399 255.912 cv
44.7399 257.112 44.8839 258.012 45.1959 258.612 cv
45.5079 259.212 45.9639 259.512 46.5759 259.512 cv
47.1879 259.512 47.6439 259.212 47.9559 258.612 cv
48.2559 258.012 48.4119 257.112 48.4119 255.912 cv
48.4119 254.712 48.2559 253.812 47.9559 253.212 cv
47.6439 252.612 47.1879 252.312 46.5759 252.312 cv
46.5759 251.376 mo
47.5479 251.376 48.2919 251.772 48.8199 252.54 cv
49.3359 253.32 49.5999 254.448 49.5999 255.912 cv
49.5999 257.388 49.3359 258.516 48.8199 259.284 cv
48.2919 260.052 47.5479 260.436 46.5759 260.436 cv
45.5919 260.436 44.8359 260.052 44.3199 259.284 cv
43.8039 258.516 43.5519 257.388 43.5519 255.912 cv
43.5519 254.448 43.8039 253.32 44.3199 252.54 cv
44.8359 251.772 45.5919 251.376 46.5759 251.376 cv
f
52.812 224.527 mo
56.812 224.527 li
f
52.812 224.527 mo
56.812 224.527 li
@
35.4405 219.871 mo
34.8285 219.871 34.3725 220.171 34.0605 220.771 cv
33.7485 221.371 33.6045 222.271 33.6045 223.471 cv
33.6045 224.671 33.7485 225.571 34.0605 226.171 cv
34.3725 226.771 34.8285 227.071 35.4405 227.071 cv
36.0525 227.071 36.5085 226.771 36.8205 226.171 cv
37.1205 225.571 37.2765 224.671 37.2765 223.471 cv
37.2765 222.271 37.1205 221.371 36.8205 220.771 cv
36.5085 220.171 36.0525 219.871 35.4405 219.871 cv
35.4405 218.935 mo
36.4125 218.935 37.1565 219.331 37.6845 220.099 cv
38.2005 220.879 38.4645 222.007 38.4645 223.471 cv
38.4645 224.947 38.2005 226.075 37.6845 226.843 cv
37.1565 227.611 36.4125 227.995 35.4405 227.995 cv
34.4565 227.995 33.7005 227.611 33.1845 226.843 cv
32.6685 226.075 32.4165 224.947 32.4165 223.471 cv
32.4165 222.007 32.6685 220.879 33.1845 220.099 cv
33.7005 219.331 34.4565 218.935 35.4405 218.935 cv
f
40.5405 226.351 mo
41.7765 226.351 li
41.7765 227.839 li
40.5405 227.839 li
40.5405 226.351 li
f
44.5604 226.843 mo
46.4924 226.843 li
46.4924 220.171 li
44.3924 220.591 li
44.3924 219.511 li
46.4804 219.091 li
47.6684 219.091 li
47.6684 226.843 li
49.6004 226.843 li
49.6004 227.839 li
44.5604 227.839 li
44.5604 226.843 li
f
52.812 192.086 mo
56.812 192.086 li
f
52.812 192.086 mo
56.812 192.086 li
@
35.5342 187.43 mo
34.9222 187.43 34.4663 187.73 34.1543 188.33 cv
33.8423 188.93 33.6982 189.83 33.6982 191.03 cv
33.6982 192.23 33.8423 193.13 34.1543 193.73 cv
34.4663 194.33 34.9222 194.63 35.5342 194.63 cv
36.1463 194.63 36.6022 194.33 36.9142 193.73 cv
37.2142 193.13 37.3703 192.23 37.3703 191.03 cv
37.3703 189.83 37.2142 188.93 36.9142 188.33 cv
36.6022 187.73 36.1463 187.43 35.5342 187.43 cv
35.5342 186.494 mo
36.5062 186.494 37.2503 186.89 37.7783 187.658 cv
38.2943 188.438 38.5583 189.566 38.5583 191.03 cv
38.5583 192.506 38.2943 193.634 37.7783 194.402 cv
37.2503 195.17 36.5062 195.554 35.5342 195.554 cv
34.5503 195.554 33.7943 195.17 33.2783 194.402 cv
32.7622 193.634 32.5103 192.506 32.5103 191.03 cv
32.5103 189.566 32.7622 188.438 33.2783 187.658 cv
33.7943 186.89 34.5503 186.494 35.5342 186.494 cv
f
40.6343 193.91 mo
41.8703 193.91 li
41.8703 195.398 li
40.6343 195.398 li
40.6343 193.91 li
f
45.4702 194.402 mo
49.5982 194.402 li
49.5982 195.398 li
44.0422 195.398 li
44.0422 194.402 li
44.4862 193.946 45.0982 193.322 45.8782 192.53 cv
46.6462 191.75 47.1382 191.246 47.3422 191.018 cv
47.7262 190.598 47.9902 190.238 48.1342 189.938 cv
48.2782 189.65 48.3622 189.35 48.3622 189.062 cv
48.3622 188.606 48.1942 188.222 47.8702 187.934 cv
47.5462 187.646 47.1262 187.49 46.5982 187.49 cv
46.2262 187.49 45.8302 187.562 45.4222 187.682 cv
45.0142 187.814 44.5702 188.006 44.1022 188.27 cv
44.1022 187.07 li
44.5822 186.878 45.0262 186.734 45.4342 186.638 cv
45.8422 186.542 46.2262 186.494 46.5742 186.494 cv
47.4742 186.494 48.1942 186.722 48.7342 187.178 cv
49.2742 187.634 49.5502 188.234 49.5502 188.99 cv
49.5502 189.35 49.4782 189.698 49.3462 190.01 cv
49.2142 190.334 48.9742 190.718 48.6142 191.15 cv
48.5182 191.27 48.2062 191.594 47.6782 192.134 cv
47.1502 192.674 46.4182 193.43 45.4702 194.402 cv
f
52.812 159.645 mo
56.812 159.645 li
f
52.812 159.645 mo
56.812 159.645 li
@
35.2999 154.989 mo
34.6879 154.989 34.2319 155.289 33.9199 155.889 cv
33.6079 156.489 33.4639 157.389 33.4639 158.589 cv
33.4639 159.789 33.6079 160.689 33.9199 161.289 cv
34.2319 161.889 34.6879 162.189 35.2999 162.189 cv
35.9119 162.189 36.3679 161.889 36.6799 161.289 cv
36.9799 160.689 37.1359 159.789 37.1359 158.589 cv
37.1359 157.389 36.9799 156.489 36.6799 155.889 cv
36.3679 155.289 35.9119 154.989 35.2999 154.989 cv
35.2999 154.053 mo
36.2719 154.053 37.0159 154.449 37.5439 155.217 cv
38.0599 155.997 38.3239 157.125 38.3239 158.589 cv
38.3239 160.065 38.0599 161.193 37.5439 161.961 cv
37.0159 162.729 36.2719 163.113 35.2999 163.113 cv
34.3159 163.113 33.5599 162.729 33.0439 161.961 cv
32.5279 161.193 32.2759 160.065 32.2759 158.589 cv
32.2759 157.125 32.5279 155.997 33.0439 155.217 cv
33.5599 154.449 34.3159 154.053 35.2999 154.053 cv
f
40.3999 161.469 mo
41.6359 161.469 li
41.6359 162.957 li
40.3999 162.957 li
40.3999 161.469 li
f
47.8038 158.241 mo
48.3678 158.361 48.8118 158.613 49.1238 158.997 cv
49.4358 159.381 49.6038 159.861 49.6038 160.413 cv
49.6038 161.277 49.3038 161.949 48.7158 162.417 cv
48.1158 162.885 47.2758 163.113 46.1838 163.113 cv
45.8118 163.113 45.4278 163.077 45.0438 163.005 cv
44.6598 162.945 44.2518 162.837 43.8438 162.693 cv
43.8438 161.553 li
44.1678 161.745 44.5278 161.889 44.9238 161.985 cv
45.3078 162.081 45.7158 162.129 46.1478 162.129 cv
46.8918 162.129 47.4558 161.985 47.8398 161.697 cv
48.2238 161.409 48.4278 160.977 48.4278 160.413 cv
48.4278 159.909 48.2478 159.501 47.8878 159.213 cv
47.5278 158.925 47.0238 158.769 46.3758 158.769 cv
45.3558 158.769 li
45.3558 157.797 li
46.4238 157.797 li
46.9998 157.797 47.4438 157.689 47.7558 157.449 cv
48.0678 157.221 48.2238 156.885 48.2238 156.441 cv
48.2238 155.997 48.0558 155.649 47.7438 155.409 cv
47.4198 155.169 46.9638 155.049 46.3758 155.049 cv
46.0518 155.049 45.7038 155.085 45.3318 155.157 cv
44.9598 155.229 44.5518 155.337 44.1078 155.481 cv
44.1078 154.425 li
44.5518 154.305 44.9718 154.209 45.3678 154.149 cv
45.7518 154.089 46.1238 154.053 46.4838 154.053 cv
47.3718 154.053 48.0798 154.257 48.6078 154.665 cv
49.1358 155.073 49.3998 155.625 49.3998 156.321 cv
49.3998 156.801 49.2558 157.209 48.9798 157.545 cv
48.7038 157.881 48.3078 158.121 47.8038 158.241 cv
f
52.812 127.203 mo
56.812 127.203 li
f
52.812 127.203 mo
56.812 127.203 li
@
35.003 122.548 mo
34.391 122.548 33.935 122.848 33.623 123.448 cv
33.311 124.048 33.167 124.948 33.167 126.148 cv
33.167 127.348 33.311 128.248 33.623 128.848 cv
33.935 129.448 34.391 129.748 35.003 129.748 cv
35.615 129.748 36.071 129.448 36.383 128.848 cv
36.683 128.248 36.839 127.348 36.839 126.148 cv
36.839 124.948 36.683 124.048 36.383 123.448 cv
36.071 122.848 35.615 122.548 35.003 122.548 cv
35.003 121.612 mo
35.975 121.612 36.719 122.008 37.247 122.776 cv
37.763 123.556 38.027 124.684 38.027 126.148 cv
38.027 127.624 37.763 128.752 37.247 129.52 cv
36.719 130.288 35.975 130.672 35.003 130.672 cv
34.019 130.672 33.263 130.288 32.747 129.52 cv
32.231 128.752 31.979 127.624 31.979 126.148 cv
31.979 124.684 32.231 123.556 32.747 122.776 cv
33.263 122.008 34.019 121.612 35.003 121.612 cv
f
40.103 129.028 mo
41.339 129.028 li
41.339 130.516 li
40.103 130.516 li
40.103 129.028 li
f
47.1709 122.8 mo
44.1829 127.468 li
47.1709 127.468 li
47.1709 122.8 li
46.8589 121.768 mo
48.3469 121.768 li
48.3469 127.468 li
49.5949 127.468 li
49.5949 128.452 li
48.3469 128.452 li
48.3469 130.516 li
47.1709 130.516 li
47.1709 128.452 li
43.2229 128.452 li
43.2229 127.312 li
46.8589 121.768 li
f
52.812 94.7623 mo
56.812 94.7623 li
f
52.812 94.7623 mo
56.812 94.7623 li
@
35.378 90.1068 mo
34.766 90.1068 34.31 90.4068 33.998 91.0068 cv
33.686 91.6068 33.542 92.5068 33.542 93.7068 cv
33.542 94.9068 33.686 95.8068 33.998 96.4068 cv
34.31 97.0068 34.766 97.3068 35.378 97.3068 cv
35.99 97.3068 36.446 97.0068 36.758 96.4068 cv
37.058 95.8068 37.214 94.9068 37.214 93.7068 cv
37.214 92.5068 37.058 91.6068 36.758 91.0068 cv
36.446 90.4068 35.99 90.1068 35.378 90.1068 cv
35.378 89.1708 mo
36.35 89.1708 37.094 89.5668 37.622 90.3348 cv
38.138 91.1148 38.402 92.2428 38.402 93.7068 cv
38.402 95.1828 38.138 96.3108 37.622 97.0788 cv
37.094 97.8468 36.35 98.2308 35.378 98.2308 cv
34.394 98.2308 33.638 97.8468 33.122 97.0788 cv
32.606 96.3108 32.354 95.1828 32.354 93.7068 cv
32.354 92.2428 32.606 91.1148 33.122 90.3348 cv
33.638 89.5668 34.394 89.1708 35.378 89.1708 cv
f
40.478 96.5868 mo
41.714 96.5868 li
41.714 98.0748 li
40.478 98.0748 li
40.478 96.5868 li
f
44.3059 89.3268 mo
48.9499 89.3268 li
48.9499 90.3228 li
45.3859 90.3228 li
45.3859 92.4708 li
45.5539 92.4108 45.7339 92.3628 45.9019 92.3388 cv
46.0699 92.3148 46.2499 92.2908 46.4179 92.2908 cv
47.3899 92.2908 48.1579 92.5668 48.7339 93.0948 cv
49.3099 93.6348 49.5979 94.3548 49.5979 95.2668 cv
49.5979 96.2148 49.2979 96.9468 48.7099 97.4628 cv
48.1219 97.9788 47.2939 98.2308 46.2379 98.2308 cv
45.8659 98.2308 45.4939 98.1948 45.1099 98.1468 cv
44.7259 98.0868 44.3419 98.0028 43.9339 97.8708 cv
43.9339 96.6828 li
44.2819 96.8748 44.6419 97.0188 45.0259 97.1148 cv
45.3979 97.2108 45.7939 97.2468 46.2139 97.2468 cv
46.8859 97.2468 47.4259 97.0788 47.8219 96.7188 cv
48.2059 96.3588 48.4099 95.8788 48.4099 95.2668 cv
48.4099 94.6668 48.2059 94.1868 47.8219 93.8268 cv
47.4259 93.4668 46.8859 93.2868 46.2139 93.2868 cv
45.9019 93.2868 45.5779 93.3228 45.2659 93.3948 cv
44.9539 93.4668 44.6299 93.5748 44.3059 93.7188 cv
44.3059 89.3268 li
f
52.812 62.3211 mo
56.812 62.3211 li
f
52.812 62.3211 mo
56.812 62.3211 li
@
35.0967 57.6656 mo
34.4847 57.6656 34.0288 57.9656 33.7168 58.5656 cv
33.4048 59.1656 33.2607 60.0656 33.2607 61.2656 cv
33.2607 62.4656 33.4048 63.3656 33.7168 63.9656 cv
34.0288 64.5656 34.4847 64.8656 35.0967 64.8656 cv
35.7088 64.8656 36.1647 64.5656 36.4767 63.9656 cv
36.7767 63.3656 36.9328 62.4656 36.9328 61.2656 cv
36.9328 60.0656 36.7767 59.1656 36.4767 58.5656 cv
36.1647 57.9656 35.7088 57.6656 35.0967 57.6656 cv
35.0967 56.7296 mo
36.0687 56.7296 36.8128 57.1256 37.3408 57.8936 cv
37.8568 58.6736 38.1208 59.8016 38.1208 61.2656 cv
38.1208 62.7416 37.8568 63.8696 37.3408 64.6376 cv
36.8128 65.4056 36.0687 65.7896 35.0967 65.7896 cv
34.1128 65.7896 33.3568 65.4056 32.8408 64.6376 cv
32.3247 63.8696 32.0728 62.7416 32.0728 61.2656 cv
32.0728 59.8016 32.3247 58.6736 32.8408 57.8936 cv
33.3568 57.1256 34.1128 56.7296 35.0967 56.7296 cv
f
40.1968 64.1456 mo
41.4328 64.1456 li
41.4328 65.6336 li
40.1968 65.6336 li
40.1968 64.1456 li
f
46.6887 60.7856 mo
46.1607 60.7856 45.7407 60.9776 45.4287 61.3376 cv
45.1167 61.6976 44.9607 62.2016 44.9607 62.8256 cv
44.9607 63.4616 45.1167 63.9656 45.4287 64.3256 cv
45.7407 64.6856 46.1607 64.8656 46.6887 64.8656 cv
47.2167 64.8656 47.6367 64.6856 47.9487 64.3256 cv
48.2607 63.9656 48.4167 63.4616 48.4167 62.8256 cv
48.4167 62.2016 48.2607 61.6976 47.9487 61.3376 cv
47.6367 60.9776 47.2167 60.7856 46.6887 60.7856 cv
49.0407 57.0776 mo
49.0407 58.1576 li
48.7407 58.0136 48.4407 57.9056 48.1407 57.8336 cv
47.8287 57.7616 47.5287 57.7256 47.2407 57.7256 cv
46.4487 57.7256 45.8487 57.9896 45.4407 58.5176 cv
45.0327 59.0456 44.7927 59.8496 44.7447 60.9056 cv
44.9727 60.5696 45.2607 60.3056 45.6087 60.1256 cv
45.9567 59.9456 46.3407 59.8496 46.7607 59.8496 cv
47.6367 59.8496 48.3327 60.1256 48.8367 60.6536 cv
49.3407 61.1816 49.6047 61.9136 49.6047 62.8256 cv
49.6047 63.7256 49.3287 64.4456 48.8007 64.9856 cv
48.2727 65.5256 47.5647 65.7896 46.6887 65.7896 cv
45.6807 65.7896 44.9007 65.4056 44.3727 64.6376 cv
43.8327 63.8696 43.5687 62.7416 43.5687 61.2656 cv
43.5687 59.8856 43.8927 58.7816 44.5527 57.9656 cv
45.2007 57.1496 46.0887 56.7296 47.1927 56.7296 cv
47.4807 56.7296 47.7807 56.7656 48.0927 56.8136 cv
48.3927 56.8736 48.7047 56.9576 49.0407 57.0776 cv
f
52.812 29.88 mo
56.812 29.88 li
f
52.812 29.88 mo
56.812 29.88 li
@
35.3624 25.2245 mo
34.7504 25.2245 34.2944 25.5245 33.9824 26.1245 cv
33.6704 26.7245 33.5264 27.6245 33.5264 28.8245 cv
33.5264 30.0245 33.6704 30.9245 33.9824 31.5245 cv
34.2944 32.1245 34.7504 32.4245 35.3624 32.4245 cv
35.9744 32.4245 36.4304 32.1245 36.7424 31.5245 cv
37.0424 30.9245 37.1984 30.0245 37.1984 28.8245 cv
37.1984 27.6245 37.0424 26.7245 36.7424 26.1245 cv
36.4304 25.5245 35.9744 25.2245 35.3624 25.2245 cv
35.3624 24.2885 mo
36.3344 24.2885 37.0784 24.6845 37.6064 25.4525 cv
38.1224 26.2325 38.3864 27.3605 38.3864 28.8245 cv
38.3864 30.3005 38.1224 31.4285 37.6064 32.1965 cv
37.0784 32.9645 36.3344 33.3485 35.3624 33.3485 cv
34.3784 33.3485 33.6224 32.9645 33.1064 32.1965 cv
32.5904 31.4285 32.3384 30.3005 32.3384 28.8245 cv
32.3384 27.3605 32.5904 26.2325 33.1064 25.4525 cv
33.6224 24.6845 34.3784 24.2885 35.3624 24.2885 cv
f
40.4624 31.7045 mo
41.6984 31.7045 li
41.6984 33.1925 li
40.4624 33.1925 li
40.4624 31.7045 li
f
43.9783 24.4445 mo
49.6063 24.4445 li
49.6063 24.9485 li
46.4263 33.1925 li
45.1903 33.1925 li
48.1783 25.4405 li
43.9783 25.4405 li
43.9783 24.4445 li
f
21.831 236.64 mo
21.663 236.64 21.459 236.628 21.243 236.58 cv
21.027 236.532 20.859 236.496 20.715 236.448 cv
20.571 236.412 20.307 236.316 19.899 236.16 cv
19.503 236.004 19.299 235.92 19.275 235.92 cv
18.987 235.824 18.747 235.764 18.555 235.764 cv
18.315 235.764 18.195 235.86 18.195 236.028 cv
18.195 236.34 18.363 236.604 18.687 236.808 cv
19.023 237.024 19.383 237.168 19.779 237.264 cv
19.851 237.36 li
19.851 237.504 li
19.743 237.6 li
19.707 237.6 li
19.227 237.48 18.807 237.276 18.435 237.012 cv
18.075 236.748 17.883 236.412 17.883 236.004 cv
17.883 235.716 17.979 235.476 18.171 235.284 cv
18.363 235.092 18.591 234.984 18.879 234.984 cv
19.035 234.984 19.191 235.02 19.347 235.08 cv
19.755 235.248 20.091 235.368 20.331 235.452 cv
20.571 235.548 20.847 235.632 21.147 235.704 cv
21.459 235.776 21.735 235.812 21.987 235.812 cv
22.287 235.812 22.527 235.752 22.719 235.608 cv
22.911 235.476 23.007 235.26 23.007 234.96 cv
23.007 234.408 22.587 233.916 21.723 233.46 cv
21.447 233.316 21.123 233.184 20.751 233.064 cv
20.379 232.944 20.067 232.872 19.827 232.872 cv
19.587 232.872 19.407 232.92 19.263 232.992 cv
19.131 233.076 18.987 233.184 18.843 233.304 cv
18.699 233.424 18.591 233.484 18.495 233.484 cv
18.339 233.484 18.195 233.424 18.063 233.292 cv
17.943 233.172 17.871 233.028 17.871 232.86 cv
17.871 232.668 17.967 232.536 18.135 232.452 cv
18.315 232.368 18.519 232.32 18.735 232.32 cv
18.999 232.32 19.323 232.368 19.683 232.44 cv
20.055 232.512 20.439 232.62 20.835 232.752 cv
21.231 232.896 21.543 233.016 21.759 233.124 cv
22.791 233.652 23.307 234.276 23.307 234.972 cv
23.307 235.476 23.187 235.884 22.935 236.184 cv
22.695 236.496 22.323 236.64 21.831 236.64 cv
f
23.307 230.029 mo
23.307 230.533 23.127 230.941 22.743 231.229 cv
22.371 231.517 21.927 231.661 21.399 231.661 cv
20.895 231.661 20.355 231.529 19.803 231.265 cv
19.251 231.001 18.795 230.653 18.435 230.197 cv
18.075 229.741 17.883 229.261 17.883 228.733 cv
17.883 228.493 17.955 228.289 18.075 228.097 cv
18.207 227.905 18.387 227.761 18.603 227.653 cv
18.291 227.569 18.123 227.389 18.123 227.125 cv
18.123 227.029 18.159 226.945 18.219 226.873 cv
18.279 226.801 18.363 226.765 18.459 226.765 cv
18.519 226.777 li
18.555 226.777 li
21.903 227.617 li
22.143 227.677 22.347 227.701 22.491 227.701 cv
22.839 227.701 23.007 227.593 23.007 227.353 cv
23.007 227.113 22.851 226.921 22.527 226.789 cv
22.215 226.657 21.843 226.549 21.423 226.453 cv
21.351 226.357 li
21.351 226.213 li
21.399 226.141 li
21.471 226.105 li
22.035 226.249 22.479 226.405 22.815 226.573 cv
23.151 226.741 23.307 227.005 23.307 227.377 cv
23.307 227.653 23.223 227.893 23.079 228.097 cv
22.935 228.301 22.719 228.433 22.455 228.481 cv
23.031 228.997 23.307 229.513 23.307 230.029 cv
23.007 230.017 mo
23.007 229.729 22.899 229.453 22.683 229.177 cv
22.467 228.913 22.215 228.673 21.915 228.481 cv
21.879 228.469 li
19.275 227.821 li
19.239 227.809 li
18.951 227.857 18.711 227.965 18.507 228.121 cv
18.303 228.289 18.195 228.493 18.195 228.757 cv
18.195 229.033 18.315 229.285 18.531 229.513 cv
18.747 229.753 19.011 229.945 19.311 230.101 cv
19.635 230.269 20.079 230.413 20.631 230.557 cv
21.183 230.701 21.615 230.761 21.927 230.761 cv
22.215 230.761 22.467 230.701 22.683 230.581 cv
22.899 230.461 23.007 230.281 23.007 230.017 cv
f
22.215 225.255 mo
22.107 225.255 li
21.975 225.231 li
21.867 225.219 li
15.927 223.731 li
15.795 223.707 15.687 223.683 15.603 223.671 cv
15.483 223.671 15.411 223.935 15.411 224.451 cv
15.411 224.535 15.363 224.571 15.255 224.571 cv
15.147 224.547 li
15.039 224.499 li
14.991 224.403 li
14.859 222.783 li
14.859 222.687 14.919 222.639 15.015 222.639 cv
21.915 224.367 li
22.047 224.427 22.239 224.451 22.491 224.451 cv
22.839 224.451 23.007 224.343 23.007 224.103 cv
23.007 223.863 22.863 223.671 22.551 223.551 cv
22.239 223.431 21.867 223.311 21.423 223.215 cv
21.351 223.119 li
21.351 222.975 li
21.399 222.903 li
21.471 222.867 li
21.855 222.963 22.167 223.059 22.383 223.131 cv
22.611 223.203 22.827 223.323 23.019 223.491 cv
23.211 223.659 23.307 223.875 23.307 224.127 cv
23.307 224.451 23.199 224.715 23.007 224.931 cv
22.803 225.147 22.539 225.255 22.215 225.255 cv
f
21.879 220.937 mo
21.615 220.937 21.351 220.901 21.075 220.829 cv
20.811 220.757 20.499 220.661 20.163 220.541 cv
19.827 220.421 19.527 220.301 19.275 220.205 cv
18.987 220.109 18.747 220.049 18.555 220.049 cv
18.315 220.049 18.195 220.145 18.195 220.313 cv
18.195 220.625 18.363 220.889 18.687 221.093 cv
19.023 221.309 19.383 221.453 19.779 221.549 cv
19.851 221.645 li
19.851 221.789 li
19.743 221.885 li
19.707 221.885 li
19.227 221.765 18.807 221.561 18.435 221.297 cv
18.075 221.033 17.883 220.697 17.883 220.289 cv
17.883 220.001 17.979 219.761 18.171 219.569 cv
18.363 219.377 18.591 219.269 18.879 219.269 cv
19.035 219.269 19.191 219.305 19.347 219.365 cv
19.443 219.413 19.659 219.497 19.983 219.617 cv
20.319 219.737 20.583 219.833 20.799 219.893 cv
21.015 219.965 21.231 220.013 21.435 220.061 cv
21.651 220.109 21.855 220.121 22.059 220.121 cv
22.323 220.121 22.551 220.073 22.731 219.953 cv
22.923 219.845 23.007 219.665 23.007 219.401 cv
23.007 218.897 22.695 218.441 22.059 218.057 cv
21.975 218.033 li
21.879 218.021 li
18.399 217.157 li
18.303 217.133 18.207 217.073 18.135 216.977 cv
18.063 216.881 18.015 216.773 18.015 216.653 cv
18.015 216.557 18.051 216.473 18.111 216.401 cv
18.171 216.329 18.255 216.293 18.351 216.293 cv
18.447 216.305 li
21.903 217.169 li
22.143 217.229 22.347 217.253 22.491 217.253 cv
22.839 217.253 23.007 217.145 23.007 216.905 cv
23.007 216.653 22.851 216.461 22.527 216.329 cv
22.215 216.209 21.843 216.101 21.423 216.005 cv
21.351 215.909 li
21.351 215.765 li
21.399 215.693 li
21.471 215.657 li
21.819 215.753 22.119 215.837 22.359 215.909 cv
22.599 215.993 22.827 216.125 23.019 216.293 cv
23.211 216.461 23.307 216.677 23.307 216.929 cv
23.307 217.193 23.235 217.421 23.115 217.613 cv
22.983 217.817 22.791 217.949 22.551 218.021 cv
22.791 218.213 22.971 218.417 23.103 218.657 cv
23.235 218.897 23.307 219.161 23.307 219.425 cv
23.307 219.893 23.187 220.265 22.935 220.529 cv
22.695 220.805 22.335 220.937 21.879 220.937 cv
f
23.307 212.936 mo
23.307 213.32 23.211 213.656 23.019 213.944 cv
22.827 214.232 22.551 214.448 22.215 214.592 cv
21.879 214.748 21.531 214.82 21.147 214.82 cv
20.583 214.82 20.043 214.676 19.539 214.388 cv
19.035 214.1 18.639 213.716 18.339 213.224 cv
18.039 212.732 17.883 212.204 17.883 211.64 cv
17.883 211.304 17.979 211.004 18.159 210.74 cv
18.339 210.488 18.591 210.356 18.915 210.356 cv
19.383 210.356 19.731 210.548 19.947 210.908 cv
20.175 211.28 20.319 211.7 20.367 212.156 cv
20.415 212.612 20.439 213.128 20.439 213.68 cv
20.439 213.716 li
20.919 213.848 21.327 213.908 21.663 213.908 cv
22.023 213.908 22.335 213.836 22.599 213.668 cv
22.875 213.5 23.007 213.248 23.007 212.912 cv
23.007 212.432 22.899 211.976 22.683 211.532 cv
22.467 211.1 22.155 210.74 21.771 210.464 cv
21.735 210.368 li
21.807 210.248 li
21.927 210.188 li
21.999 210.212 li
22.407 210.5 22.731 210.896 22.959 211.388 cv
23.187 211.892 23.307 212.408 23.307 212.936 cv
20.127 213.644 mo
20.127 213.188 20.115 212.756 20.067 212.36 cv
20.019 211.964 19.911 211.604 19.743 211.28 cv
19.575 210.968 19.299 210.8 18.927 210.8 cv
18.783 210.8 18.651 210.848 18.543 210.932 cv
18.435 211.016 18.351 211.124 18.291 211.244 cv
18.231 211.376 18.195 211.508 18.195 211.652 cv
18.195 211.988 18.291 212.3 18.471 212.564 cv
18.663 212.84 18.903 213.068 19.191 213.236 cv
19.491 213.416 19.803 213.548 20.127 213.644 cv
f
23.307 204.197 mo
23.307 204.581 23.211 204.917 23.043 205.205 cv
22.875 205.505 22.635 205.733 22.323 205.889 cv
22.023 206.057 21.675 206.129 21.291 206.129 cv
20.751 206.129 20.211 205.985 19.683 205.673 cv
19.155 205.373 18.723 204.977 18.387 204.473 cv
18.051 203.969 17.883 203.441 17.883 202.889 cv
17.883 202.601 17.943 202.337 18.039 202.097 cv
18.135 201.869 18.279 201.665 18.459 201.497 cv
18.651 201.329 18.867 201.197 19.107 201.101 cv
19.359 201.005 19.623 200.957 19.911 200.957 cv
20.331 200.957 20.739 201.053 21.147 201.221 cv
21.555 201.401 21.915 201.641 22.251 201.941 cv
22.587 202.253 22.839 202.601 23.031 202.997 cv
23.211 203.393 23.307 203.789 23.307 204.197 cv
23.007 204.173 mo
23.007 203.813 22.887 203.489 22.647 203.201 cv
22.407 202.913 22.095 202.661 21.723 202.469 cv
21.363 202.277 20.967 202.133 20.559 202.037 cv
20.151 201.941 19.779 201.881 19.443 201.881 cv
19.107 201.881 18.807 201.977 18.567 202.145 cv
18.327 202.313 18.195 202.577 18.195 202.913 cv
18.195 203.381 18.399 203.789 18.795 204.137 cv
19.203 204.497 19.683 204.761 20.235 204.941 cv
20.787 205.121 21.303 205.205 21.759 205.205 cv
22.107 205.205 22.407 205.121 22.647 204.941 cv
22.887 204.761 23.007 204.509 23.007 204.173 cv
f
25.155 199.638 mo
25.263 199.494 25.323 199.314 25.323 199.098 cv
25.323 198.81 24.999 198.582 24.375 198.402 cv
24.063 198.33 23.079 198.126 21.375 197.79 cv
18.435 197.238 li
18.435 198.27 li
18.435 198.354 18.387 198.39 18.279 198.39 cv
18.111 198.366 18.015 198.306 18.015 198.234 cv
18.015 197.166 li
17.235 197.022 li
16.995 196.974 16.791 196.938 16.611 196.89 cv
16.443 196.854 16.275 196.818 16.131 196.77 cv
15.987 196.722 15.819 196.662 15.627 196.566 cv
15.363 196.434 15.147 196.254 14.979 196.014 cv
14.811 195.786 14.727 195.534 14.727 195.258 cv
14.727 195.09 14.763 194.922 14.823 194.754 cv
14.895 194.586 14.991 194.454 15.111 194.346 cv
15.243 194.238 15.399 194.178 15.567 194.178 cv
15.783 194.178 15.963 194.25 16.107 194.382 cv
16.251 194.526 16.323 194.682 16.323 194.874 cv
16.323 195.006 16.287 195.114 16.203 195.21 cv
16.131 195.306 16.023 195.342 15.891 195.342 cv
15.723 195.342 15.567 195.282 15.435 195.162 cv
15.303 195.042 15.231 194.898 15.207 194.718 cv
15.099 194.874 15.039 195.054 15.039 195.27 cv
15.039 195.39 15.099 195.51 15.207 195.618 cv
15.327 195.726 15.447 195.798 15.567 195.822 cv
15.783 195.87 16.335 195.99 17.223 196.158 cv
18.015 196.302 li
18.015 195.066 li
18.015 194.994 18.075 194.946 18.171 194.946 cv
18.279 194.982 li
18.399 195.03 li
18.435 195.102 li
18.435 196.386 li
21.363 196.938 li
21.795 197.01 22.227 197.094 22.659 197.19 cv
23.091 197.286 23.535 197.406 24.003 197.574 cv
24.459 197.742 24.855 197.946 25.167 198.21 cv
25.479 198.474 25.635 198.774 25.635 199.122 cv
25.635 199.398 25.551 199.638 25.407 199.854 cv
25.251 200.07 25.047 200.166 24.795 200.166 cv
24.579 200.166 24.399 200.106 24.255 199.974 cv
24.111 199.842 24.039 199.674 24.039 199.47 cv
24.039 199.35 24.075 199.242 24.159 199.146 cv
24.231 199.05 24.339 199.002 24.471 199.002 cv
24.639 199.002 24.795 199.074 24.939 199.194 cv
25.083 199.326 25.155 199.47 25.155 199.638 cv
f
25.155 190.613 mo
25.263 190.469 25.323 190.289 25.323 190.073 cv
25.323 189.785 24.999 189.557 24.375 189.377 cv
24.063 189.305 23.079 189.101 21.375 188.765 cv
18.435 188.213 li
18.435 189.245 li
18.435 189.329 18.387 189.365 18.279 189.365 cv
18.111 189.341 18.015 189.281 18.015 189.209 cv
18.015 188.141 li
17.235 187.997 li
16.995 187.949 16.791 187.913 16.611 187.865 cv
16.443 187.829 16.275 187.793 16.131 187.745 cv
15.987 187.697 15.819 187.637 15.627 187.541 cv
15.363 187.409 15.147 187.229 14.979 186.989 cv
14.811 186.761 14.727 186.509 14.727 186.233 cv
14.727 186.065 14.763 185.897 14.823 185.729 cv
14.895 185.561 14.991 185.429 15.111 185.321 cv
15.243 185.213 15.399 185.153 15.567 185.153 cv
15.783 185.153 15.963 185.225 16.107 185.357 cv
16.251 185.501 16.323 185.657 16.323 185.849 cv
16.323 185.981 16.287 186.089 16.203 186.185 cv
16.131 186.281 16.023 186.317 15.891 186.317 cv
15.723 186.317 15.567 186.257 15.435 186.137 cv
15.303 186.017 15.231 185.873 15.207 185.693 cv
15.099 185.849 15.039 186.029 15.039 186.245 cv
15.039 186.365 15.099 186.485 15.207 186.593 cv
15.327 186.701 15.447 186.773 15.567 186.797 cv
15.783 186.845 16.335 186.965 17.223 187.133 cv
18.015 187.277 li
18.015 186.041 li
18.015 185.969 18.075 185.921 18.171 185.921 cv
18.279 185.957 li
18.399 186.005 li
18.435 186.077 li
18.435 187.361 li
21.363 187.913 li
21.795 187.985 22.227 188.069 22.659 188.165 cv
23.091 188.261 23.535 188.381 24.003 188.549 cv
24.459 188.717 24.855 188.921 25.167 189.185 cv
25.479 189.449 25.635 189.749 25.635 190.097 cv
25.635 190.373 25.551 190.613 25.407 190.829 cv
25.251 191.045 25.047 191.141 24.795 191.141 cv
24.579 191.141 24.399 191.081 24.255 190.949 cv
24.111 190.817 24.039 190.649 24.039 190.445 cv
24.039 190.325 24.075 190.217 24.159 190.121 cv
24.231 190.025 24.339 189.977 24.471 189.977 cv
24.639 189.977 24.795 190.049 24.939 190.169 cv
25.083 190.301 25.155 190.445 25.155 190.613 cv
f
20.427 184.687 mo
20.355 184.855 li
20.187 184.915 li
20.031 184.855 li
19.947 184.687 li
19.947 177.799 li
20.031 177.643 li
20.187 177.583 li
20.355 177.643 li
20.427 177.799 li
20.427 184.687 li
f
22.983 175.665 mo
22.875 175.653 li
19.299 174.753 li
19.083 174.705 18.879 174.669 18.711 174.669 cv
18.375 174.669 18.195 174.789 18.195 175.017 cv
18.195 175.269 18.351 175.461 18.651 175.581 cv
18.951 175.701 19.323 175.821 19.779 175.929 cv
19.839 175.965 li
19.851 176.025 li
19.851 176.169 li
19.815 176.241 li
19.731 176.265 li
19.383 176.181 19.083 176.097 18.843 176.013 cv
18.603 175.941 18.387 175.809 18.183 175.641 cv
17.991 175.473 17.883 175.269 17.883 175.005 cv
17.883 174.717 17.979 174.453 18.171 174.213 cv
18.363 173.985 18.603 173.865 18.891 173.865 cv
18.579 173.625 18.339 173.349 18.159 173.025 cv
17.979 172.713 17.883 172.365 17.883 172.005 cv
17.883 171.633 17.979 171.309 18.171 171.033 cv
18.363 170.757 18.639 170.613 18.999 170.613 cv
18.651 170.373 18.375 170.085 18.183 169.749 cv
17.991 169.425 17.883 169.065 17.883 168.669 cv
17.883 168.261 18.003 167.925 18.219 167.673 cv
18.447 167.421 18.771 167.289 19.179 167.289 cv
19.515 167.289 19.911 167.373 20.367 167.517 cv
20.835 167.661 21.351 167.841 21.927 168.057 cv
22.215 168.177 22.455 168.225 22.647 168.225 cv
22.887 168.225 23.007 168.141 23.007 167.949 cv
23.007 167.637 22.839 167.385 22.503 167.169 cv
22.167 166.965 21.807 166.821 21.423 166.725 cv
21.351 166.629 li
21.351 166.485 li
21.387 166.413 li
21.459 166.377 li
21.495 166.389 li
21.951 166.509 22.371 166.701 22.743 166.965 cv
23.127 167.229 23.307 167.565 23.307 167.973 cv
23.307 168.261 23.211 168.501 23.031 168.693 cv
22.839 168.897 22.611 168.993 22.323 168.993 cv
22.191 168.993 22.035 168.969 21.855 168.897 cv
21.255 168.681 20.727 168.489 20.247 168.333 cv
19.779 168.189 19.359 168.105 18.999 168.105 cv
18.783 168.105 18.591 168.153 18.435 168.237 cv
18.279 168.333 18.195 168.477 18.195 168.693 cv
18.195 169.125 18.339 169.509 18.603 169.833 cv
18.867 170.157 19.227 170.433 19.659 170.661 cv
19.839 170.697 li
22.923 171.465 li
23.043 171.501 23.127 171.561 23.199 171.657 cv
23.271 171.753 23.307 171.861 23.307 171.969 cv
23.307 172.065 23.271 172.149 23.223 172.221 cv
23.175 172.293 23.091 172.329 22.983 172.329 cv
22.875 172.317 li
19.815 171.549 li
19.491 171.477 19.215 171.429 18.999 171.429 cv
18.783 171.429 18.591 171.477 18.435 171.573 cv
18.279 171.669 18.195 171.813 18.195 172.029 cv
18.195 172.329 18.267 172.605 18.387 172.845 cv
18.519 173.085 18.687 173.301 18.903 173.481 cv
19.119 173.673 19.371 173.841 19.659 173.985 cv
22.923 174.801 li
23.043 174.825 23.127 174.885 23.199 174.981 cv
23.271 175.077 23.307 175.185 23.307 175.305 cv
23.307 175.401 23.271 175.485 23.223 175.557 cv
23.175 175.629 23.091 175.665 22.983 175.665 cv
f
23.307 163.642 mo
23.307 164.026 23.211 164.362 23.019 164.65 cv
22.827 164.938 22.551 165.154 22.215 165.298 cv
21.879 165.454 21.531 165.526 21.147 165.526 cv
20.583 165.526 20.043 165.382 19.539 165.094 cv
19.035 164.806 18.639 164.422 18.339 163.93 cv
18.039 163.438 17.883 162.91 17.883 162.346 cv
17.883 162.01 17.979 161.71 18.159 161.446 cv
18.339 161.194 18.591 161.062 18.915 161.062 cv
19.383 161.062 19.731 161.254 19.947 161.614 cv
20.175 161.986 20.319 162.406 20.367 162.862 cv
20.415 163.318 20.439 163.834 20.439 164.386 cv
20.439 164.422 li
20.919 164.554 21.327 164.614 21.663 164.614 cv
22.023 164.614 22.335 164.542 22.599 164.374 cv
22.875 164.206 23.007 163.954 23.007 163.618 cv
23.007 163.138 22.899 162.682 22.683 162.238 cv
22.467 161.806 22.155 161.446 21.771 161.17 cv
21.735 161.074 li
21.807 160.954 li
21.927 160.894 li
21.999 160.918 li
22.407 161.206 22.731 161.602 22.959 162.094 cv
23.187 162.598 23.307 163.114 23.307 163.642 cv
20.127 164.35 mo
20.127 163.894 20.115 163.462 20.067 163.066 cv
20.019 162.67 19.911 162.31 19.743 161.986 cv
19.575 161.674 19.299 161.506 18.927 161.506 cv
18.783 161.506 18.651 161.554 18.543 161.638 cv
18.435 161.722 18.351 161.83 18.291 161.95 cv
18.231 162.082 18.195 162.214 18.195 162.358 cv
18.195 162.694 18.291 163.006 18.471 163.27 cv
18.663 163.546 18.903 163.774 19.191 163.942 cv
19.491 164.122 19.803 164.254 20.127 164.35 cv
f
23.307 158.388 mo
23.307 158.892 23.127 159.3 22.743 159.588 cv
22.371 159.876 21.927 160.02 21.399 160.02 cv
20.895 160.02 20.355 159.888 19.803 159.624 cv
19.251 159.36 18.795 159.012 18.435 158.556 cv
18.075 158.1 17.883 157.62 17.883 157.092 cv
17.883 156.852 17.955 156.648 18.075 156.456 cv
18.207 156.264 18.387 156.12 18.603 156.012 cv
18.291 155.928 18.123 155.748 18.123 155.484 cv
18.123 155.388 18.159 155.304 18.219 155.232 cv
18.279 155.16 18.363 155.124 18.459 155.124 cv
18.519 155.136 li
18.555 155.136 li
21.903 155.976 li
22.143 156.036 22.347 156.06 22.491 156.06 cv
22.839 156.06 23.007 155.952 23.007 155.712 cv
23.007 155.472 22.851 155.28 22.527 155.148 cv
22.215 155.016 21.843 154.908 21.423 154.812 cv
21.351 154.716 li
21.351 154.572 li
21.399 154.5 li
21.471 154.464 li
22.035 154.608 22.479 154.764 22.815 154.932 cv
23.151 155.1 23.307 155.364 23.307 155.736 cv
23.307 156.012 23.223 156.252 23.079 156.456 cv
22.935 156.66 22.719 156.792 22.455 156.84 cv
23.031 157.356 23.307 157.872 23.307 158.388 cv
23.007 158.376 mo
23.007 158.088 22.899 157.812 22.683 157.536 cv
22.467 157.272 22.215 157.032 21.915 156.84 cv
21.879 156.828 li
19.275 156.18 li
19.239 156.168 li
18.951 156.216 18.711 156.324 18.507 156.48 cv
18.303 156.648 18.195 156.852 18.195 157.116 cv
18.195 157.392 18.315 157.644 18.531 157.872 cv
18.747 158.112 19.011 158.304 19.311 158.46 cv
19.635 158.628 20.079 158.772 20.631 158.916 cv
21.183 159.06 21.615 159.12 21.927 159.12 cv
22.215 159.12 22.467 159.06 22.683 158.94 cv
22.899 158.82 23.007 158.64 23.007 158.376 cv
f
21.879 152.87 mo
21.615 152.87 21.351 152.834 21.075 152.762 cv
20.811 152.69 20.499 152.594 20.163 152.474 cv
19.827 152.354 19.527 152.234 19.275 152.138 cv
18.987 152.042 18.747 151.982 18.555 151.982 cv
18.315 151.982 18.195 152.078 18.195 152.246 cv
18.195 152.558 18.363 152.822 18.687 153.026 cv
19.023 153.242 19.383 153.386 19.779 153.482 cv
19.851 153.578 li
19.851 153.722 li
19.743 153.818 li
19.707 153.818 li
19.227 153.698 18.807 153.494 18.435 153.23 cv
18.075 152.966 17.883 152.63 17.883 152.222 cv
17.883 151.934 17.979 151.694 18.171 151.502 cv
18.363 151.31 18.591 151.202 18.879 151.202 cv
19.035 151.202 19.191 151.238 19.347 151.298 cv
19.443 151.346 19.659 151.43 19.983 151.55 cv
20.319 151.67 20.583 151.766 20.799 151.826 cv
21.015 151.898 21.231 151.946 21.435 151.994 cv
21.651 152.042 21.855 152.054 22.059 152.054 cv
22.323 152.054 22.551 152.006 22.731 151.886 cv
22.923 151.778 23.007 151.598 23.007 151.334 cv
23.007 150.83 22.695 150.374 22.059 149.99 cv
21.975 149.966 li
21.879 149.954 li
18.399 149.09 li
18.303 149.066 18.207 149.006 18.135 148.91 cv
18.063 148.814 18.015 148.706 18.015 148.586 cv
18.015 148.49 18.051 148.406 18.111 148.334 cv
18.171 148.262 18.255 148.226 18.351 148.226 cv
18.447 148.238 li
21.903 149.102 li
22.143 149.162 22.347 149.186 22.491 149.186 cv
22.839 149.186 23.007 149.078 23.007 148.838 cv
23.007 148.586 22.851 148.394 22.527 148.262 cv
22.215 148.142 21.843 148.034 21.423 147.938 cv
21.351 147.842 li
21.351 147.698 li
21.399 147.626 li
21.471 147.59 li
21.819 147.686 22.119 147.77 22.359 147.842 cv
22.599 147.926 22.827 148.058 23.019 148.226 cv
23.211 148.394 23.307 148.61 23.307 148.862 cv
23.307 149.126 23.235 149.354 23.115 149.546 cv
22.983 149.75 22.791 149.882 22.551 149.954 cv
22.791 150.146 22.971 150.35 23.103 150.59 cv
23.235 150.83 23.307 151.094 23.307 151.358 cv
23.307 151.826 23.187 152.198 22.935 152.462 cv
22.695 152.738 22.335 152.87 21.879 152.87 cv
f
22.983 146.357 mo
22.875 146.345 li
19.299 145.445 li
19.083 145.397 18.879 145.361 18.711 145.361 cv
18.375 145.361 18.195 145.481 18.195 145.709 cv
18.195 145.961 18.351 146.153 18.651 146.273 cv
18.951 146.393 19.323 146.513 19.779 146.621 cv
19.839 146.657 li
19.851 146.717 li
19.851 146.861 li
19.815 146.933 li
19.731 146.957 li
19.383 146.873 19.083 146.789 18.843 146.705 cv
18.603 146.633 18.387 146.501 18.183 146.333 cv
17.991 146.165 17.883 145.961 17.883 145.697 cv
17.883 145.421 17.967 145.181 18.123 144.965 cv
18.291 144.761 18.495 144.629 18.759 144.581 cv
18.495 144.389 18.291 144.161 18.123 143.897 cv
17.967 143.633 17.883 143.345 17.883 143.033 cv
17.883 142.781 17.967 142.553 18.111 142.361 cv
18.255 142.169 18.459 142.073 18.711 142.073 cv
18.915 142.073 19.095 142.145 19.239 142.265 cv
19.395 142.397 19.467 142.565 19.467 142.769 cv
19.467 142.901 19.431 143.009 19.347 143.093 cv
19.275 143.189 19.167 143.225 19.035 143.225 cv
18.867 143.225 18.711 143.165 18.567 143.033 cv
18.423 142.913 18.351 142.757 18.351 142.589 cv
18.255 142.721 18.195 142.877 18.195 143.057 cv
18.195 143.405 18.327 143.705 18.567 143.957 cv
18.807 144.209 19.119 144.437 19.491 144.641 cv
22.923 145.493 li
23.043 145.517 23.127 145.577 23.199 145.673 cv
23.271 145.769 23.307 145.877 23.307 145.997 cv
23.307 146.093 23.271 146.177 23.223 146.249 cv
23.175 146.321 23.091 146.357 22.983 146.357 cv
f
23.307 139.455 mo
23.307 139.839 23.211 140.175 23.019 140.463 cv
22.827 140.751 22.551 140.967 22.215 141.111 cv
21.879 141.267 21.531 141.339 21.147 141.339 cv
20.583 141.339 20.043 141.195 19.539 140.907 cv
19.035 140.619 18.639 140.235 18.339 139.743 cv
18.039 139.251 17.883 138.723 17.883 138.159 cv
17.883 137.823 17.979 137.523 18.159 137.259 cv
18.339 137.007 18.591 136.875 18.915 136.875 cv
19.383 136.875 19.731 137.067 19.947 137.427 cv
20.175 137.799 20.319 138.219 20.367 138.675 cv
20.415 139.131 20.439 139.647 20.439 140.199 cv
20.439 140.235 li
20.919 140.367 21.327 140.427 21.663 140.427 cv
22.023 140.427 22.335 140.355 22.599 140.187 cv
22.875 140.019 23.007 139.767 23.007 139.431 cv
23.007 138.951 22.899 138.495 22.683 138.051 cv
22.467 137.619 22.155 137.259 21.771 136.983 cv
21.735 136.887 li
21.807 136.767 li
21.927 136.707 li
21.999 136.731 li
22.407 137.019 22.731 137.415 22.959 137.907 cv
23.187 138.411 23.307 138.927 23.307 139.455 cv
20.127 140.163 mo
20.127 139.707 20.115 139.275 20.067 138.879 cv
20.019 138.483 19.911 138.123 19.743 137.799 cv
19.575 137.487 19.299 137.319 18.927 137.319 cv
18.783 137.319 18.651 137.367 18.543 137.451 cv
18.435 137.535 18.351 137.643 18.291 137.763 cv
18.231 137.895 18.195 138.027 18.195 138.171 cv
18.195 138.507 18.291 138.819 18.471 139.083 cv
18.663 139.359 18.903 139.587 19.191 139.755 cv
19.491 139.935 19.803 140.067 20.127 140.163 cv
f
26.151 129.408 mo
25.791 129.864 25.395 130.248 24.939 130.56 cv
24.483 130.884 23.991 131.148 23.487 131.352 cv
22.983 131.556 22.443 131.712 21.879 131.808 cv
21.327 131.916 20.763 131.964 20.187 131.964 cv
19.611 131.964 19.047 131.916 18.483 131.808 cv
17.931 131.712 17.391 131.556 16.863 131.34 cv
16.347 131.136 15.855 130.872 15.399 130.548 cv
14.943 130.224 14.547 129.84 14.211 129.408 cv
14.187 129.348 li
14.187 129.24 li
14.223 129.18 li
14.295 129.144 li
14.367 129.168 li
14.751 129.564 15.171 129.888 15.603 130.152 cv
16.035 130.416 16.503 130.62 16.995 130.776 cv
17.499 130.932 18.003 131.04 18.531 131.112 cv
19.059 131.184 19.611 131.22 20.187 131.22 cv
22.731 131.22 24.651 130.548 25.971 129.18 cv
26.067 129.144 li
26.139 129.18 li
26.175 129.24 li
26.175 129.348 li
26.151 129.408 li
f
22.983 127.546 mo
22.875 127.534 li
19.299 126.634 li
19.083 126.586 18.879 126.55 18.711 126.55 cv
18.375 126.55 18.195 126.67 18.195 126.898 cv
18.195 127.15 18.351 127.342 18.651 127.462 cv
18.951 127.582 19.323 127.702 19.779 127.81 cv
19.839 127.846 li
19.851 127.906 li
19.851 128.05 li
19.815 128.122 li
19.731 128.146 li
19.383 128.062 19.083 127.978 18.843 127.894 cv
18.603 127.822 18.387 127.69 18.183 127.522 cv
17.991 127.354 17.883 127.15 17.883 126.886 cv
17.883 126.598 17.979 126.334 18.171 126.094 cv
18.363 125.866 18.603 125.746 18.891 125.746 cv
18.579 125.506 18.339 125.23 18.159 124.906 cv
17.979 124.594 17.883 124.246 17.883 123.886 cv
17.883 123.514 17.979 123.19 18.171 122.914 cv
18.363 122.638 18.639 122.494 18.999 122.494 cv
18.651 122.254 18.375 121.966 18.183 121.63 cv
17.991 121.306 17.883 120.946 17.883 120.55 cv
17.883 120.142 18.003 119.806 18.219 119.554 cv
18.447 119.302 18.771 119.17 19.179 119.17 cv
19.515 119.17 19.911 119.254 20.367 119.398 cv
20.835 119.542 21.351 119.722 21.927 119.938 cv
22.215 120.058 22.455 120.106 22.647 120.106 cv
22.887 120.106 23.007 120.022 23.007 119.83 cv
23.007 119.518 22.839 119.266 22.503 119.05 cv
22.167 118.846 21.807 118.702 21.423 118.606 cv
21.351 118.51 li
21.351 118.366 li
21.387 118.294 li
21.459 118.258 li
21.495 118.27 li
21.951 118.39 22.371 118.582 22.743 118.846 cv
23.127 119.11 23.307 119.446 23.307 119.854 cv
23.307 120.142 23.211 120.382 23.031 120.574 cv
22.839 120.778 22.611 120.874 22.323 120.874 cv
22.191 120.874 22.035 120.85 21.855 120.778 cv
21.255 120.562 20.727 120.37 20.247 120.214 cv
19.779 120.07 19.359 119.986 18.999 119.986 cv
18.783 119.986 18.591 120.034 18.435 120.118 cv
18.279 120.214 18.195 120.358 18.195 120.574 cv
18.195 121.006 18.339 121.39 18.603 121.714 cv
18.867 122.038 19.227 122.314 19.659 122.542 cv
19.839 122.578 li
22.923 123.346 li
23.043 123.382 23.127 123.442 23.199 123.538 cv
23.271 123.634 23.307 123.742 23.307 123.85 cv
23.307 123.946 23.271 124.03 23.223 124.102 cv
23.175 124.174 23.091 124.21 22.983 124.21 cv
22.875 124.198 li
19.815 123.43 li
19.491 123.358 19.215 123.31 18.999 123.31 cv
18.783 123.31 18.591 123.358 18.435 123.454 cv
18.279 123.55 18.195 123.694 18.195 123.91 cv
18.195 124.21 18.267 124.486 18.387 124.726 cv
18.519 124.966 18.687 125.182 18.903 125.362 cv
19.119 125.554 19.371 125.722 19.659 125.866 cv
22.923 126.682 li
23.043 126.706 23.127 126.766 23.199 126.862 cv
23.271 126.958 23.307 127.066 23.307 127.186 cv
23.307 127.282 23.271 127.366 23.223 127.438 cv
23.175 127.51 23.091 127.546 22.983 127.546 cv
f
21.879 116.663 mo
21.615 116.663 21.351 116.627 21.075 116.555 cv
20.811 116.483 20.499 116.387 20.163 116.267 cv
19.827 116.147 19.527 116.027 19.275 115.931 cv
18.987 115.835 18.747 115.775 18.555 115.775 cv
18.315 115.775 18.195 115.871 18.195 116.039 cv
18.195 116.351 18.363 116.615 18.687 116.819 cv
19.023 117.035 19.383 117.179 19.779 117.275 cv
19.851 117.371 li
19.851 117.515 li
19.743 117.611 li
19.707 117.611 li
19.227 117.491 18.807 117.287 18.435 117.023 cv
18.075 116.759 17.883 116.423 17.883 116.015 cv
17.883 115.727 17.979 115.487 18.171 115.295 cv
18.363 115.103 18.591 114.995 18.879 114.995 cv
19.035 114.995 19.191 115.031 19.347 115.091 cv
19.443 115.139 19.659 115.223 19.983 115.343 cv
20.319 115.463 20.583 115.559 20.799 115.619 cv
21.015 115.691 21.231 115.739 21.435 115.787 cv
21.651 115.835 21.855 115.847 22.059 115.847 cv
22.323 115.847 22.551 115.799 22.731 115.679 cv
22.923 115.571 23.007 115.391 23.007 115.127 cv
23.007 114.623 22.695 114.167 22.059 113.783 cv
21.975 113.759 li
21.879 113.747 li
18.399 112.883 li
18.303 112.859 18.207 112.799 18.135 112.703 cv
18.063 112.607 18.015 112.499 18.015 112.379 cv
18.015 112.283 18.051 112.199 18.111 112.127 cv
18.171 112.055 18.255 112.019 18.351 112.019 cv
18.447 112.031 li
21.903 112.895 li
22.143 112.955 22.347 112.979 22.491 112.979 cv
22.839 112.979 23.007 112.871 23.007 112.631 cv
23.007 112.379 22.851 112.187 22.527 112.055 cv
22.215 111.935 21.843 111.827 21.423 111.731 cv
21.351 111.635 li
21.351 111.491 li
21.399 111.419 li
21.471 111.383 li
21.819 111.479 22.119 111.563 22.359 111.635 cv
22.599 111.719 22.827 111.851 23.019 112.019 cv
23.211 112.187 23.307 112.403 23.307 112.655 cv
23.307 112.919 23.235 113.147 23.115 113.339 cv
22.983 113.543 22.791 113.675 22.551 113.747 cv
22.791 113.939 22.971 114.143 23.103 114.383 cv
23.235 114.623 23.307 114.887 23.307 115.151 cv
23.307 115.619 23.187 115.991 22.935 116.255 cv
22.695 116.531 22.335 116.663 21.879 116.663 cv
f
22.215 110.545 mo
22.107 110.545 li
21.975 110.521 li
21.867 110.509 li
15.927 109.021 li
15.795 108.997 15.687 108.973 15.603 108.961 cv
15.483 108.961 15.411 109.225 15.411 109.741 cv
15.411 109.825 15.363 109.861 15.255 109.861 cv
15.147 109.837 li
15.039 109.789 li
14.991 109.693 li
14.859 108.073 li
14.859 107.977 14.919 107.929 15.015 107.929 cv
21.915 109.657 li
22.047 109.717 22.239 109.741 22.491 109.741 cv
22.839 109.741 23.007 109.633 23.007 109.393 cv
23.007 109.153 22.863 108.961 22.551 108.841 cv
22.239 108.721 21.867 108.601 21.423 108.505 cv
21.351 108.409 li
21.351 108.265 li
21.399 108.193 li
21.471 108.157 li
21.855 108.253 22.167 108.349 22.383 108.421 cv
22.611 108.493 22.827 108.613 23.019 108.781 cv
23.211 108.949 23.307 109.165 23.307 109.417 cv
23.307 109.741 23.199 110.005 23.007 110.221 cv
22.803 110.437 22.539 110.545 22.215 110.545 cv
f
22.215 106.755 mo
22.095 106.755 21.987 106.743 21.879 106.719 cv
18.435 105.855 li
18.435 107.115 li
18.435 107.199 18.387 107.235 18.279 107.235 cv
18.111 107.211 18.015 107.151 18.015 107.079 cv
18.015 105.747 li
16.059 105.267 li
15.963 105.243 15.867 105.183 15.795 105.087 cv
15.723 104.991 15.675 104.883 15.675 104.763 cv
15.675 104.667 15.711 104.583 15.771 104.511 cv
15.831 104.439 15.915 104.403 16.011 104.403 cv
16.071 104.415 li
16.107 104.415 li
18.015 104.895 li
18.015 103.659 li
18.015 103.587 18.075 103.539 18.171 103.539 cv
18.267 103.563 li
18.387 103.611 li
18.435 103.695 li
18.435 105.003 li
21.903 105.867 li
22.131 105.927 22.323 105.951 22.491 105.951 cv
22.839 105.951 23.007 105.843 23.007 105.603 cv
23.007 105.255 22.851 104.943 22.515 104.667 cv
22.179 104.403 21.819 104.187 21.423 104.043 cv
21.351 103.947 li
21.351 103.803 li
21.387 103.731 li
21.459 103.695 li
21.495 103.707 li
21.975 103.887 22.407 104.139 22.767 104.475 cv
23.127 104.811 23.307 105.195 23.307 105.627 cv
23.307 105.951 23.199 106.215 23.007 106.431 cv
22.803 106.647 22.539 106.755 22.215 106.755 cv
f
22.323 102.233 mo
22.179 102.233 22.023 102.209 21.855 102.137 cv
19.275 101.165 li
18.987 101.069 18.747 101.009 18.555 101.009 cv
18.315 101.009 18.195 101.105 18.195 101.273 cv
18.195 101.585 18.363 101.849 18.687 102.053 cv
19.023 102.269 19.383 102.413 19.779 102.509 cv
19.851 102.605 li
19.851 102.749 li
19.743 102.845 li
19.707 102.845 li
19.227 102.725 18.807 102.521 18.435 102.257 cv
18.075 101.993 17.883 101.657 17.883 101.249 cv
17.883 100.961 17.979 100.721 18.171 100.529 cv
18.363 100.337 18.591 100.229 18.879 100.229 cv
19.035 100.229 19.191 100.265 19.347 100.325 cv
21.927 101.297 li
22.191 101.417 22.431 101.465 22.647 101.465 cv
22.887 101.465 23.007 101.381 23.007 101.189 cv
23.007 100.877 22.839 100.625 22.503 100.409 cv
22.167 100.205 21.807 100.061 21.423 99.9649 cv
21.351 99.8689 li
21.351 99.7249 li
21.387 99.6529 li
21.459 99.6169 li
21.495 99.6289 li
21.951 99.7489 22.371 99.9409 22.743 100.205 cv
23.127 100.481 23.307 100.817 23.307 101.213 cv
23.307 101.501 23.211 101.741 23.031 101.933 cv
22.839 102.137 22.611 102.233 22.323 102.233 cv
15.915 100.877 mo
15.747 100.877 15.603 100.817 15.459 100.673 cv
15.327 100.529 15.255 100.373 15.255 100.205 cv
15.255 100.073 15.303 99.9649 15.387 99.8689 cv
15.471 99.7849 15.579 99.7369 15.699 99.7369 cv
15.879 99.7369 16.035 99.8089 16.167 99.9529 cv
16.311 100.097 16.371 100.253 16.371 100.421 cv
16.371 100.553 16.335 100.661 16.239 100.745 cv
16.155 100.841 16.047 100.877 15.915 100.877 cv
f
25.503 99.3261 mo
25.503 99.3981 25.443 99.4341 25.347 99.4341 cv
25.167 99.4101 25.083 99.3501 25.083 99.2781 cv
25.083 99.0381 25.059 98.8701 25.011 98.7741 cv
24.963 98.6781 24.855 98.5941 24.675 98.5341 cv
19.287 97.1781 li
19.143 97.1301 18.951 97.0941 18.711 97.0941 cv
18.375 97.0941 18.195 97.2141 18.195 97.4421 cv
18.195 97.6941 18.351 97.8861 18.651 98.0061 cv
18.951 98.1261 19.323 98.2461 19.779 98.3541 cv
19.851 98.4501 li
19.851 98.5941 li
19.815 98.6541 li
19.731 98.6901 li
19.383 98.6061 19.083 98.5221 18.843 98.4381 cv
18.603 98.3661 18.387 98.2341 18.183 98.0661 cv
17.991 97.8981 17.883 97.6941 17.883 97.4301 cv
17.883 97.1661 17.967 96.9261 18.123 96.7101 cv
18.279 96.5061 18.483 96.3741 18.747 96.3141 cv
18.495 96.0981 18.291 95.8581 18.123 95.5941 cv
17.967 95.3301 17.883 95.0541 17.883 94.7661 cv
17.883 94.4301 17.979 94.1421 18.159 93.8901 cv
18.339 93.6501 18.579 93.4581 18.867 93.3381 cv
19.155 93.2181 19.467 93.1461 19.803 93.1461 cv
20.319 93.1461 20.847 93.2781 21.399 93.5421 cv
21.951 93.8061 22.407 94.1661 22.767 94.6101 cv
23.127 95.0661 23.307 95.5461 23.307 96.0621 cv
23.307 96.3021 23.235 96.5061 23.115 96.6981 cv
22.995 96.8901 22.815 97.0461 22.599 97.1421 cv
24.723 97.6821 li
24.843 97.7061 24.903 97.7181 24.927 97.7181 cv
25.023 97.7181 25.083 97.4541 25.083 96.9261 cv
25.083 96.8541 25.131 96.8061 25.239 96.8061 cv
25.335 96.8301 25.407 96.8541 25.443 96.8781 cv
25.503 97.0101 li
25.503 99.3261 li
23.007 96.0501 mo
23.007 95.7741 22.899 95.5221 22.671 95.2821 cv
22.443 95.0421 22.179 94.8501 21.891 94.6941 cv
21.675 94.5981 21.423 94.4901 21.111 94.3941 cv
20.799 94.2981 20.475 94.2141 20.115 94.1421 cv
19.767 94.0701 19.491 94.0341 19.275 94.0341 cv
19.095 94.0341 18.927 94.0581 18.759 94.1061 cv
18.603 94.1541 18.471 94.2381 18.363 94.3461 cv
18.255 94.4661 18.195 94.6101 18.195 94.7901 cv
18.195 95.0901 18.303 95.3661 18.507 95.6301 cv
18.723 95.8941 18.975 96.1221 19.287 96.3261 cv
19.323 96.3261 li
21.975 96.9861 li
22.263 96.9381 22.515 96.8301 22.707 96.6741 cv
22.911 96.5181 23.007 96.3141 23.007 96.0501 cv
f
22.215 92.4749 mo
22.107 92.4749 li
21.975 92.4509 li
21.867 92.4389 li
15.927 90.9509 li
15.795 90.9269 15.687 90.9029 15.603 90.8909 cv
15.483 90.8909 15.411 91.1549 15.411 91.6709 cv
15.411 91.7549 15.363 91.7909 15.255 91.7909 cv
15.147 91.7669 li
15.039 91.7189 li
14.991 91.6229 li
14.859 90.0029 li
14.859 89.9069 14.919 89.8589 15.015 89.8589 cv
21.915 91.5869 li
22.047 91.6469 22.239 91.6709 22.491 91.6709 cv
22.839 91.6709 23.007 91.5629 23.007 91.3229 cv
23.007 91.0829 22.863 90.8909 22.551 90.7709 cv
22.239 90.6509 21.867 90.5309 21.423 90.4349 cv
21.351 90.3389 li
21.351 90.1949 li
21.399 90.1229 li
21.471 90.0869 li
21.855 90.1829 22.167 90.2789 22.383 90.3509 cv
22.611 90.4229 22.827 90.5429 23.019 90.7109 cv
23.211 90.8789 23.307 91.0949 23.307 91.3469 cv
23.307 91.6709 23.199 91.9349 23.007 92.1509 cv
22.803 92.3669 22.539 92.4749 22.215 92.4749 cv
f
23.307 87.0167 mo
23.307 87.4007 23.211 87.7367 23.019 88.0247 cv
22.827 88.3127 22.551 88.5287 22.215 88.6727 cv
21.879 88.8287 21.531 88.9007 21.147 88.9007 cv
20.583 88.9007 20.043 88.7567 19.539 88.4687 cv
19.035 88.1807 18.639 87.7967 18.339 87.3047 cv
18.039 86.8127 17.883 86.2847 17.883 85.7207 cv
17.883 85.3847 17.979 85.0847 18.159 84.8207 cv
18.339 84.5687 18.591 84.4367 18.915 84.4367 cv
19.383 84.4367 19.731 84.6287 19.947 84.9887 cv
20.175 85.3607 20.319 85.7807 20.367 86.2367 cv
20.415 86.6927 20.439 87.2087 20.439 87.7607 cv
20.439 87.7967 li
20.919 87.9287 21.327 87.9887 21.663 87.9887 cv
22.023 87.9887 22.335 87.9167 22.599 87.7487 cv
22.875 87.5807 23.007 87.3287 23.007 86.9927 cv
23.007 86.5127 22.899 86.0567 22.683 85.6127 cv
22.467 85.1807 22.155 84.8207 21.771 84.5447 cv
21.735 84.4487 li
21.807 84.3287 li
21.927 84.2687 li
21.999 84.2927 li
22.407 84.5807 22.731 84.9767 22.959 85.4687 cv
23.187 85.9727 23.307 86.4887 23.307 87.0167 cv
20.127 87.7247 mo
20.127 87.2687 20.115 86.8367 20.067 86.4407 cv
20.019 86.0447 19.911 85.6847 19.743 85.3607 cv
19.575 85.0487 19.299 84.8807 18.927 84.8807 cv
18.783 84.8807 18.651 84.9287 18.543 85.0127 cv
18.435 85.0967 18.351 85.2047 18.291 85.3247 cv
18.231 85.4567 18.195 85.5887 18.195 85.7327 cv
18.195 86.0687 18.291 86.3807 18.471 86.6447 cv
18.663 86.9207 18.903 87.1487 19.191 87.3167 cv
19.491 87.4967 19.803 87.6287 20.127 87.7247 cv
f
23.187 80.078 mo
23.187 80.162 23.139 80.198 23.031 80.198 cv
22.935 80.174 li
22.815 80.138 li
22.767 80.042 li
22.767 79.286 22.527 78.842 22.035 78.71 cv
15.771 77.15 li
15.603 77.126 li
15.519 77.126 15.471 77.174 15.459 77.27 cv
15.435 77.426 15.411 77.714 15.411 78.134 cv
15.411 78.218 15.363 78.254 15.255 78.254 cv
15.147 78.23 li
15.039 78.182 li
14.991 78.098 li
14.991 75.986 li
15.123 75.83 li
21.999 74.894 li
15.123 70.526 li
15.039 70.478 14.991 70.394 14.991 70.298 cv
14.991 68.258 li
14.991 68.186 15.051 68.138 15.147 68.138 cv
15.255 68.174 li
15.375 68.222 li
15.411 68.294 li
15.411 68.786 15.447 69.122 15.495 69.314 cv
15.531 69.422 15.639 69.494 15.819 69.542 cv
22.407 71.186 li
22.575 71.21 li
22.659 71.198 li
22.695 71.162 li
22.719 71.066 li
22.755 70.922 22.767 70.634 22.767 70.202 cv
22.767 70.13 22.827 70.082 22.923 70.082 cv
23.043 70.118 23.115 70.142 23.139 70.154 cv
23.187 70.286 li
23.187 73.418 li
23.187 73.502 23.139 73.538 23.031 73.538 cv
22.923 73.514 li
22.815 73.466 li
22.767 73.382 li
22.767 72.902 22.743 72.554 22.683 72.362 cv
22.659 72.266 22.551 72.182 22.359 72.134 cv
15.411 70.406 li
23.055 75.254 li
23.151 75.302 23.187 75.386 23.187 75.494 cv
23.187 75.602 23.151 75.662 23.055 75.662 cv
15.507 76.682 li
22.083 78.326 li
22.167 78.35 li
22.263 78.362 li
22.479 78.362 22.611 78.278 22.671 78.098 cv
22.743 77.918 22.767 77.69 22.767 77.426 cv
22.767 77.354 22.827 77.306 22.923 77.306 cv
23.031 77.33 23.103 77.354 23.139 77.378 cv
23.187 77.51 li
23.187 80.078 li
f
23.187 68.4834 mo
23.187 68.5674 23.139 68.6034 23.031 68.6034 cv
22.923 68.5794 li
22.815 68.5314 li
22.767 68.4474 li
22.767 67.9674 22.743 67.6194 22.683 67.4274 cv
22.659 67.3314 22.551 67.2474 22.359 67.1994 cv
15.771 65.5554 li
15.603 65.5314 li
15.519 65.5314 15.471 65.5794 15.459 65.6754 cv
15.435 65.8314 15.411 66.1194 15.411 66.5394 cv
15.411 66.6234 15.363 66.6594 15.255 66.6594 cv
15.147 66.6354 li
15.039 66.5874 li
14.991 66.5034 li
14.991 60.1674 li
14.991 60.0954 15.051 60.0474 15.147 60.0474 cv
17.631 60.3354 li
17.703 60.3834 li
17.739 60.4554 li
17.739 60.5634 li
17.739 60.6474 17.691 60.6834 17.583 60.6834 cv
17.223 60.6354 16.935 60.6114 16.695 60.6114 cv
16.299 60.6114 16.011 60.7074 15.819 60.8754 cv
15.627 61.0434 15.519 61.2594 15.471 61.5234 cv
15.435 61.7874 15.411 62.1474 15.411 62.6034 cv
15.411 63.8874 li
15.411 64.1034 15.435 64.2474 15.471 64.3194 cv
15.507 64.3914 15.627 64.4634 15.819 64.5114 cv
18.879 65.2794 li
18.879 64.3794 li
18.879 64.0914 18.867 63.8514 18.831 63.6594 cv
18.807 63.4794 18.747 63.3234 18.651 63.2034 cv
18.567 63.0834 18.435 62.9874 18.267 62.9034 cv
18.099 62.8314 17.871 62.7474 17.583 62.6754 cv
17.475 62.5554 li
17.475 62.4474 li
17.475 62.3754 17.535 62.3274 17.631 62.3274 cv
20.595 63.0594 li
20.703 63.1794 li
20.703 63.2874 li
20.703 63.3714 20.655 63.4074 20.547 63.4074 cv
20.343 63.3594 li
20.295 63.3474 20.211 63.3354 20.103 63.3114 cv
20.007 63.2994 19.911 63.2874 19.827 63.2874 cv
19.599 63.2874 19.455 63.3954 19.395 63.5994 cv
19.335 63.8034 19.299 64.0674 19.299 64.3914 cv
19.299 65.3754 li
22.407 66.1554 li
22.527 66.1794 li
22.623 66.1794 22.683 66.1554 22.683 66.0954 cv
22.743 65.8914 22.767 65.4834 22.767 64.8714 cv
22.767 64.7994 22.827 64.7514 22.923 64.7514 cv
23.043 64.7874 23.115 64.8114 23.139 64.8234 cv
23.187 64.9554 li
23.187 68.4834 li
f
23.439 60.5986 mo
23.391 60.6706 li
23.319 60.6946 li
20.535 59.9986 li
20.463 59.9026 li
20.463 59.7586 li
20.499 59.6866 li
20.583 59.6626 li
20.859 59.7346 21.099 59.7586 21.315 59.7586 cv
21.903 59.7586 22.335 59.5666 22.611 59.1706 cv
22.899 58.7746 23.031 58.2706 23.031 57.6586 cv
23.031 57.3946 22.971 57.1426 22.839 56.8906 cv
22.719 56.6386 22.551 56.4106 22.335 56.2186 cv
22.131 56.0266 21.903 55.8826 21.639 55.7626 cv
21.387 55.6546 21.123 55.5946 20.859 55.5946 cv
20.583 55.5946 20.331 55.6786 20.115 55.8226 cv
19.899 55.9666 19.755 56.1706 19.683 56.4346 cv
19.299 57.8986 li
19.203 58.2946 18.987 58.6066 18.663 58.8466 cv
18.351 59.0866 17.991 59.1946 17.583 59.1946 cv
17.103 59.1946 16.647 59.0506 16.203 58.7626 cv
15.759 58.4746 15.399 58.1026 15.135 57.6466 cv
14.871 57.1906 14.727 56.7226 14.727 56.2426 cv
14.727 55.8826 14.799 55.5466 14.931 55.2346 cv
15.075 54.9346 15.279 54.6946 15.567 54.5266 cv
14.763 53.8426 li
14.727 53.7586 li
14.727 53.6866 li
14.775 53.6146 li
14.847 53.5786 li
17.631 54.2746 li
17.715 54.3706 li
17.715 54.5146 li
17.715 54.5866 17.679 54.6226 17.583 54.6226 cv
17.331 54.5866 17.115 54.5626 16.923 54.5626 cv
16.563 54.5626 16.239 54.6346 15.963 54.7546 cv
15.687 54.8866 15.471 55.0786 15.327 55.3306 cv
15.183 55.5946 15.111 55.9066 15.111 56.2786 cv
15.111 56.6026 15.207 56.9266 15.387 57.2386 cv
15.579 57.5506 15.819 57.8146 16.119 58.0066 cv
16.431 58.1986 16.743 58.2946 17.067 58.2946 cv
17.331 58.2946 17.559 58.2226 17.751 58.0666 cv
17.955 57.9226 18.087 57.7186 18.159 57.4666 cv
18.543 56.0026 li
18.615 55.7386 18.747 55.5106 18.915 55.3186 cv
19.095 55.1266 19.311 54.9706 19.551 54.8626 cv
19.791 54.7666 20.055 54.7066 20.343 54.7066 cv
20.727 54.7066 21.111 54.7906 21.471 54.9466 cv
21.843 55.1146 22.179 55.3306 22.479 55.6186 cv
22.791 55.9066 23.019 56.2426 23.187 56.6026 cv
23.355 56.9626 23.439 57.3346 23.439 57.7066 cv
23.439 58.6666 23.163 59.3506 22.611 59.7586 cv
23.403 60.4306 li
23.439 60.5146 li
23.439 60.5986 li
f
26.175 53.1971 mo
26.067 53.3051 li
25.995 53.2811 li
24.651 51.9131 22.731 51.2291 20.187 51.2291 cv
17.643 51.2291 15.711 51.9131 14.391 53.2571 cv
14.295 53.3051 li
14.223 53.2691 li
14.187 53.1971 li
14.187 53.0891 li
14.211 53.0291 li
14.667 52.4531 15.219 51.9731 15.867 51.5891 cv
16.515 51.2051 17.211 50.9291 17.943 50.7491 cv
18.675 50.5811 19.419 50.4851 20.187 50.4851 cv
20.763 50.4851 21.315 50.5331 21.867 50.6291 cv
22.419 50.7251 22.947 50.8811 23.475 51.0851 cv
24.003 51.3011 24.483 51.5651 24.939 51.8771 cv
25.395 52.2011 25.791 52.5851 26.151 53.0291 cv
26.175 53.0891 li
26.175 53.1971 li
f
1 lw
[6 6 ] 0 dsh
81.5 39.6123 mo
110.188 94.7623 li
138.876 107.739 li
167.564 127.203 li
196.252 153.156 li
224.94 192.086 li
253.628 192.086 li
282.316 195.33 li
311.004 205.062 li
339.692 182.353 li
368.38 192.086 li
397.068 192.086 li
425.756 208.306 li
454.444 243.992 li
483.132 234.259 li
511.82 240.747 li
540.508 243.992 li
@
gsave
78.7044 44.105 mo
84.2956 44.105 li
84.2956 35.1197 li
78.7044 35.1197 li
cp
clp
81.5 43.855 mo
84.0456 39.6123 li
81.5 35.3697 li
78.9544 39.6123 li
cp
f
.5 lw
0 lj
[] 0 dsh
81.5 43.855 mo
84.0456 39.6123 li
81.5 35.3697 li
78.9544 39.6123 li
cp
@
grestore
gsave
107.392 99.2549 mo
112.984 99.2549 li
112.984 90.2697 li
107.392 90.2697 li
cp
clp
110.188 99.0049 mo
112.734 94.7623 li
110.188 90.5196 li
107.642 94.7623 li
cp
f
.5 lw
0 lj
[] 0 dsh
110.188 99.0049 mo
112.734 94.7623 li
110.188 90.5196 li
107.642 94.7623 li
cp
@
grestore
gsave
136.08 112.231 mo
141.672 112.231 li
141.672 103.246 li
136.08 103.246 li
cp
clp
138.876 111.981 mo
141.422 107.739 li
138.876 103.496 li
136.33 107.739 li
cp
f
.5 lw
0 lj
[] 0 dsh
138.876 111.981 mo
141.422 107.739 li
138.876 103.496 li
136.33 107.739 li
cp
@
grestore
gsave
164.768 131.696 mo
170.36 131.696 li
170.36 122.711 li
164.768 122.711 li
cp
clp
167.564 131.446 mo
170.11 127.203 li
167.564 122.961 li
165.018 127.203 li
cp
f
.5 lw
0 lj
[] 0 dsh
167.564 131.446 mo
170.11 127.203 li
167.564 122.961 li
165.018 127.203 li
cp
@
grestore
gsave
193.456 157.649 mo
199.048 157.649 li
199.048 148.664 li
193.456 148.664 li
cp
clp
196.252 157.399 mo
198.798 153.156 li
196.252 148.914 li
193.706 153.156 li
cp
f
.5 lw
0 lj
[] 0 dsh
196.252 157.399 mo
198.798 153.156 li
196.252 148.914 li
193.706 153.156 li
cp
@
grestore
gsave
222.144 196.578 mo
227.736 196.578 li
227.736 187.593 li
222.144 187.593 li
cp
clp
224.94 196.328 mo
227.486 192.086 li
224.94 187.843 li
222.394 192.086 li
cp
f
.5 lw
0 lj
[] 0 dsh
224.94 196.328 mo
227.486 192.086 li
224.94 187.843 li
222.394 192.086 li
cp
@
grestore
gsave
250.832 196.578 mo
256.424 196.578 li
256.424 187.593 li
250.832 187.593 li
cp
clp
253.628 196.328 mo
256.174 192.086 li
253.628 187.843 li
251.082 192.086 li
cp
f
.5 lw
0 lj
[] 0 dsh
253.628 196.328 mo
256.174 192.086 li
253.628 187.843 li
251.082 192.086 li
cp
@
grestore
gsave
279.52 199.822 mo
285.112 199.822 li
285.112 190.837 li
279.52 190.837 li
cp
clp
282.316 199.572 mo
284.862 195.33 li
282.316 191.087 li
279.77 195.33 li
cp
f
.5 lw
0 lj
[] 0 dsh
282.316 199.572 mo
284.862 195.33 li
282.316 191.087 li
279.77 195.33 li
cp
@
grestore
gsave
308.208 209.555 mo
313.8 209.555 li
313.8 200.57 li
308.208 200.57 li
cp
clp
311.004 209.305 mo
313.55 205.062 li
311.004 200.82 li
308.458 205.062 li
cp
f
.5 lw
0 lj
[] 0 dsh
311.004 209.305 mo
313.55 205.062 li
311.004 200.82 li
308.458 205.062 li
cp
@
grestore
gsave
336.896 186.846 mo
342.488 186.846 li
342.488 177.861 li
336.896 177.861 li
cp
clp
339.692 186.596 mo
342.238 182.353 li
339.692 178.111 li
337.146 182.353 li
cp
f
.5 lw
0 lj
[] 0 dsh
339.692 186.596 mo
342.238 182.353 li
339.692 178.111 li
337.146 182.353 li
cp
@
grestore
gsave
365.584 196.578 mo
371.176 196.578 li
371.176 187.593 li
365.584 187.593 li
cp
clp
368.38 196.328 mo
370.926 192.086 li
368.38 187.843 li
365.834 192.086 li
cp
f
.5 lw
0 lj
[] 0 dsh
368.38 196.328 mo
370.926 192.086 li
368.38 187.843 li
365.834 192.086 li
cp
@
grestore
gsave
394.272 196.578 mo
399.864 196.578 li
399.864 187.593 li
394.272 187.593 li
cp
clp
397.068 196.328 mo
399.614 192.086 li
397.068 187.843 li
394.522 192.086 li
cp
f
.5 lw
0 lj
[] 0 dsh
397.068 196.328 mo
399.614 192.086 li
397.068 187.843 li
394.522 192.086 li
cp
@
grestore
gsave
422.96 212.799 mo
428.552 212.799 li
428.552 203.814 li
422.96 203.814 li
cp
clp
425.756 212.549 mo
428.302 208.306 li
425.756 204.064 li
423.21 208.306 li
cp
f
.5 lw
0 lj
[] 0 dsh
425.756 212.549 mo
428.302 208.306 li
425.756 204.064 li
423.21 208.306 li
cp
@
grestore
gsave
451.648 248.484 mo
457.24 248.484 li
457.24 239.499 li
451.648 239.499 li
cp
clp
454.444 248.234 mo
456.99 243.992 li
454.444 239.749 li
451.898 243.992 li
cp
f
.5 lw
0 lj
[] 0 dsh
454.444 248.234 mo
456.99 243.992 li
454.444 239.749 li
451.898 243.992 li
cp
@
grestore
gsave
480.336 238.752 mo
485.927 238.752 li
485.927 229.767 li
480.336 229.767 li
cp
clp
483.132 238.502 mo
485.678 234.259 li
483.132 230.017 li
480.586 234.259 li
cp
f
.5 lw
0 lj
[] 0 dsh
483.132 238.502 mo
485.678 234.259 li
483.132 230.017 li
480.586 234.259 li
cp
@
grestore
gsave
509.024 245.24 mo
514.615 245.24 li
514.615 236.255 li
509.024 236.255 li
cp
clp
511.82 244.99 mo
514.365 240.747 li
511.82 236.505 li
509.274 240.747 li
cp
f
.5 lw
0 lj
[] 0 dsh
511.82 244.99 mo
514.365 240.747 li
511.82 236.505 li
509.274 240.747 li
cp
@
grestore
gsave
537.712 248.484 mo
543.303 248.484 li
543.303 239.499 li
537.712 239.499 li
cp
clp
540.508 248.234 mo
543.054 243.992 li
540.508 239.749 li
537.962 243.992 li
cp
f
.5 lw
0 lj
[] 0 dsh
540.508 248.234 mo
543.054 243.992 li
540.508 239.749 li
537.962 243.992 li
cp
@
grestore
[1 3 ] 0 dsh
81.5 234.259 mo
110.188 231.015 li
138.876 240.747 li
167.564 237.503 li
196.252 243.992 li
224.94 253.724 li
253.628 250.48 li
282.316 253.724 li
311.004 250.48 li
339.692 250.48 li
368.38 253.724 li
397.068 250.48 li
425.756 247.236 li
454.444 253.724 li
483.132 253.724 li
511.82 253.724 li
540.508 253.724 li
@
gsave
78.25 237.509 mo
84.75 237.509 li
84.75 231.009 li
78.25 231.009 li
cp
clp
.5 lw
[] 0 dsh
81.5 237.259 mo
82.2956 237.259 83.0587 236.943 83.6213 236.381 cv
84.1839 235.818 84.5 235.055 84.5 234.259 cv
84.5 233.464 84.1839 232.7 83.6213 232.138 cv
83.0587 231.575 82.2956 231.259 81.5 231.259 cv
80.7044 231.259 79.9413 231.575 79.3787 232.138 cv
78.8161 232.7 78.5 233.464 78.5 234.259 cv
78.5 235.055 78.8161 235.818 79.3787 236.381 cv
79.9413 236.943 80.7044 237.259 81.5 237.259 cv
cp
@
grestore
gsave
106.938 234.265 mo
113.438 234.265 li
113.438 227.765 li
106.938 227.765 li
cp
clp
.5 lw
[] 0 dsh
110.188 234.015 mo
110.984 234.015 111.747 233.699 112.309 233.136 cv
112.872 232.574 113.188 231.811 113.188 231.015 cv
113.188 230.219 112.872 229.456 112.309 228.894 cv
111.747 228.331 110.984 228.015 110.188 228.015 cv
109.392 228.015 108.629 228.331 108.067 228.894 cv
107.504 229.456 107.188 230.219 107.188 231.015 cv
107.188 231.811 107.504 232.574 108.067 233.136 cv
108.629 233.699 109.392 234.015 110.188 234.015 cv
cp
@
grestore
gsave
135.626 243.997 mo
142.126 243.997 li
142.126 237.497 li
135.626 237.497 li
cp
clp
.5 lw
[] 0 dsh
138.876 243.747 mo
139.672 243.747 140.435 243.431 140.997 242.869 cv
141.56 242.306 141.876 241.543 141.876 240.747 cv
141.876 239.952 141.56 239.189 140.997 238.626 cv
140.435 238.064 139.672 237.747 138.876 237.747 cv
138.08 237.747 137.317 238.064 136.755 238.626 cv
136.192 239.189 135.876 239.952 135.876 240.747 cv
135.876 241.543 136.192 242.306 136.755 242.869 cv
137.317 243.431 138.08 243.747 138.876 243.747 cv
cp
@
grestore
gsave
164.314 240.753 mo
170.814 240.753 li
170.814 234.253 li
164.314 234.253 li
cp
clp
.5 lw
[] 0 dsh
167.564 240.503 mo
168.36 240.503 169.123 240.187 169.685 239.625 cv
170.248 239.062 170.564 238.299 170.564 237.503 cv
170.564 236.708 170.248 235.945 169.685 235.382 cv
169.123 234.819 168.36 234.503 167.564 234.503 cv
166.768 234.503 166.005 234.819 165.443 235.382 cv
164.88 235.945 164.564 236.708 164.564 237.503 cv
164.564 238.299 164.88 239.062 165.443 239.625 cv
166.005 240.187 166.768 240.503 167.564 240.503 cv
cp
@
grestore
gsave
193.002 247.242 mo
199.502 247.242 li
199.502 240.742 li
193.002 240.742 li
cp
clp
.5 lw
[] 0 dsh
196.252 246.992 mo
197.048 246.992 197.811 246.675 198.373 246.113 cv
198.936 245.55 199.252 244.787 199.252 243.992 cv
199.252 243.196 198.936 242.433 198.373 241.87 cv
197.811 241.308 197.048 240.992 196.252 240.992 cv
195.456 240.992 194.693 241.308 194.131 241.87 cv
193.568 242.433 193.252 243.196 193.252 243.992 cv
193.252 244.787 193.568 245.55 194.131 246.113 cv
194.693 246.675 195.456 246.992 196.252 246.992 cv
cp
@
grestore
gsave
221.69 256.974 mo
228.19 256.974 li
228.19 250.474 li
221.69 250.474 li
cp
clp
.5 lw
[] 0 dsh
224.94 256.724 mo
225.736 256.724 226.499 256.408 227.061 255.845 cv
227.624 255.283 227.94 254.519 227.94 253.724 cv
227.94 252.928 227.624 252.165 227.061 251.603 cv
226.499 251.04 225.736 250.724 224.94 250.724 cv
224.144 250.724 223.381 251.04 222.819 251.603 cv
222.256 252.165 221.94 252.928 221.94 253.724 cv
221.94 254.519 222.256 255.283 222.819 255.845 cv
223.381 256.408 224.144 256.724 224.94 256.724 cv
cp
@
grestore
gsave
250.378 253.73 mo
256.878 253.73 li
256.878 247.23 li
250.378 247.23 li
cp
clp
.5 lw
[] 0 dsh
253.628 253.48 mo
254.424 253.48 255.187 253.164 255.749 252.601 cv
256.312 252.038 256.628 251.275 256.628 250.48 cv
256.628 249.684 256.312 248.921 255.749 248.358 cv
255.187 247.796 254.424 247.48 253.628 247.48 cv
252.832 247.48 252.069 247.796 251.507 248.358 cv
250.944 248.921 250.628 249.684 250.628 250.48 cv
250.628 251.275 250.944 252.038 251.507 252.601 cv
252.069 253.164 252.832 253.48 253.628 253.48 cv
cp
@
grestore
gsave
279.066 256.974 mo
285.566 256.974 li
285.566 250.474 li
279.066 250.474 li
cp
clp
.5 lw
[] 0 dsh
282.316 256.724 mo
283.112 256.724 283.875 256.408 284.437 255.845 cv
285 255.283 285.316 254.519 285.316 253.724 cv
285.316 252.928 285 252.165 284.437 251.603 cv
283.875 251.04 283.112 250.724 282.316 250.724 cv
281.52 250.724 280.757 251.04 280.195 251.603 cv
279.632 252.165 279.316 252.928 279.316 253.724 cv
279.316 254.519 279.632 255.283 280.195 255.845 cv
280.757 256.408 281.52 256.724 282.316 256.724 cv
cp
@
grestore
gsave
307.754 253.73 mo
314.254 253.73 li
314.254 247.23 li
307.754 247.23 li
cp
clp
.5 lw
[] 0 dsh
311.004 253.48 mo
311.8 253.48 312.563 253.164 313.125 252.601 cv
313.688 252.038 314.004 251.275 314.004 250.48 cv
314.004 249.684 313.688 248.921 313.125 248.358 cv
312.563 247.796 311.8 247.48 311.004 247.48 cv
310.208 247.48 309.445 247.796 308.883 248.358 cv
308.32 248.921 308.004 249.684 308.004 250.48 cv
308.004 251.275 308.32 252.038 308.883 252.601 cv
309.445 253.164 310.208 253.48 311.004 253.48 cv
cp
@
grestore
gsave
336.442 253.73 mo
342.942 253.73 li
342.942 247.23 li
336.442 247.23 li
cp
clp
.5 lw
[] 0 dsh
339.692 253.48 mo
340.488 253.48 341.251 253.164 341.813 252.601 cv
342.376 252.038 342.692 251.275 342.692 250.48 cv
342.692 249.684 342.376 248.921 341.813 248.358 cv
341.251 247.796 340.488 247.48 339.692 247.48 cv
338.896 247.48 338.133 247.796 337.571 248.358 cv
337.008 248.921 336.692 249.684 336.692 250.48 cv
336.692 251.275 337.008 252.038 337.571 252.601 cv
338.133 253.164 338.896 253.48 339.692 253.48 cv
cp
@
grestore
gsave
365.13 256.974 mo
371.63 256.974 li
371.63 250.474 li
365.13 250.474 li
cp
clp
.5 lw
[] 0 dsh
368.38 256.724 mo
369.176 256.724 369.939 256.408 370.501 255.845 cv
371.064 255.283 371.38 254.519 371.38 253.724 cv
371.38 252.928 371.064 252.165 370.501 251.603 cv
369.939 251.04 369.176 250.724 368.38 250.724 cv
367.584 250.724 366.821 251.04 366.259 251.603 cv
365.696 252.165 365.38 252.928 365.38 253.724 cv
365.38 254.519 365.696 255.283 366.259 255.845 cv
366.821 256.408 367.584 256.724 368.38 256.724 cv
cp
@
grestore
gsave
393.818 253.73 mo
400.318 253.73 li
400.318 247.23 li
393.818 247.23 li
cp
clp
.5 lw
[] 0 dsh
397.068 253.48 mo
397.864 253.48 398.627 253.164 399.189 252.601 cv
399.752 252.038 400.068 251.275 400.068 250.48 cv
400.068 249.684 399.752 248.921 399.189 248.358 cv
398.627 247.796 397.864 247.48 397.068 247.48 cv
396.272 247.48 395.509 247.796 394.947 248.358 cv
394.384 248.921 394.068 249.684 394.068 250.48 cv
394.068 251.275 394.384 252.038 394.947 252.601 cv
395.509 253.164 396.272 253.48 397.068 253.48 cv
cp
@
grestore
gsave
422.506 250.486 mo
429.006 250.486 li
429.006 243.986 li
422.506 243.986 li
cp
clp
.5 lw
[] 0 dsh
425.756 250.236 mo
426.552 250.236 427.315 249.92 427.877 249.357 cv
428.44 248.794 428.756 248.031 428.756 247.236 cv
428.756 246.44 428.44 245.677 427.877 245.114 cv
427.315 244.552 426.552 244.236 425.756 244.236 cv
424.96 244.236 424.197 244.552 423.635 245.114 cv
423.072 245.677 422.756 246.44 422.756 247.236 cv
422.756 248.031 423.072 248.794 423.635 249.357 cv
424.197 249.92 424.96 250.236 425.756 250.236 cv
cp
@
grestore
gsave
451.194 256.974 mo
457.694 256.974 li
457.694 250.474 li
451.194 250.474 li
cp
clp
.5 lw
[] 0 dsh
454.444 256.724 mo
455.24 256.724 456.003 256.408 456.565 255.845 cv
457.128 255.283 457.444 254.519 457.444 253.724 cv
457.444 252.928 457.128 252.165 456.565 251.603 cv
456.003 251.04 455.24 250.724 454.444 250.724 cv
453.648 250.724 452.885 251.04 452.323 251.603 cv
451.76 252.165 451.444 252.928 451.444 253.724 cv
451.444 254.519 451.76 255.283 452.323 255.845 cv
452.885 256.408 453.648 256.724 454.444 256.724 cv
cp
@
grestore
gsave
479.882 256.974 mo
486.382 256.974 li
486.382 250.474 li
479.882 250.474 li
cp
clp
.5 lw
[] 0 dsh
483.132 256.724 mo
483.928 256.724 484.691 256.408 485.253 255.845 cv
485.816 255.283 486.132 254.519 486.132 253.724 cv
486.132 252.928 485.816 252.165 485.253 251.603 cv
484.691 251.04 483.928 250.724 483.132 250.724 cv
482.336 250.724 481.573 251.04 481.011 251.603 cv
480.448 252.165 480.132 252.928 480.132 253.724 cv
480.132 254.519 480.448 255.283 481.011 255.845 cv
481.573 256.408 482.336 256.724 483.132 256.724 cv
cp
@
grestore
gsave
508.57 256.974 mo
515.07 256.974 li
515.07 250.474 li
508.57 250.474 li
cp
clp
.5 lw
[] 0 dsh
511.82 256.724 mo
512.616 256.724 513.379 256.408 513.941 255.845 cv
514.504 255.283 514.82 254.519 514.82 253.724 cv
514.82 252.928 514.504 252.165 513.941 251.603 cv
513.379 251.04 512.616 250.724 511.82 250.724 cv
511.024 250.724 510.261 251.04 509.699 251.603 cv
509.136 252.165 508.82 252.928 508.82 253.724 cv
508.82 254.519 509.136 255.283 509.699 255.845 cv
510.261 256.408 511.024 256.724 511.82 256.724 cv
cp
@
grestore
gsave
537.258 256.974 mo
543.758 256.974 li
543.758 250.474 li
537.258 250.474 li
cp
clp
.5 lw
[] 0 dsh
540.508 256.724 mo
541.304 256.724 542.067 256.408 542.629 255.845 cv
543.192 255.283 543.508 254.519 543.508 253.724 cv
543.508 252.928 543.192 252.165 542.629 251.603 cv
542.067 251.04 541.304 250.724 540.508 250.724 cv
539.712 250.724 538.949 251.04 538.387 251.603 cv
537.824 252.165 537.508 252.928 537.508 253.724 cv
537.508 254.519 537.824 255.283 538.387 255.845 cv
538.949 256.408 539.712 256.724 540.508 256.724 cv
cp
@
grestore
52.812 256.968 mo
52.812 252.968 li
f
.5 lw
[] 0 dsh
52.812 256.968 mo
52.812 252.968 li
@
52.812 29.88 mo
52.812 33.88 li
f
52.812 29.88 mo
52.812 33.88 li
@
51.6906 269.097 mo
53.6226 269.097 li
53.6226 262.425 li
51.5226 262.845 li
51.5226 261.765 li
53.6106 261.345 li
54.7986 261.345 li
54.7986 269.097 li
56.7306 269.097 li
56.7306 270.093 li
51.6906 270.093 li
51.6906 269.097 li
f
81.5 256.968 mo
81.5 252.968 li
f
81.5 256.968 mo
81.5 252.968 li
@
81.5 29.88 mo
81.5 33.88 li
f
81.5 29.88 mo
81.5 33.88 li
@
81.0228 269.097 mo
85.1507 269.097 li
85.1507 270.093 li
79.5947 270.093 li
79.5947 269.097 li
80.0387 268.641 80.6507 268.017 81.4307 267.225 cv
82.1988 266.445 82.6908 265.941 82.8948 265.713 cv
83.2787 265.293 83.5427 264.933 83.6868 264.633 cv
83.8307 264.345 83.9147 264.045 83.9147 263.757 cv
83.9147 263.301 83.7467 262.917 83.4228 262.629 cv
83.0987 262.341 82.6787 262.185 82.1507 262.185 cv
81.7787 262.185 81.3828 262.257 80.9747 262.377 cv
80.5667 262.509 80.1227 262.701 79.6547 262.965 cv
79.6547 261.765 li
80.1348 261.573 80.5788 261.429 80.9867 261.333 cv
81.3948 261.237 81.7787 261.189 82.1267 261.189 cv
83.0267 261.189 83.7467 261.417 84.2868 261.873 cv
84.8268 262.329 85.1028 262.929 85.1028 263.685 cv
85.1028 264.045 85.0307 264.393 84.8988 264.705 cv
84.7667 265.029 84.5267 265.413 84.1667 265.845 cv
84.0707 265.965 83.7588 266.289 83.2308 266.829 cv
82.7028 267.369 81.9707 268.125 81.0228 269.097 cv
f
110.188 256.968 mo
110.188 252.968 li
f
110.188 256.968 mo
110.188 252.968 li
@
110.188 29.88 mo
110.188 33.88 li
f
110.188 29.88 mo
110.188 33.88 li
@
112.185 265.377 mo
112.749 265.497 113.193 265.749 113.505 266.133 cv
113.817 266.517 113.985 266.997 113.985 267.549 cv
113.985 268.413 113.685 269.085 113.097 269.553 cv
112.497 270.021 111.657 270.249 110.565 270.249 cv
110.193 270.249 109.809 270.213 109.425 270.141 cv
109.041 270.081 108.633 269.973 108.225 269.829 cv
108.225 268.689 li
108.549 268.881 108.909 269.025 109.305 269.121 cv
109.689 269.217 110.097 269.265 110.529 269.265 cv
111.273 269.265 111.837 269.121 112.221 268.833 cv
112.605 268.545 112.809 268.113 112.809 267.549 cv
112.809 267.045 112.629 266.637 112.269 266.349 cv
111.909 266.061 111.405 265.905 110.757 265.905 cv
109.737 265.905 li
109.737 264.933 li
110.805 264.933 li
111.381 264.933 111.825 264.825 112.137 264.585 cv
112.449 264.357 112.605 264.021 112.605 263.577 cv
112.605 263.133 112.437 262.785 112.125 262.545 cv
111.801 262.305 111.345 262.185 110.757 262.185 cv
110.433 262.185 110.085 262.221 109.713 262.293 cv
109.341 262.365 108.933 262.473 108.489 262.617 cv
108.489 261.561 li
108.933 261.441 109.353 261.345 109.749 261.285 cv
110.133 261.225 110.505 261.189 110.865 261.189 cv
111.753 261.189 112.461 261.393 112.989 261.801 cv
113.517 262.209 113.781 262.761 113.781 263.457 cv
113.781 263.937 113.637 264.345 113.361 264.681 cv
113.085 265.017 112.689 265.257 112.185 265.377 cv
f
138.876 256.968 mo
138.876 252.968 li
f
138.876 256.968 mo
138.876 252.968 li
@
138.876 29.88 mo
138.876 33.88 li
f
138.876 29.88 mo
138.876 33.88 li
@
140.225 262.377 mo
137.237 267.045 li
140.225 267.045 li
140.225 262.377 li
139.913 261.345 mo
141.401 261.345 li
141.401 267.045 li
142.649 267.045 li
142.649 268.029 li
141.401 268.029 li
141.401 270.093 li
140.225 270.093 li
140.225 268.029 li
136.277 268.029 li
136.277 266.889 li
139.913 261.345 li
f
167.564 256.968 mo
167.564 252.968 li
f
167.564 256.968 mo
167.564 252.968 li
@
167.564 29.88 mo
167.564 33.88 li
f
167.564 29.88 mo
167.564 33.88 li
@
166.024 261.345 mo
170.668 261.345 li
170.668 262.341 li
167.104 262.341 li
167.104 264.489 li
167.272 264.429 167.452 264.381 167.62 264.357 cv
167.788 264.333 167.968 264.309 168.136 264.309 cv
169.108 264.309 169.876 264.585 170.452 265.113 cv
171.028 265.653 171.316 266.373 171.316 267.285 cv
171.316 268.233 171.016 268.965 170.428 269.481 cv
169.84 269.997 169.012 270.249 167.956 270.249 cv
167.584 270.249 167.212 270.213 166.828 270.165 cv
166.444 270.105 166.06 270.021 165.652 269.889 cv
165.652 268.701 li
166 268.893 166.36 269.037 166.744 269.133 cv
167.116 269.229 167.512 269.265 167.932 269.265 cv
168.604 269.265 169.144 269.097 169.54 268.737 cv
169.924 268.377 170.128 267.897 170.128 267.285 cv
170.128 266.685 169.924 266.205 169.54 265.845 cv
169.144 265.485 168.604 265.305 167.932 265.305 cv
167.62 265.305 167.296 265.341 166.984 265.413 cv
166.672 265.485 166.348 265.593 166.024 265.737 cv
166.024 261.345 li
f
196.252 256.968 mo
196.252 252.968 li
f
196.252 256.968 mo
196.252 252.968 li
@
196.252 29.88 mo
196.252 33.88 li
f
196.252 29.88 mo
196.252 33.88 li
@
197.196 265.245 mo
196.668 265.245 196.248 265.437 195.936 265.797 cv
195.624 266.157 195.468 266.661 195.468 267.285 cv
195.468 267.921 195.624 268.425 195.936 268.785 cv
196.248 269.145 196.668 269.325 197.196 269.325 cv
197.724 269.325 198.144 269.145 198.456 268.785 cv
198.768 268.425 198.924 267.921 198.924 267.285 cv
198.924 266.661 198.768 266.157 198.456 265.797 cv
198.144 265.437 197.724 265.245 197.196 265.245 cv
199.548 261.537 mo
199.548 262.617 li
199.248 262.473 198.948 262.365 198.648 262.293 cv
198.336 262.221 198.036 262.185 197.748 262.185 cv
196.956 262.185 196.356 262.449 195.948 262.977 cv
195.54 263.505 195.3 264.309 195.252 265.365 cv
195.48 265.029 195.768 264.765 196.116 264.585 cv
196.464 264.405 196.848 264.309 197.268 264.309 cv
198.144 264.309 198.84 264.585 199.344 265.113 cv
199.848 265.641 200.112 266.373 200.112 267.285 cv
200.112 268.185 199.836 268.905 199.308 269.445 cv
198.78 269.985 198.072 270.249 197.196 270.249 cv
196.188 270.249 195.408 269.865 194.88 269.097 cv
194.34 268.329 194.076 267.201 194.076 265.725 cv
194.076 264.345 194.4 263.241 195.06 262.425 cv
195.708 261.609 196.596 261.189 197.7 261.189 cv
197.988 261.189 198.288 261.225 198.6 261.273 cv
198.9 261.333 199.212 261.417 199.548 261.537 cv
f
224.94 256.968 mo
224.94 252.968 li
f
224.94 256.968 mo
224.94 252.968 li
@
224.94 29.88 mo
224.94 33.88 li
f
224.94 29.88 mo
224.94 33.88 li
@
223.111 261.345 mo
228.74 261.345 li
228.74 261.849 li
225.56 270.093 li
224.324 270.093 li
227.312 262.341 li
223.111 262.341 li
223.111 261.345 li
f
253.628 256.968 mo
253.628 252.968 li
f
253.628 256.968 mo
253.628 252.968 li
@
253.628 29.88 mo
253.628 33.88 li
f
253.628 29.88 mo
253.628 33.88 li
@
254.444 265.941 mo
253.88 265.941 253.436 266.097 253.112 266.397 cv
252.788 266.697 252.632 267.105 252.632 267.633 cv
252.632 268.161 252.788 268.581 253.112 268.881 cv
253.436 269.181 253.88 269.325 254.444 269.325 cv
254.996 269.325 255.44 269.181 255.764 268.869 cv
256.088 268.569 256.256 268.161 256.256 267.633 cv
256.256 267.105 256.088 266.697 255.776 266.397 cv
255.452 266.097 255.008 265.941 254.444 265.941 cv
253.256 265.437 mo
252.752 265.317 252.356 265.077 252.068 264.729 cv
251.78 264.381 251.648 263.961 251.648 263.457 cv
251.648 262.761 251.888 262.209 252.392 261.801 cv
252.884 261.393 253.568 261.189 254.444 261.189 cv
255.308 261.189 255.992 261.393 256.496 261.801 cv
256.988 262.209 257.24 262.761 257.24 263.457 cv
257.24 263.961 257.096 264.381 256.808 264.729 cv
256.52 265.077 256.136 265.317 255.632 265.437 cv
256.196 265.569 256.64 265.833 256.964 266.217 cv
257.276 266.601 257.444 267.081 257.444 267.633 cv
257.444 268.485 257.18 269.133 256.664 269.577 cv
256.136 270.033 255.404 270.249 254.444 270.249 cv
253.472 270.249 252.728 270.033 252.212 269.577 cv
251.696 269.133 251.444 268.485 251.444 267.633 cv
251.444 267.081 251.6 266.601 251.924 266.217 cv
252.236 265.833 252.68 265.569 253.256 265.437 cv
252.824 263.565 mo
252.824 264.021 252.956 264.381 253.244 264.633 cv
253.532 264.885 253.928 265.005 254.444 265.005 cv
254.948 265.005 255.344 264.885 255.632 264.633 cv
255.92 264.381 256.064 264.021 256.064 263.565 cv
256.064 263.109 255.92 262.761 255.632 262.509 cv
255.344 262.257 254.948 262.125 254.444 262.125 cv
253.928 262.125 253.532 262.257 253.244 262.509 cv
252.956 262.761 252.824 263.109 252.824 263.565 cv
f
282.316 256.968 mo
282.316 252.968 li
f
282.316 256.968 mo
282.316 252.968 li
@
282.316 29.88 mo
282.316 33.88 li
f
282.316 29.88 mo
282.316 33.88 li
@
280.613 269.913 mo
280.613 268.833 li
280.901 268.977 281.201 269.085 281.513 269.157 cv
281.813 269.229 282.113 269.265 282.413 269.265 cv
283.181 269.265 283.781 269.013 284.189 268.485 cv
284.597 267.957 284.837 267.165 284.909 266.085 cv
284.669 266.421 284.381 266.685 284.045 266.865 cv
283.697 267.045 283.313 267.129 282.893 267.129 cv
282.005 267.129 281.309 266.865 280.805 266.337 cv
280.301 265.809 280.049 265.089 280.049 264.165 cv
280.049 263.277 280.313 262.557 280.841 262.005 cv
281.369 261.465 282.077 261.189 282.965 261.189 cv
283.973 261.189 284.753 261.585 285.281 262.353 cv
285.809 263.133 286.085 264.261 286.085 265.725 cv
286.085 267.117 285.749 268.209 285.101 269.025 cv
284.441 269.841 283.565 270.249 282.461 270.249 cv
282.161 270.249 281.861 270.213 281.561 270.165 cv
281.249 270.117 280.937 270.033 280.613 269.913 cv
282.965 266.205 mo
283.493 266.205 283.913 266.025 284.225 265.665 cv
284.537 265.305 284.693 264.801 284.693 264.165 cv
284.693 263.541 284.537 263.037 284.225 262.677 cv
283.913 262.317 283.493 262.125 282.965 262.125 cv
282.437 262.125 282.017 262.317 281.705 262.677 cv
281.393 263.037 281.237 263.541 281.237 264.165 cv
281.237 264.801 281.393 265.305 281.705 265.665 cv
282.017 266.025 282.437 266.205 282.965 266.205 cv
f
311.004 256.968 mo
311.004 252.968 li
f
311.004 256.968 mo
311.004 252.968 li
@
311.004 29.88 mo
311.004 33.88 li
f
311.004 29.88 mo
311.004 33.88 li
@
305.906 269.097 mo
307.838 269.097 li
307.838 262.425 li
305.738 262.845 li
305.738 261.765 li
307.826 261.345 li
309.014 261.345 li
309.014 269.097 li
310.946 269.097 li
310.946 270.093 li
305.906 270.093 li
305.906 269.097 li
f
315.866 262.125 mo
315.254 262.125 314.798 262.425 314.486 263.025 cv
314.174 263.625 314.03 264.525 314.03 265.725 cv
314.03 266.925 314.174 267.825 314.486 268.425 cv
314.798 269.025 315.254 269.325 315.866 269.325 cv
316.478 269.325 316.934 269.025 317.246 268.425 cv
317.546 267.825 317.702 266.925 317.702 265.725 cv
317.702 264.525 317.546 263.625 317.246 263.025 cv
316.934 262.425 316.478 262.125 315.866 262.125 cv
315.866 261.189 mo
316.838 261.189 317.582 261.585 318.11 262.353 cv
318.626 263.133 318.89 264.261 318.89 265.725 cv
318.89 267.201 318.626 268.329 318.11 269.097 cv
317.582 269.865 316.838 270.249 315.866 270.249 cv
314.882 270.249 314.126 269.865 313.61 269.097 cv
313.094 268.329 312.842 267.201 312.842 265.725 cv
312.842 264.261 313.094 263.133 313.61 262.353 cv
314.126 261.585 314.882 261.189 315.866 261.189 cv
f
339.692 256.968 mo
339.692 252.968 li
f
339.692 256.968 mo
339.692 252.968 li
@
339.692 29.88 mo
339.692 33.88 li
f
339.692 29.88 mo
339.692 33.88 li
@
335.191 269.097 mo
339.319 269.097 li
339.319 270.093 li
333.763 270.093 li
333.763 269.097 li
334.207 268.641 334.819 268.017 335.599 267.225 cv
336.367 266.445 336.859 265.941 337.063 265.713 cv
337.447 265.293 337.711 264.933 337.855 264.633 cv
337.999 264.345 338.083 264.045 338.083 263.757 cv
338.083 263.301 337.915 262.917 337.591 262.629 cv
337.267 262.341 336.847 262.185 336.319 262.185 cv
335.947 262.185 335.551 262.257 335.143 262.377 cv
334.735 262.509 334.291 262.701 333.823 262.965 cv
333.823 261.765 li
334.303 261.573 334.747 261.429 335.155 261.333 cv
335.563 261.237 335.947 261.189 336.295 261.189 cv
337.195 261.189 337.915 261.417 338.455 261.873 cv
338.995 262.329 339.271 262.929 339.271 263.685 cv
339.271 264.045 339.199 264.393 339.067 264.705 cv
338.935 265.029 338.695 265.413 338.335 265.845 cv
338.239 265.965 337.927 266.289 337.399 266.829 cv
336.871 267.369 336.139 268.125 335.191 269.097 cv
f
344.335 262.125 mo
343.723 262.125 343.267 262.425 342.955 263.025 cv
342.643 263.625 342.499 264.525 342.499 265.725 cv
342.499 266.925 342.643 267.825 342.955 268.425 cv
343.267 269.025 343.723 269.325 344.335 269.325 cv
344.947 269.325 345.403 269.025 345.715 268.425 cv
346.015 267.825 346.171 266.925 346.171 265.725 cv
346.171 264.525 346.015 263.625 345.715 263.025 cv
345.403 262.425 344.947 262.125 344.335 262.125 cv
344.335 261.189 mo
345.307 261.189 346.051 261.585 346.579 262.353 cv
347.095 263.133 347.359 264.261 347.359 265.725 cv
347.359 267.201 347.095 268.329 346.579 269.097 cv
346.051 269.865 345.307 270.249 344.335 270.249 cv
343.351 270.249 342.595 269.865 342.079 269.097 cv
341.563 268.329 341.311 267.201 341.311 265.725 cv
341.311 264.261 341.563 263.133 342.079 262.353 cv
342.595 261.585 343.351 261.189 344.335 261.189 cv
f
368.38 256.968 mo
368.38 252.968 li
f
368.38 256.968 mo
368.38 252.968 li
@
368.38 29.88 mo
368.38 33.88 li
f
368.38 29.88 mo
368.38 33.88 li
@
366.471 265.377 mo
367.035 265.497 367.479 265.749 367.791 266.133 cv
368.103 266.517 368.271 266.997 368.271 267.549 cv
368.271 268.413 367.971 269.085 367.383 269.553 cv
366.783 270.021 365.943 270.249 364.851 270.249 cv
364.479 270.249 364.095 270.213 363.711 270.141 cv
363.327 270.081 362.919 269.973 362.511 269.829 cv
362.511 268.689 li
362.835 268.881 363.195 269.025 363.591 269.121 cv
363.975 269.217 364.383 269.265 364.815 269.265 cv
365.559 269.265 366.123 269.121 366.507 268.833 cv
366.891 268.545 367.095 268.113 367.095 267.549 cv
367.095 267.045 366.915 266.637 366.555 266.349 cv
366.195 266.061 365.691 265.905 365.043 265.905 cv
364.023 265.905 li
364.023 264.933 li
365.091 264.933 li
365.667 264.933 366.111 264.825 366.423 264.585 cv
366.735 264.357 366.891 264.021 366.891 263.577 cv
366.891 263.133 366.723 262.785 366.411 262.545 cv
366.087 262.305 365.631 262.185 365.043 262.185 cv
364.719 262.185 364.371 262.221 363.999 262.293 cv
363.627 262.365 363.219 262.473 362.775 262.617 cv
362.775 261.561 li
363.219 261.441 363.639 261.345 364.035 261.285 cv
364.419 261.225 364.791 261.189 365.151 261.189 cv
366.039 261.189 366.747 261.393 367.275 261.801 cv
367.803 262.209 368.067 262.761 368.067 263.457 cv
368.067 263.937 367.923 264.345 367.647 264.681 cv
367.371 265.017 366.975 265.257 366.471 265.377 cv
f
373.047 262.125 mo
372.435 262.125 371.979 262.425 371.667 263.025 cv
371.355 263.625 371.211 264.525 371.211 265.725 cv
371.211 266.925 371.355 267.825 371.667 268.425 cv
371.979 269.025 372.435 269.325 373.047 269.325 cv
373.659 269.325 374.115 269.025 374.427 268.425 cv
374.727 267.825 374.883 266.925 374.883 265.725 cv
374.883 264.525 374.727 263.625 374.427 263.025 cv
374.115 262.425 373.659 262.125 373.047 262.125 cv
373.047 261.189 mo
374.019 261.189 374.763 261.585 375.291 262.353 cv
375.807 263.133 376.071 264.261 376.071 265.725 cv
376.071 267.201 375.807 268.329 375.291 269.097 cv
374.763 269.865 374.019 270.249 373.047 270.249 cv
372.063 270.249 371.307 269.865 370.791 269.097 cv
370.275 268.329 370.023 267.201 370.023 265.725 cv
370.023 264.261 370.275 263.133 370.791 262.353 cv
371.307 261.585 372.063 261.189 373.047 261.189 cv
f
397.068 256.968 mo
397.068 252.968 li
f
397.068 256.968 mo
397.068 252.968 li
@
397.068 29.88 mo
397.068 33.88 li
f
397.068 29.88 mo
397.068 33.88 li
@
394.659 262.377 mo
391.671 267.045 li
394.659 267.045 li
394.659 262.377 li
394.347 261.345 mo
395.835 261.345 li
395.835 267.045 li
397.083 267.045 li
397.083 268.029 li
395.835 268.029 li
395.835 270.093 li
394.659 270.093 li
394.659 268.029 li
390.711 268.029 li
390.711 266.889 li
394.347 261.345 li
f
401.571 262.125 mo
400.959 262.125 400.503 262.425 400.191 263.025 cv
399.879 263.625 399.735 264.525 399.735 265.725 cv
399.735 266.925 399.879 267.825 400.191 268.425 cv
400.503 269.025 400.959 269.325 401.571 269.325 cv
402.183 269.325 402.639 269.025 402.951 268.425 cv
403.251 267.825 403.407 266.925 403.407 265.725 cv
403.407 264.525 403.251 263.625 402.951 263.025 cv
402.639 262.425 402.183 262.125 401.571 262.125 cv
401.571 261.189 mo
402.543 261.189 403.287 261.585 403.815 262.353 cv
404.331 263.133 404.595 264.261 404.595 265.725 cv
404.595 267.201 404.331 268.329 403.815 269.097 cv
403.287 269.865 402.543 270.249 401.571 270.249 cv
400.587 270.249 399.831 269.865 399.315 269.097 cv
398.799 268.329 398.547 267.201 398.547 265.725 cv
398.547 264.261 398.799 263.133 399.315 262.353 cv
399.831 261.585 400.587 261.189 401.571 261.189 cv
f
425.756 256.968 mo
425.756 252.968 li
f
425.756 256.968 mo
425.756 252.968 li
@
425.756 29.88 mo
425.756 33.88 li
f
425.756 29.88 mo
425.756 33.88 li
@
420.271 261.345 mo
424.915 261.345 li
424.915 262.341 li
421.351 262.341 li
421.351 264.489 li
421.519 264.429 421.699 264.381 421.867 264.357 cv
422.035 264.333 422.215 264.309 422.383 264.309 cv
423.355 264.309 424.123 264.585 424.699 265.113 cv
425.275 265.653 425.563 266.373 425.563 267.285 cv
425.563 268.233 425.263 268.965 424.675 269.481 cv
424.087 269.997 423.259 270.249 422.203 270.249 cv
421.831 270.249 421.459 270.213 421.075 270.165 cv
420.691 270.105 420.307 270.021 419.899 269.889 cv
419.899 268.701 li
420.247 268.893 420.607 269.037 420.991 269.133 cv
421.363 269.229 421.759 269.265 422.179 269.265 cv
422.851 269.265 423.391 269.097 423.787 268.737 cv
424.171 268.377 424.375 267.897 424.375 267.285 cv
424.375 266.685 424.171 266.205 423.787 265.845 cv
423.391 265.485 422.851 265.305 422.179 265.305 cv
421.867 265.305 421.543 265.341 421.231 265.413 cv
420.919 265.485 420.595 265.593 420.271 265.737 cv
420.271 261.345 li
f
430.423 262.125 mo
429.811 262.125 429.355 262.425 429.043 263.025 cv
428.731 263.625 428.587 264.525 428.587 265.725 cv
428.587 266.925 428.731 267.825 429.043 268.425 cv
429.355 269.025 429.811 269.325 430.423 269.325 cv
431.035 269.325 431.491 269.025 431.803 268.425 cv
432.103 267.825 432.259 266.925 432.259 265.725 cv
432.259 264.525 432.103 263.625 431.803 263.025 cv
431.491 262.425 431.035 262.125 430.423 262.125 cv
430.423 261.189 mo
431.395 261.189 432.139 261.585 432.667 262.353 cv
433.183 263.133 433.447 264.261 433.447 265.725 cv
433.447 267.201 433.183 268.329 432.667 269.097 cv
432.139 269.865 431.395 270.249 430.423 270.249 cv
429.439 270.249 428.683 269.865 428.167 269.097 cv
427.651 268.329 427.399 267.201 427.399 265.725 cv
427.399 264.261 427.651 263.133 428.167 262.353 cv
428.683 261.585 429.439 261.189 430.423 261.189 cv
f
454.444 256.968 mo
454.444 252.968 li
f
454.444 256.968 mo
454.444 252.968 li
@
454.444 29.88 mo
454.444 33.88 li
f
454.444 29.88 mo
454.444 33.88 li
@
451.584 265.245 mo
451.056 265.245 450.636 265.437 450.324 265.797 cv
450.012 266.157 449.856 266.661 449.856 267.285 cv
449.856 267.921 450.012 268.425 450.324 268.785 cv
450.636 269.145 451.056 269.325 451.584 269.325 cv
452.112 269.325 452.532 269.145 452.844 268.785 cv
453.156 268.425 453.312 267.921 453.312 267.285 cv
453.312 266.661 453.156 266.157 452.844 265.797 cv
452.532 265.437 452.112 265.245 451.584 265.245 cv
453.936 261.537 mo
453.936 262.617 li
453.636 262.473 453.336 262.365 453.036 262.293 cv
452.724 262.221 452.424 262.185 452.136 262.185 cv
451.344 262.185 450.744 262.449 450.336 262.977 cv
449.928 263.505 449.688 264.309 449.64 265.365 cv
449.868 265.029 450.156 264.765 450.504 264.585 cv
450.852 264.405 451.236 264.309 451.656 264.309 cv
452.532 264.309 453.228 264.585 453.732 265.113 cv
454.236 265.641 454.5 266.373 454.5 267.285 cv
454.5 268.185 454.224 268.905 453.696 269.445 cv
453.168 269.985 452.46 270.249 451.584 270.249 cv
450.576 270.249 449.796 269.865 449.268 269.097 cv
448.728 268.329 448.464 267.201 448.464 265.725 cv
448.464 264.345 448.788 263.241 449.448 262.425 cv
450.096 261.609 450.984 261.189 452.088 261.189 cv
452.376 261.189 452.676 261.225 452.988 261.273 cv
453.288 261.333 453.6 261.417 453.936 261.537 cv
f
459.072 262.125 mo
458.46 262.125 458.004 262.425 457.692 263.025 cv
457.38 263.625 457.236 264.525 457.236 265.725 cv
457.236 266.925 457.38 267.825 457.692 268.425 cv
458.004 269.025 458.46 269.325 459.072 269.325 cv
459.684 269.325 460.14 269.025 460.452 268.425 cv
460.752 267.825 460.908 266.925 460.908 265.725 cv
460.908 264.525 460.752 263.625 460.452 263.025 cv
460.14 262.425 459.684 262.125 459.072 262.125 cv
459.072 261.189 mo
460.044 261.189 460.788 261.585 461.316 262.353 cv
461.832 263.133 462.096 264.261 462.096 265.725 cv
462.096 267.201 461.832 268.329 461.316 269.097 cv
460.788 269.865 460.044 270.249 459.072 270.249 cv
458.088 270.249 457.332 269.865 456.816 269.097 cv
456.3 268.329 456.048 267.201 456.048 265.725 cv
456.048 264.261 456.3 263.133 456.816 262.353 cv
457.332 261.585 458.088 261.189 459.072 261.189 cv
f
483.132 256.968 mo
483.132 252.968 li
f
483.132 256.968 mo
483.132 252.968 li
@
483.132 29.88 mo
483.132 33.88 li
f
483.132 29.88 mo
483.132 33.88 li
@
477.366 261.345 mo
482.994 261.345 li
482.994 261.849 li
479.814 270.093 li
478.578 270.093 li
481.566 262.341 li
477.366 262.341 li
477.366 261.345 li
f
487.83 262.125 mo
487.218 262.125 486.762 262.425 486.45 263.025 cv
486.138 263.625 485.994 264.525 485.994 265.725 cv
485.994 266.925 486.138 267.825 486.45 268.425 cv
486.762 269.025 487.218 269.325 487.83 269.325 cv
488.442 269.325 488.898 269.025 489.21 268.425 cv
489.51 267.825 489.666 266.925 489.666 265.725 cv
489.666 264.525 489.51 263.625 489.21 263.025 cv
488.898 262.425 488.442 262.125 487.83 262.125 cv
487.83 261.189 mo
488.802 261.189 489.546 261.585 490.074 262.353 cv
490.59 263.133 490.854 264.261 490.854 265.725 cv
490.854 267.201 490.59 268.329 490.074 269.097 cv
489.546 269.865 488.802 270.249 487.83 270.249 cv
486.846 270.249 486.09 269.865 485.574 269.097 cv
485.058 268.329 484.806 267.201 484.806 265.725 cv
484.806 264.261 485.058 263.133 485.574 262.353 cv
486.09 261.585 486.846 261.189 487.83 261.189 cv
f
511.82 256.968 mo
511.82 252.968 li
f
511.82 256.968 mo
511.82 252.968 li
@
511.82 29.88 mo
511.82 33.88 li
f
511.82 29.88 mo
511.82 33.88 li
@
508.8 265.941 mo
508.236 265.941 507.792 266.097 507.468 266.397 cv
507.144 266.697 506.988 267.105 506.988 267.633 cv
506.988 268.161 507.144 268.581 507.468 268.881 cv
507.792 269.181 508.236 269.325 508.8 269.325 cv
509.352 269.325 509.796 269.181 510.12 268.869 cv
510.444 268.569 510.612 268.161 510.612 267.633 cv
510.612 267.105 510.444 266.697 510.132 266.397 cv
509.808 266.097 509.364 265.941 508.8 265.941 cv
507.612 265.437 mo
507.108 265.317 506.712 265.077 506.424 264.729 cv
506.136 264.381 506.004 263.961 506.004 263.457 cv
506.004 262.761 506.244 262.209 506.748 261.801 cv
507.24 261.393 507.924 261.189 508.8 261.189 cv
509.664 261.189 510.348 261.393 510.852 261.801 cv
511.344 262.209 511.596 262.761 511.596 263.457 cv
511.596 263.961 511.452 264.381 511.164 264.729 cv
510.876 265.077 510.492 265.317 509.988 265.437 cv
510.552 265.569 510.996 265.833 511.32 266.217 cv
511.632 266.601 511.8 267.081 511.8 267.633 cv
511.8 268.485 511.536 269.133 511.02 269.577 cv
510.492 270.033 509.76 270.249 508.8 270.249 cv
507.828 270.249 507.084 270.033 506.568 269.577 cv
506.052 269.133 505.8 268.485 505.8 267.633 cv
505.8 267.081 505.956 266.601 506.28 266.217 cv
506.592 265.833 507.036 265.569 507.612 265.437 cv
507.18 263.565 mo
507.18 264.021 507.312 264.381 507.6 264.633 cv
507.888 264.885 508.284 265.005 508.8 265.005 cv
509.304 265.005 509.7 264.885 509.988 264.633 cv
510.276 264.381 510.42 264.021 510.42 263.565 cv
510.42 263.109 510.276 262.761 509.988 262.509 cv
509.7 262.257 509.304 262.125 508.8 262.125 cv
508.284 262.125 507.888 262.257 507.6 262.509 cv
507.312 262.761 507.18 263.109 507.18 263.565 cv
f
516.432 262.125 mo
515.82 262.125 515.364 262.425 515.052 263.025 cv
514.74 263.625 514.596 264.525 514.596 265.725 cv
514.596 266.925 514.74 267.825 515.052 268.425 cv
515.364 269.025 515.82 269.325 516.432 269.325 cv
517.044 269.325 517.5 269.025 517.812 268.425 cv
518.112 267.825 518.268 266.925 518.268 265.725 cv
518.268 264.525 518.112 263.625 517.812 263.025 cv
517.5 262.425 517.044 262.125 516.432 262.125 cv
516.432 261.189 mo
517.404 261.189 518.148 261.585 518.676 262.353 cv
519.192 263.133 519.456 264.261 519.456 265.725 cv
519.456 267.201 519.192 268.329 518.676 269.097 cv
518.148 269.865 517.404 270.249 516.432 270.249 cv
515.448 270.249 514.692 269.865 514.176 269.097 cv
513.66 268.329 513.408 267.201 513.408 265.725 cv
513.408 264.261 513.66 263.133 514.176 262.353 cv
514.692 261.585 515.448 261.189 516.432 261.189 cv
f
540.508 256.968 mo
540.508 252.968 li
f
540.508 256.968 mo
540.508 252.968 li
@
540.508 29.88 mo
540.508 33.88 li
f
540.508 29.88 mo
540.508 33.88 li
@
534.961 269.913 mo
534.961 268.833 li
535.249 268.977 535.549 269.085 535.861 269.157 cv
536.161 269.229 536.461 269.265 536.761 269.265 cv
537.529 269.265 538.129 269.013 538.537 268.485 cv
538.945 267.957 539.185 267.165 539.257 266.085 cv
539.017 266.421 538.729 266.685 538.393 266.865 cv
538.045 267.045 537.661 267.129 537.241 267.129 cv
536.353 267.129 535.657 266.865 535.153 266.337 cv
534.649 265.809 534.397 265.089 534.397 264.165 cv
534.397 263.277 534.661 262.557 535.189 262.005 cv
535.717 261.465 536.425 261.189 537.313 261.189 cv
538.321 261.189 539.101 261.585 539.629 262.353 cv
540.157 263.133 540.433 264.261 540.433 265.725 cv
540.433 267.117 540.097 268.209 539.449 269.025 cv
538.789 269.841 537.913 270.249 536.809 270.249 cv
536.509 270.249 536.209 270.213 535.909 270.165 cv
535.597 270.117 535.285 270.033 534.961 269.913 cv
537.313 266.205 mo
537.841 266.205 538.261 266.025 538.573 265.665 cv
538.885 265.305 539.041 264.801 539.041 264.165 cv
539.041 263.541 538.885 263.037 538.573 262.677 cv
538.261 262.317 537.841 262.125 537.313 262.125 cv
536.785 262.125 536.365 262.317 536.053 262.677 cv
535.741 263.037 535.585 263.541 535.585 264.165 cv
535.585 264.801 535.741 265.305 536.053 265.665 cv
536.365 266.025 536.785 266.205 537.313 266.205 cv
f
545.089 262.125 mo
544.477 262.125 544.021 262.425 543.709 263.025 cv
543.397 263.625 543.253 264.525 543.253 265.725 cv
543.253 266.925 543.397 267.825 543.709 268.425 cv
544.021 269.025 544.477 269.325 545.089 269.325 cv
545.701 269.325 546.157 269.025 546.469 268.425 cv
546.769 267.825 546.925 266.925 546.925 265.725 cv
546.925 264.525 546.769 263.625 546.469 263.025 cv
546.157 262.425 545.701 262.125 545.089 262.125 cv
545.089 261.189 mo
546.061 261.189 546.805 261.585 547.333 262.353 cv
547.849 263.133 548.113 264.261 548.113 265.725 cv
548.113 267.201 547.849 268.329 547.333 269.097 cv
546.805 269.865 546.061 270.249 545.089 270.249 cv
544.105 270.249 543.349 269.865 542.833 269.097 cv
542.317 268.329 542.065 267.201 542.065 265.725 cv
542.065 264.261 542.317 263.133 542.833 262.353 cv
543.349 261.585 544.105 261.189 545.089 261.189 cv
f
52.812 256.968 mo
56.812 256.968 li
f
52.812 256.968 mo
56.812 256.968 li
@
569.196 256.968 mo
565.196 256.968 li
f
569.196 256.968 mo
565.196 256.968 li
@
35.128 252.312 mo
34.516 252.312 34.06 252.612 33.748 253.212 cv
33.436 253.812 33.292 254.712 33.292 255.912 cv
33.292 257.112 33.436 258.012 33.748 258.612 cv
34.06 259.212 34.516 259.512 35.128 259.512 cv
35.74 259.512 36.196 259.212 36.508 258.612 cv
36.808 258.012 36.964 257.112 36.964 255.912 cv
36.964 254.712 36.808 253.812 36.508 253.212 cv
36.196 252.612 35.74 252.312 35.128 252.312 cv
35.128 251.376 mo
36.1 251.376 36.844 251.772 37.372 252.54 cv
37.888 253.32 38.152 254.448 38.152 255.912 cv
38.152 257.388 37.888 258.516 37.372 259.284 cv
36.844 260.052 36.1 260.436 35.128 260.436 cv
34.144 260.436 33.388 260.052 32.872 259.284 cv
32.356 258.516 32.104 257.388 32.104 255.912 cv
32.104 254.448 32.356 253.32 32.872 252.54 cv
33.388 251.772 34.144 251.376 35.128 251.376 cv
f
40.228 258.792 mo
41.464 258.792 li
41.464 260.28 li
40.228 260.28 li
40.228 258.792 li
f
46.5759 252.312 mo
45.9639 252.312 45.5079 252.612 45.1959 253.212 cv
44.8839 253.812 44.7399 254.712 44.7399 255.912 cv
44.7399 257.112 44.8839 258.012 45.1959 258.612 cv
45.5079 259.212 45.9639 259.512 46.5759 259.512 cv
47.1879 259.512 47.6439 259.212 47.9559 258.612 cv
48.2559 258.012 48.4119 257.112 48.4119 255.912 cv
48.4119 254.712 48.2559 253.812 47.9559 253.212 cv
47.6439 252.612 47.1879 252.312 46.5759 252.312 cv
46.5759 251.376 mo
47.5479 251.376 48.2919 251.772 48.8199 252.54 cv
49.3359 253.32 49.5999 254.448 49.5999 255.912 cv
49.5999 257.388 49.3359 258.516 48.8199 259.284 cv
48.2919 260.052 47.5479 260.436 46.5759 260.436 cv
45.5919 260.436 44.8359 260.052 44.3199 259.284 cv
43.8039 258.516 43.5519 257.388 43.5519 255.912 cv
43.5519 254.448 43.8039 253.32 44.3199 252.54 cv
44.8359 251.772 45.5919 251.376 46.5759 251.376 cv
f
52.812 224.527 mo
56.812 224.527 li
f
52.812 224.527 mo
56.812 224.527 li
@
569.196 224.527 mo
565.196 224.527 li
f
569.196 224.527 mo
565.196 224.527 li
@
35.4405 219.871 mo
34.8285 219.871 34.3725 220.171 34.0605 220.771 cv
33.7485 221.371 33.6045 222.271 33.6045 223.471 cv
33.6045 224.671 33.7485 225.571 34.0605 226.171 cv
34.3725 226.771 34.8285 227.071 35.4405 227.071 cv
36.0525 227.071 36.5085 226.771 36.8205 226.171 cv
37.1205 225.571 37.2765 224.671 37.2765 223.471 cv
37.2765 222.271 37.1205 221.371 36.8205 220.771 cv
36.5085 220.171 36.0525 219.871 35.4405 219.871 cv
35.4405 218.935 mo
36.4125 218.935 37.1565 219.331 37.6845 220.099 cv
38.2005 220.879 38.4645 222.007 38.4645 223.471 cv
38.4645 224.947 38.2005 226.075 37.6845 226.843 cv
37.1565 227.611 36.4125 227.995 35.4405 227.995 cv
34.4565 227.995 33.7005 227.611 33.1845 226.843 cv
32.6685 226.075 32.4165 224.947 32.4165 223.471 cv
32.4165 222.007 32.6685 220.879 33.1845 220.099 cv
33.7005 219.331 34.4565 218.935 35.4405 218.935 cv
f
40.5405 226.351 mo
41.7765 226.351 li
41.7765 227.839 li
40.5405 227.839 li
40.5405 226.351 li
f
44.5604 226.843 mo
46.4924 226.843 li
46.4924 220.171 li
44.3924 220.591 li
44.3924 219.511 li
46.4804 219.091 li
47.6684 219.091 li
47.6684 226.843 li
49.6004 226.843 li
49.6004 227.839 li
44.5604 227.839 li
44.5604 226.843 li
f
52.812 192.086 mo
56.812 192.086 li
f
52.812 192.086 mo
56.812 192.086 li
@
569.196 192.086 mo
565.196 192.086 li
f
569.196 192.086 mo
565.196 192.086 li
@
35.5342 187.43 mo
34.9222 187.43 34.4663 187.73 34.1543 188.33 cv
33.8423 188.93 33.6982 189.83 33.6982 191.03 cv
33.6982 192.23 33.8423 193.13 34.1543 193.73 cv
34.4663 194.33 34.9222 194.63 35.5342 194.63 cv
36.1463 194.63 36.6022 194.33 36.9142 193.73 cv
37.2142 193.13 37.3703 192.23 37.3703 191.03 cv
37.3703 189.83 37.2142 188.93 36.9142 188.33 cv
36.6022 187.73 36.1463 187.43 35.5342 187.43 cv
35.5342 186.494 mo
36.5062 186.494 37.2503 186.89 37.7783 187.658 cv
38.2943 188.438 38.5583 189.566 38.5583 191.03 cv
38.5583 192.506 38.2943 193.634 37.7783 194.402 cv
37.2503 195.17 36.5062 195.554 35.5342 195.554 cv
34.5503 195.554 33.7943 195.17 33.2783 194.402 cv
32.7622 193.634 32.5103 192.506 32.5103 191.03 cv
32.5103 189.566 32.7622 188.438 33.2783 187.658 cv
33.7943 186.89 34.5503 186.494 35.5342 186.494 cv
f
40.6343 193.91 mo
41.8703 193.91 li
41.8703 195.398 li
40.6343 195.398 li
40.6343 193.91 li
f
45.4702 194.402 mo
49.5982 194.402 li
49.5982 195.398 li
44.0422 195.398 li
44.0422 194.402 li
44.4862 193.946 45.0982 193.322 45.8782 192.53 cv
46.6462 191.75 47.1382 191.246 47.3422 191.018 cv
47.7262 190.598 47.9902 190.238 48.1342 189.938 cv
48.2782 189.65 48.3622 189.35 48.3622 189.062 cv
48.3622 188.606 48.1942 188.222 47.8702 187.934 cv
47.5462 187.646 47.1262 187.49 46.5982 187.49 cv
46.2262 187.49 45.8302 187.562 45.4222 187.682 cv
45.0142 187.814 44.5702 188.006 44.1022 188.27 cv
44.1022 187.07 li
44.5822 186.878 45.0262 186.734 45.4342 186.638 cv
45.8422 186.542 46.2262 186.494 46.5742 186.494 cv
47.4742 186.494 48.1942 186.722 48.7342 187.178 cv
49.2742 187.634 49.5502 188.234 49.5502 188.99 cv
49.5502 189.35 49.4782 189.698 49.3462 190.01 cv
49.2142 190.334 48.9742 190.718 48.6142 191.15 cv
48.5182 191.27 48.2062 191.594 47.6782 192.134 cv
47.1502 192.674 46.4182 193.43 45.4702 194.402 cv
f
52.812 159.645 mo
56.812 159.645 li
f
52.812 159.645 mo
56.812 159.645 li
@
569.196 159.645 mo
565.196 159.645 li
f
569.196 159.645 mo
565.196 159.645 li
@
35.2999 154.989 mo
34.6879 154.989 34.2319 155.289 33.9199 155.889 cv
33.6079 156.489 33.4639 157.389 33.4639 158.589 cv
33.4639 159.789 33.6079 160.689 33.9199 161.289 cv
34.2319 161.889 34.6879 162.189 35.2999 162.189 cv
35.9119 162.189 36.3679 161.889 36.6799 161.289 cv
36.9799 160.689 37.1359 159.789 37.1359 158.589 cv
37.1359 157.389 36.9799 156.489 36.6799 155.889 cv
36.3679 155.289 35.9119 154.989 35.2999 154.989 cv
35.2999 154.053 mo
36.2719 154.053 37.0159 154.449 37.5439 155.217 cv
38.0599 155.997 38.3239 157.125 38.3239 158.589 cv
38.3239 160.065 38.0599 161.193 37.5439 161.961 cv
37.0159 162.729 36.2719 163.113 35.2999 163.113 cv
34.3159 163.113 33.5599 162.729 33.0439 161.961 cv
32.5279 161.193 32.2759 160.065 32.2759 158.589 cv
32.2759 157.125 32.5279 155.997 33.0439 155.217 cv
33.5599 154.449 34.3159 154.053 35.2999 154.053 cv
f
40.3999 161.469 mo
41.6359 161.469 li
41.6359 162.957 li
40.3999 162.957 li
40.3999 161.469 li
f
47.8038 158.241 mo
48.3678 158.361 48.8118 158.613 49.1238 158.997 cv
49.4358 159.381 49.6038 159.861 49.6038 160.413 cv
49.6038 161.277 49.3038 161.949 48.7158 162.417 cv
48.1158 162.885 47.2758 163.113 46.1838 163.113 cv
45.8118 163.113 45.4278 163.077 45.0438 163.005 cv
44.6598 162.945 44.2518 162.837 43.8438 162.693 cv
43.8438 161.553 li
44.1678 161.745 44.5278 161.889 44.9238 161.985 cv
45.3078 162.081 45.7158 162.129 46.1478 162.129 cv
46.8918 162.129 47.4558 161.985 47.8398 161.697 cv
48.2238 161.409 48.4278 160.977 48.4278 160.413 cv
48.4278 159.909 48.2478 159.501 47.8878 159.213 cv
47.5278 158.925 47.0238 158.769 46.3758 158.769 cv
45.3558 158.769 li
45.3558 157.797 li
46.4238 157.797 li
46.9998 157.797 47.4438 157.689 47.7558 157.449 cv
48.0678 157.221 48.2238 156.885 48.2238 156.441 cv
48.2238 155.997 48.0558 155.649 47.7438 155.409 cv
47.4198 155.169 46.9638 155.049 46.3758 155.049 cv
46.0518 155.049 45.7038 155.085 45.3318 155.157 cv
44.9598 155.229 44.5518 155.337 44.1078 155.481 cv
44.1078 154.425 li
44.5518 154.305 44.9718 154.209 45.3678 154.149 cv
45.7518 154.089 46.1238 154.053 46.4838 154.053 cv
47.3718 154.053 48.0798 154.257 48.6078 154.665 cv
49.1358 155.073 49.3998 155.625 49.3998 156.321 cv
49.3998 156.801 49.2558 157.209 48.9798 157.545 cv
48.7038 157.881 48.3078 158.121 47.8038 158.241 cv
f
52.812 127.203 mo
56.812 127.203 li
f
52.812 127.203 mo
56.812 127.203 li
@
569.196 127.203 mo
565.196 127.203 li
f
569.196 127.203 mo
565.196 127.203 li
@
35.003 122.548 mo
34.391 122.548 33.935 122.848 33.623 123.448 cv
33.311 124.048 33.167 124.948 33.167 126.148 cv
33.167 127.348 33.311 128.248 33.623 128.848 cv
33.935 129.448 34.391 129.748 35.003 129.748 cv
35.615 129.748 36.071 129.448 36.383 128.848 cv
36.683 128.248 36.839 127.348 36.839 126.148 cv
36.839 124.948 36.683 124.048 36.383 123.448 cv
36.071 122.848 35.615 122.548 35.003 122.548 cv
35.003 121.612 mo
35.975 121.612 36.719 122.008 37.247 122.776 cv
37.763 123.556 38.027 124.684 38.027 126.148 cv
38.027 127.624 37.763 128.752 37.247 129.52 cv
36.719 130.288 35.975 130.672 35.003 130.672 cv
34.019 130.672 33.263 130.288 32.747 129.52 cv
32.231 128.752 31.979 127.624 31.979 126.148 cv
31.979 124.684 32.231 123.556 32.747 122.776 cv
33.263 122.008 34.019 121.612 35.003 121.612 cv
f
40.103 129.028 mo
41.339 129.028 li
41.339 130.516 li
40.103 130.516 li
40.103 129.028 li
f
47.1709 122.8 mo
44.1829 127.468 li
47.1709 127.468 li
47.1709 122.8 li
46.8589 121.768 mo
48.3469 121.768 li
48.3469 127.468 li
49.5949 127.468 li
49.5949 128.452 li
48.3469 128.452 li
48.3469 130.516 li
47.1709 130.516 li
47.1709 128.452 li
43.2229 128.452 li
43.2229 127.312 li
46.8589 121.768 li
f
52.812 94.7623 mo
56.812 94.7623 li
f
52.812 94.7623 mo
56.812 94.7623 li
@
569.196 94.7623 mo
565.196 94.7623 li
f
569.196 94.7623 mo
565.196 94.7623 li
@
35.378 90.1068 mo
34.766 90.1068 34.31 90.4068 33.998 91.0068 cv
33.686 91.6068 33.542 92.5068 33.542 93.7068 cv
33.542 94.9068 33.686 95.8068 33.998 96.4068 cv
34.31 97.0068 34.766 97.3068 35.378 97.3068 cv
35.99 97.3068 36.446 97.0068 36.758 96.4068 cv
37.058 95.8068 37.214 94.9068 37.214 93.7068 cv
37.214 92.5068 37.058 91.6068 36.758 91.0068 cv
36.446 90.4068 35.99 90.1068 35.378 90.1068 cv
35.378 89.1708 mo
36.35 89.1708 37.094 89.5668 37.622 90.3348 cv
38.138 91.1148 38.402 92.2428 38.402 93.7068 cv
38.402 95.1828 38.138 96.3108 37.622 97.0788 cv
37.094 97.8468 36.35 98.2308 35.378 98.2308 cv
34.394 98.2308 33.638 97.8468 33.122 97.0788 cv
32.606 96.3108 32.354 95.1828 32.354 93.7068 cv
32.354 92.2428 32.606 91.1148 33.122 90.3348 cv
33.638 89.5668 34.394 89.1708 35.378 89.1708 cv
f
40.478 96.5868 mo
41.714 96.5868 li
41.714 98.0748 li
40.478 98.0748 li
40.478 96.5868 li
f
44.3059 89.3268 mo
48.9499 89.3268 li
48.9499 90.3228 li
45.3859 90.3228 li
45.3859 92.4708 li
45.5539 92.4108 45.7339 92.3628 45.9019 92.3388 cv
46.0699 92.3148 46.2499 92.2908 46.4179 92.2908 cv
47.3899 92.2908 48.1579 92.5668 48.7339 93.0948 cv
49.3099 93.6348 49.5979 94.3548 49.5979 95.2668 cv
49.5979 96.2148 49.2979 96.9468 48.7099 97.4628 cv
48.1219 97.9788 47.2939 98.2308 46.2379 98.2308 cv
45.8659 98.2308 45.4939 98.1948 45.1099 98.1468 cv
44.7259 98.0868 44.3419 98.0028 43.9339 97.8708 cv
43.9339 96.6828 li
44.2819 96.8748 44.6419 97.0188 45.0259 97.1148 cv
45.3979 97.2108 45.7939 97.2468 46.2139 97.2468 cv
46.8859 97.2468 47.4259 97.0788 47.8219 96.7188 cv
48.2059 96.3588 48.4099 95.8788 48.4099 95.2668 cv
48.4099 94.6668 48.2059 94.1868 47.8219 93.8268 cv
47.4259 93.4668 46.8859 93.2868 46.2139 93.2868 cv
45.9019 93.2868 45.5779 93.3228 45.2659 93.3948 cv
44.9539 93.4668 44.6299 93.5748 44.3059 93.7188 cv
44.3059 89.3268 li
f
52.812 62.3211 mo
56.812 62.3211 li
f
52.812 62.3211 mo
56.812 62.3211 li
@
569.196 62.3211 mo
565.196 62.3211 li
f
569.196 62.3211 mo
565.196 62.3211 li
@
35.0967 57.6656 mo
34.4847 57.6656 34.0288 57.9656 33.7168 58.5656 cv
33.4048 59.1656 33.2607 60.0656 33.2607 61.2656 cv
33.2607 62.4656 33.4048 63.3656 33.7168 63.9656 cv
34.0288 64.5656 34.4847 64.8656 35.0967 64.8656 cv
35.7088 64.8656 36.1647 64.5656 36.4767 63.9656 cv
36.7767 63.3656 36.9328 62.4656 36.9328 61.2656 cv
36.9328 60.0656 36.7767 59.1656 36.4767 58.5656 cv
36.1647 57.9656 35.7088 57.6656 35.0967 57.6656 cv
35.0967 56.7296 mo
36.0687 56.7296 36.8128 57.1256 37.3408 57.8936 cv
37.8568 58.6736 38.1208 59.8016 38.1208 61.2656 cv
38.1208 62.7416 37.8568 63.8696 37.3408 64.6376 cv
36.8128 65.4056 36.0687 65.7896 35.0967 65.7896 cv
34.1128 65.7896 33.3568 65.4056 32.8408 64.6376 cv
32.3247 63.8696 32.0728 62.7416 32.0728 61.2656 cv
32.0728 59.8016 32.3247 58.6736 32.8408 57.8936 cv
33.3568 57.1256 34.1128 56.7296 35.0967 56.7296 cv
f
40.1968 64.1456 mo
41.4328 64.1456 li
41.4328 65.6336 li
40.1968 65.6336 li
40.1968 64.1456 li
f
46.6887 60.7856 mo
46.1607 60.7856 45.7407 60.9776 45.4287 61.3376 cv
45.1167 61.6976 44.9607 62.2016 44.9607 62.8256 cv
44.9607 63.4616 45.1167 63.9656 45.4287 64.3256 cv
45.7407 64.6856 46.1607 64.8656 46.6887 64.8656 cv
47.2167 64.8656 47.6367 64.6856 47.9487 64.3256 cv
48.2607 63.9656 48.4167 63.4616 48.4167 62.8256 cv
48.4167 62.2016 48.2607 61.6976 47.9487 61.3376 cv
47.6367 60.9776 47.2167 60.7856 46.6887 60.7856 cv
49.0407 57.0776 mo
49.0407 58.1576 li
48.7407 58.0136 48.4407 57.9056 48.1407 57.8336 cv
47.8287 57.7616 47.5287 57.7256 47.2407 57.7256 cv
46.4487 57.7256 45.8487 57.9896 45.4407 58.5176 cv
45.0327 59.0456 44.7927 59.8496 44.7447 60.9056 cv
44.9727 60.5696 45.2607 60.3056 45.6087 60.1256 cv
45.9567 59.9456 46.3407 59.8496 46.7607 59.8496 cv
47.6367 59.8496 48.3327 60.1256 48.8367 60.6536 cv
49.3407 61.1816 49.6047 61.9136 49.6047 62.8256 cv
49.6047 63.7256 49.3287 64.4456 48.8007 64.9856 cv
48.2727 65.5256 47.5647 65.7896 46.6887 65.7896 cv
45.6807 65.7896 44.9007 65.4056 44.3727 64.6376 cv
43.8327 63.8696 43.5687 62.7416 43.5687 61.2656 cv
43.5687 59.8856 43.8927 58.7816 44.5527 57.9656 cv
45.2007 57.1496 46.0887 56.7296 47.1927 56.7296 cv
47.4807 56.7296 47.7807 56.7656 48.0927 56.8136 cv
48.3927 56.8736 48.7047 56.9576 49.0407 57.0776 cv
f
52.812 29.88 mo
56.812 29.88 li
f
52.812 29.88 mo
56.812 29.88 li
@
569.196 29.88 mo
565.196 29.88 li
f
569.196 29.88 mo
565.196 29.88 li
@
35.3624 25.2245 mo
34.7504 25.2245 34.2944 25.5245 33.9824 26.1245 cv
33.6704 26.7245 33.5264 27.6245 33.5264 28.8245 cv
33.5264 30.0245 33.6704 30.9245 33.9824 31.5245 cv
34.2944 32.1245 34.7504 32.4245 35.3624 32.4245 cv
35.9744 32.4245 36.4304 32.1245 36.7424 31.5245 cv
37.0424 30.9245 37.1984 30.0245 37.1984 28.8245 cv
37.1984 27.6245 37.0424 26.7245 36.7424 26.1245 cv
36.4304 25.5245 35.9744 25.2245 35.3624 25.2245 cv
35.3624 24.2885 mo
36.3344 24.2885 37.0784 24.6845 37.6064 25.4525 cv
38.1224 26.2325 38.3864 27.3605 38.3864 28.8245 cv
38.3864 30.3005 38.1224 31.4285 37.6064 32.1965 cv
37.0784 32.9645 36.3344 33.3485 35.3624 33.3485 cv
34.3784 33.3485 33.6224 32.9645 33.1064 32.1965 cv
32.5904 31.4285 32.3384 30.3005 32.3384 28.8245 cv
32.3384 27.3605 32.5904 26.2325 33.1064 25.4525 cv
33.6224 24.6845 34.3784 24.2885 35.3624 24.2885 cv
f
40.4624 31.7045 mo
41.6984 31.7045 li
41.6984 33.1925 li
40.4624 33.1925 li
40.4624 31.7045 li
f
43.9783 24.4445 mo
49.6063 24.4445 li
49.6063 24.9485 li
46.4263 33.1925 li
45.1903 33.1925 li
48.1783 25.4405 li
43.9783 25.4405 li
43.9783 24.4445 li
f
5 22.6719 mo
113.891 22.6719 li
113.891 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
5 22.6719 mo
113.891 22.6719 li
113.891 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 lj
[6 6 ] 0 dsh
12 13.0938 mo
26 13.0938 li
@
12 17.3364 mo
14.5456 13.0938 li
12 8.8511 li
9.45442 13.0938 li
cp
f
.5 lw
0 lj
[] 0 dsh
12 17.3364 mo
14.5456 13.0938 li
12 8.8511 li
9.45442 13.0938 li
cp
@
26 17.3364 mo
28.5456 13.0938 li
26 8.8511 li
23.4544 13.0938 li
cp
f
26 17.3364 mo
28.5456 13.0938 li
26 8.8511 li
23.4544 13.0938 li
cp
@
37.94 11.1237 mo
38.84 11.1237 li
38.84 16.5938 li
37.94 16.5938 li
37.94 11.1237 li
37.94 8.99375 mo
38.84 8.99375 li
38.84 10.1337 li
37.94 10.1337 li
37.94 8.99375 li
f
44.66 11.3337 mo
44.66 12.1737 li
44.4 12.0337 44.15 11.9338 43.89 11.8637 cv
43.63 11.7937 43.38 11.7537 43.12 11.7537 cv
42.54 11.7537 42.08 11.9438 41.76 12.3137 cv
41.44 12.6838 41.28 13.2037 41.28 13.8637 cv
41.28 14.5337 41.44 15.0538 41.76 15.4237 cv
42.08 15.7937 42.54 15.9738 43.12 15.9738 cv
43.38 15.9738 43.63 15.9438 43.89 15.8737 cv
44.15 15.8038 44.4 15.6938 44.66 15.5538 cv
44.66 16.3838 li
44.4 16.5037 44.14 16.5938 43.88 16.6437 cv
43.61 16.6938 43.32 16.7237 43.02 16.7237 cv
42.2 16.7237 41.54 16.4737 41.06 15.9537 cv
40.57 15.4438 40.33 14.7437 40.33 13.8637 cv
40.33 12.9737 40.57 12.2738 41.06 11.7638 cv
41.55 11.2537 42.22 10.9937 43.08 10.9937 cv
43.36 10.9937 43.63 11.0238 43.89 11.0837 cv
44.15 11.1437 44.41 11.2237 44.66 11.3337 cv
f
47.11 9.57375 mo
47.11 11.1237 li
48.96 11.1237 li
48.96 11.8237 li
47.11 11.8237 li
47.11 14.7937 li
47.11 15.2437 47.17 15.5337 47.29 15.6537 cv
47.41 15.7837 47.66 15.8438 48.04 15.8438 cv
48.96 15.8438 li
48.96 16.5938 li
48.04 16.5938 li
47.34 16.5938 46.86 16.4638 46.6 16.2038 cv
46.34 15.9438 46.21 15.4738 46.21 14.7937 cv
46.21 11.8237 li
45.55 11.8237 li
45.55 11.1237 li
46.21 11.1237 li
46.21 9.57375 li
47.11 9.57375 li
f
1 lw
1 lj
[1 3 ] 0 dsh
71.0313 13.0938 mo
85.0313 13.0938 li
@
gsave
67.7813 16.3438 mo
74.2813 16.3438 li
74.2813 9.84375 li
67.7813 9.84375 li
cp
clp
.5 lw
[] 0 dsh
71.0313 16.0938 mo
71.8269 16.0938 72.59 15.7777 73.1526 15.2151 cv
73.7151 14.6525 74.0313 13.8894 74.0313 13.0938 cv
74.0313 12.2981 73.7151 11.535 73.1526 10.9724 cv
72.59 10.4098 71.8269 10.0938 71.0313 10.0938 cv
70.2356 10.0938 69.4725 10.4098 68.9099 10.9724 cv
68.3474 11.535 68.0313 12.2981 68.0313 13.0938 cv
68.0313 13.8894 68.3474 14.6525 68.9099 15.2151 cv
69.4725 15.7777 70.2356 16.0938 71.0313 16.0938 cv
cp
@
grestore
gsave
81.7813 16.3438 mo
88.2813 16.3438 li
88.2813 9.84375 li
81.7813 9.84375 li
cp
clp
.5 lw
[] 0 dsh
85.0313 16.0938 mo
85.8269 16.0938 86.59 15.7777 87.1526 15.2151 cv
87.7151 14.6525 88.0313 13.8894 88.0313 13.0938 cv
88.0313 12.2981 87.7151 11.535 87.1526 10.9724 cv
86.59 10.4098 85.8269 10.0938 85.0313 10.0938 cv
84.2356 10.0938 83.4725 10.4098 82.9099 10.9724 cv
82.3474 11.535 82.0313 12.2981 82.0313 13.0938 cv
82.0313 13.8894 82.3474 14.6525 82.9099 15.2151 cv
83.4725 15.7777 84.2356 16.0938 85.0313 16.0938 cv
cp
@
grestore
100.461 11.2837 mo
100.461 12.1337 li
100.201 12.0138 99.9413 11.9137 99.6712 11.8438 cv
99.3913 11.7837 99.1113 11.7437 98.8213 11.7437 cv
98.3712 11.7437 98.0313 11.8137 97.8112 11.9537 cv
97.5912 12.0938 97.4812 12.2937 97.4812 12.5637 cv
97.4812 12.7738 97.5612 12.9338 97.7213 13.0538 cv
97.8812 13.1737 98.2012 13.2937 98.6813 13.3937 cv
98.9912 13.4637 li
99.6312 13.6038 100.081 13.8038 100.351 14.0437 cv
100.611 14.2937 100.751 14.6438 100.751 15.0837 cv
100.751 15.5938 100.551 15.9937 100.151 16.2838 cv
99.7513 16.5837 99.1913 16.7237 98.4912 16.7237 cv
98.1913 16.7237 97.8913 16.6938 97.5713 16.6437 cv
97.2513 16.5938 96.9212 16.5138 96.5713 16.3937 cv
96.5713 15.4637 li
96.9013 15.6438 97.2312 15.7738 97.5512 15.8538 cv
97.8712 15.9438 98.1913 15.9838 98.5113 15.9838 cv
98.9313 15.9838 99.2613 15.9137 99.4912 15.7738 cv
99.7113 15.6337 99.8313 15.4237 99.8313 15.1537 cv
99.8313 14.9137 99.7412 14.7238 99.5813 14.5938 cv
99.4212 14.4637 99.0612 14.3337 98.5013 14.2137 cv
98.1913 14.1437 li
97.6312 14.0238 97.2213 13.8438 96.9812 13.6038 cv
96.7312 13.3637 96.6113 13.0337 96.6113 12.6038 cv
96.6113 12.0938 96.7913 11.6937 97.1513 11.4137 cv
97.5113 11.1337 98.0313 10.9937 98.7113 10.9937 cv
99.0413 10.9937 99.3512 11.0238 99.6513 11.0737 cv
99.9413 11.1237 100.211 11.1937 100.461 11.2837 cv
f
106.121 11.3337 mo
106.121 12.1737 li
105.861 12.0337 105.611 11.9338 105.351 11.8637 cv
105.091 11.7937 104.841 11.7537 104.581 11.7537 cv
104.001 11.7537 103.541 11.9438 103.221 12.3137 cv
102.901 12.6838 102.741 13.2037 102.741 13.8637 cv
102.741 14.5337 102.901 15.0538 103.221 15.4237 cv
103.541 15.7937 104.001 15.9738 104.581 15.9738 cv
104.841 15.9738 105.091 15.9438 105.351 15.8737 cv
105.611 15.8038 105.861 15.6938 106.121 15.5538 cv
106.121 16.3838 li
105.861 16.5037 105.601 16.5938 105.341 16.6437 cv
105.071 16.6938 104.781 16.7237 104.481 16.7237 cv
103.661 16.7237 103.001 16.4737 102.521 15.9537 cv
102.031 15.4438 101.791 14.7437 101.791 13.8637 cv
101.791 12.9737 102.031 12.2738 102.521 11.7638 cv
103.011 11.2537 103.681 10.9937 104.541 10.9937 cv
104.821 10.9937 105.091 11.0238 105.351 11.0837 cv
105.611 11.1437 105.871 11.2237 106.121 11.3337 cv
f
108.571 9.57375 mo
108.571 11.1237 li
110.421 11.1237 li
110.421 11.8237 li
108.571 11.8237 li
108.571 14.7937 li
108.571 15.2437 108.631 15.5337 108.751 15.6537 cv
108.871 15.7837 109.121 15.8438 109.501 15.8438 cv
110.421 15.8438 li
110.421 16.5938 li
109.501 16.5938 li
108.801 16.5938 108.321 16.4638 108.061 16.2038 cv
107.801 15.9438 107.671 15.4738 107.671 14.7937 cv
107.671 11.8237 li
107.011 11.8237 li
107.011 11.1237 li
107.671 11.1237 li
107.671 9.57375 li
108.571 9.57375 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
