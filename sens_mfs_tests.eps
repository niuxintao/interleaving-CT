%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: mfs.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: xintao
%%CreationDate: 2016/3/13, 4:31:39
%%BoundingBox: 0 0 587 299
%%HiResBoundingBox: 0 0 586.8000 298.8000
%%CropBox: 0 0 586.8000 298.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-03-13T04:28:08-05:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -298.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 298.8 li
586.8 298.8 li
586.8 0 li
cp
clp
gsave
0 298.8 mo
587 298.8 li
587 -.200012 li
0 -.200012 li
cp
clp
0 298.8 mo
586.8 298.8 li
586.8 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
f
gsave
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
52.812 241.915 mo
81.5 238.282 li
110.188 237.244 li
138.876 232.572 li
167.564 233.74 li
196.252 235.297 li
224.94 236.595 li
253.628 239.32 li
282.316 239.969 li
311.004 235.816 li
339.692 225.046 li
368.38 215.962 li
397.068 198.833 li
425.756 203.505 li
454.444 206.619 li
483.132 202.986 li
511.82 203.375 li
540.508 172.751 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
49.562 245.165 mo
56.062 245.165 li
56.062 238.665 li
49.562 238.665 li
cp
clp
49.812 244.915 mo
55.812 244.915 li
55.812 238.915 li
49.812 238.915 li
cp
f
.5 lw
0 lc
0 lj
49.812 244.915 mo
55.812 244.915 li
55.812 238.915 li
49.812 238.915 li
cp
@
grestore
gsave
78.25 241.532 mo
84.75 241.532 li
84.75 235.032 li
78.25 235.032 li
cp
clp
78.5 241.282 mo
84.5 241.282 li
84.5 235.282 li
78.5 235.282 li
cp
f
.5 lw
0 lc
0 lj
78.5 241.282 mo
84.5 241.282 li
84.5 235.282 li
78.5 235.282 li
cp
@
grestore
gsave
106.938 240.494 mo
113.438 240.494 li
113.438 233.994 li
106.938 233.994 li
cp
clp
107.188 240.244 mo
113.188 240.244 li
113.188 234.244 li
107.188 234.244 li
cp
f
.5 lw
0 lc
0 lj
107.188 240.244 mo
113.188 240.244 li
113.188 234.244 li
107.188 234.244 li
cp
@
grestore
gsave
135.626 235.822 mo
142.126 235.822 li
142.126 229.322 li
135.626 229.322 li
cp
clp
135.876 235.572 mo
141.876 235.572 li
141.876 229.572 li
135.876 229.572 li
cp
f
.5 lw
0 lc
0 lj
135.876 235.572 mo
141.876 235.572 li
141.876 229.572 li
135.876 229.572 li
cp
@
grestore
gsave
164.314 236.99 mo
170.814 236.99 li
170.814 230.49 li
164.314 230.49 li
cp
clp
164.564 236.74 mo
170.564 236.74 li
170.564 230.74 li
164.564 230.74 li
cp
f
.5 lw
0 lc
0 lj
164.564 236.74 mo
170.564 236.74 li
170.564 230.74 li
164.564 230.74 li
cp
@
grestore
gsave
193.002 238.547 mo
199.502 238.547 li
199.502 232.047 li
193.002 232.047 li
cp
clp
193.252 238.297 mo
199.252 238.297 li
199.252 232.297 li
193.252 232.297 li
cp
f
.5 lw
0 lc
0 lj
193.252 238.297 mo
199.252 238.297 li
199.252 232.297 li
193.252 232.297 li
cp
@
grestore
gsave
221.69 239.845 mo
228.19 239.845 li
228.19 233.345 li
221.69 233.345 li
cp
clp
221.94 239.595 mo
227.94 239.595 li
227.94 233.595 li
221.94 233.595 li
cp
f
.5 lw
0 lc
0 lj
221.94 239.595 mo
227.94 239.595 li
227.94 233.595 li
221.94 233.595 li
cp
@
grestore
gsave
250.378 242.57 mo
256.878 242.57 li
256.878 236.07 li
250.378 236.07 li
cp
clp
250.628 242.32 mo
256.628 242.32 li
256.628 236.32 li
250.628 236.32 li
cp
f
.5 lw
0 lc
0 lj
250.628 242.32 mo
256.628 242.32 li
256.628 236.32 li
250.628 236.32 li
cp
@
grestore
gsave
279.066 243.219 mo
285.566 243.219 li
285.566 236.719 li
279.066 236.719 li
cp
clp
279.316 242.969 mo
285.316 242.969 li
285.316 236.969 li
279.316 236.969 li
cp
f
.5 lw
0 lc
0 lj
279.316 242.969 mo
285.316 242.969 li
285.316 236.969 li
279.316 236.969 li
cp
@
grestore
gsave
307.754 239.066 mo
314.254 239.066 li
314.254 232.566 li
307.754 232.566 li
cp
clp
308.004 238.816 mo
314.004 238.816 li
314.004 232.816 li
308.004 232.816 li
cp
f
.5 lw
0 lc
0 lj
308.004 238.816 mo
314.004 238.816 li
314.004 232.816 li
308.004 232.816 li
cp
@
grestore
gsave
336.442 228.296 mo
342.942 228.296 li
342.942 221.796 li
336.442 221.796 li
cp
clp
336.692 228.046 mo
342.692 228.046 li
342.692 222.046 li
336.692 222.046 li
cp
f
.5 lw
0 lc
0 lj
336.692 228.046 mo
342.692 228.046 li
342.692 222.046 li
336.692 222.046 li
cp
@
grestore
gsave
365.13 219.212 mo
371.63 219.212 li
371.63 212.712 li
365.13 212.712 li
cp
clp
365.38 218.962 mo
371.38 218.962 li
371.38 212.962 li
365.38 212.962 li
cp
f
.5 lw
0 lc
0 lj
365.38 218.962 mo
371.38 218.962 li
371.38 212.962 li
365.38 212.962 li
cp
@
grestore
gsave
393.818 202.083 mo
400.318 202.083 li
400.318 195.583 li
393.818 195.583 li
cp
clp
394.068 201.833 mo
400.068 201.833 li
400.068 195.833 li
394.068 195.833 li
cp
f
.5 lw
0 lc
0 lj
394.068 201.833 mo
400.068 201.833 li
400.068 195.833 li
394.068 195.833 li
cp
@
grestore
gsave
422.506 206.755 mo
429.006 206.755 li
429.006 200.255 li
422.506 200.255 li
cp
clp
422.756 206.505 mo
428.756 206.505 li
428.756 200.505 li
422.756 200.505 li
cp
f
.5 lw
0 lc
0 lj
422.756 206.505 mo
428.756 206.505 li
428.756 200.505 li
422.756 200.505 li
cp
@
grestore
gsave
451.194 209.869 mo
457.694 209.869 li
457.694 203.369 li
451.194 203.369 li
cp
clp
451.444 209.619 mo
457.444 209.619 li
457.444 203.619 li
451.444 203.619 li
cp
f
.5 lw
0 lc
0 lj
451.444 209.619 mo
457.444 209.619 li
457.444 203.619 li
451.444 203.619 li
cp
@
grestore
gsave
479.882 206.236 mo
486.382 206.236 li
486.382 199.736 li
479.882 199.736 li
cp
clp
480.132 205.986 mo
486.132 205.986 li
486.132 199.986 li
480.132 199.986 li
cp
f
.5 lw
0 lc
0 lj
480.132 205.986 mo
486.132 205.986 li
486.132 199.986 li
480.132 199.986 li
cp
@
grestore
gsave
508.57 206.625 mo
515.07 206.625 li
515.07 200.125 li
508.57 200.125 li
cp
clp
508.82 206.375 mo
514.82 206.375 li
514.82 200.375 li
508.82 200.375 li
cp
f
.5 lw
0 lc
0 lj
508.82 206.375 mo
514.82 206.375 li
514.82 200.375 li
508.82 200.375 li
cp
@
grestore
gsave
537.258 176.001 mo
543.758 176.001 li
543.758 169.501 li
537.258 169.501 li
cp
clp
537.508 175.751 mo
543.508 175.751 li
543.508 169.751 li
537.508 169.751 li
cp
f
.5 lw
0 lc
0 lj
537.508 175.751 mo
543.508 175.751 li
543.508 169.751 li
537.508 169.751 li
cp
@
grestore
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
569.196 256.968 mo
569.196 29.88 li
1 /0 /CSD get_res sepcs
1 sep
@
52.812 29.88 mo
569.196 29.88 li
@
52.812 256.968 mo
52.812 29.88 li
@
52.812 256.968 mo
569.196 256.968 li
@
52.812 256.968 mo
52.812 252.968 li
f
.5 lw
0 lc
1 lj
52.812 256.968 mo
52.812 252.968 li
@
52.812 29.88 mo
52.812 33.88 li
f
52.812 29.88 mo
52.812 33.88 li
@
51.6906 269.097 mo
53.6226 269.097 li
53.6226 262.425 li
51.5226 262.845 li
51.5226 261.765 li
53.6106 261.345 li
54.7986 261.345 li
54.7986 269.097 li
56.7306 269.097 li
56.7306 270.093 li
51.6906 270.093 li
51.6906 269.097 li
f
81.5 256.968 mo
81.5 252.968 li
f
81.5 256.968 mo
81.5 252.968 li
@
81.5 29.88 mo
81.5 33.88 li
f
81.5 29.88 mo
81.5 33.88 li
@
81.0228 269.097 mo
85.1507 269.097 li
85.1507 270.093 li
79.5947 270.093 li
79.5947 269.097 li
80.0387 268.641 80.6507 268.017 81.4307 267.225 cv
82.1988 266.445 82.6908 265.941 82.8948 265.713 cv
83.2787 265.293 83.5427 264.933 83.6868 264.633 cv
83.8307 264.345 83.9147 264.045 83.9147 263.757 cv
83.9147 263.301 83.7467 262.917 83.4228 262.629 cv
83.0987 262.341 82.6787 262.185 82.1507 262.185 cv
81.7787 262.185 81.3828 262.257 80.9747 262.377 cv
80.5667 262.509 80.1227 262.701 79.6547 262.965 cv
79.6547 261.765 li
80.1348 261.573 80.5788 261.429 80.9867 261.333 cv
81.3948 261.237 81.7787 261.189 82.1267 261.189 cv
83.0267 261.189 83.7467 261.417 84.2868 261.873 cv
84.8268 262.329 85.1028 262.929 85.1028 263.685 cv
85.1028 264.045 85.0307 264.393 84.8988 264.705 cv
84.7667 265.029 84.5267 265.413 84.1667 265.845 cv
84.0707 265.965 83.7588 266.289 83.2308 266.829 cv
82.7028 267.369 81.9707 268.125 81.0228 269.097 cv
f
110.188 256.968 mo
110.188 252.968 li
f
110.188 256.968 mo
110.188 252.968 li
@
110.188 29.88 mo
110.188 33.88 li
f
110.188 29.88 mo
110.188 33.88 li
@
112.185 265.377 mo
112.749 265.497 113.193 265.749 113.505 266.133 cv
113.817 266.517 113.985 266.997 113.985 267.549 cv
113.985 268.413 113.685 269.085 113.097 269.553 cv
112.497 270.021 111.657 270.249 110.565 270.249 cv
110.193 270.249 109.809 270.213 109.425 270.141 cv
109.041 270.081 108.633 269.973 108.225 269.829 cv
108.225 268.689 li
108.549 268.881 108.909 269.025 109.305 269.121 cv
109.689 269.217 110.097 269.265 110.529 269.265 cv
111.273 269.265 111.837 269.121 112.221 268.833 cv
112.605 268.545 112.809 268.113 112.809 267.549 cv
112.809 267.045 112.629 266.637 112.269 266.349 cv
111.909 266.061 111.405 265.905 110.757 265.905 cv
109.737 265.905 li
109.737 264.933 li
110.805 264.933 li
111.381 264.933 111.825 264.825 112.137 264.585 cv
112.449 264.357 112.605 264.021 112.605 263.577 cv
112.605 263.133 112.437 262.785 112.125 262.545 cv
111.801 262.305 111.345 262.185 110.757 262.185 cv
110.433 262.185 110.085 262.221 109.713 262.293 cv
109.341 262.365 108.933 262.473 108.489 262.617 cv
108.489 261.561 li
108.933 261.441 109.353 261.345 109.749 261.285 cv
110.133 261.225 110.505 261.189 110.865 261.189 cv
111.753 261.189 112.461 261.393 112.989 261.801 cv
113.517 262.209 113.781 262.761 113.781 263.457 cv
113.781 263.937 113.637 264.345 113.361 264.681 cv
113.085 265.017 112.689 265.257 112.185 265.377 cv
f
138.876 256.968 mo
138.876 252.968 li
f
138.876 256.968 mo
138.876 252.968 li
@
138.876 29.88 mo
138.876 33.88 li
f
138.876 29.88 mo
138.876 33.88 li
@
140.225 262.377 mo
137.237 267.045 li
140.225 267.045 li
140.225 262.377 li
139.913 261.345 mo
141.401 261.345 li
141.401 267.045 li
142.649 267.045 li
142.649 268.029 li
141.401 268.029 li
141.401 270.093 li
140.225 270.093 li
140.225 268.029 li
136.277 268.029 li
136.277 266.889 li
139.913 261.345 li
f
167.564 256.968 mo
167.564 252.968 li
f
167.564 256.968 mo
167.564 252.968 li
@
167.564 29.88 mo
167.564 33.88 li
f
167.564 29.88 mo
167.564 33.88 li
@
166.024 261.345 mo
170.668 261.345 li
170.668 262.341 li
167.104 262.341 li
167.104 264.489 li
167.272 264.429 167.452 264.381 167.62 264.357 cv
167.788 264.333 167.968 264.309 168.136 264.309 cv
169.108 264.309 169.876 264.585 170.452 265.113 cv
171.028 265.653 171.316 266.373 171.316 267.285 cv
171.316 268.233 171.016 268.965 170.428 269.481 cv
169.84 269.997 169.012 270.249 167.956 270.249 cv
167.584 270.249 167.212 270.213 166.828 270.165 cv
166.444 270.105 166.06 270.021 165.652 269.889 cv
165.652 268.701 li
166 268.893 166.36 269.037 166.744 269.133 cv
167.116 269.229 167.512 269.265 167.932 269.265 cv
168.604 269.265 169.144 269.097 169.54 268.737 cv
169.924 268.377 170.128 267.897 170.128 267.285 cv
170.128 266.685 169.924 266.205 169.54 265.845 cv
169.144 265.485 168.604 265.305 167.932 265.305 cv
167.62 265.305 167.296 265.341 166.984 265.413 cv
166.672 265.485 166.348 265.593 166.024 265.737 cv
166.024 261.345 li
f
196.252 256.968 mo
196.252 252.968 li
f
196.252 256.968 mo
196.252 252.968 li
@
196.252 29.88 mo
196.252 33.88 li
f
196.252 29.88 mo
196.252 33.88 li
@
197.196 265.245 mo
196.668 265.245 196.248 265.437 195.936 265.797 cv
195.624 266.157 195.468 266.661 195.468 267.285 cv
195.468 267.921 195.624 268.425 195.936 268.785 cv
196.248 269.145 196.668 269.325 197.196 269.325 cv
197.724 269.325 198.144 269.145 198.456 268.785 cv
198.768 268.425 198.924 267.921 198.924 267.285 cv
198.924 266.661 198.768 266.157 198.456 265.797 cv
198.144 265.437 197.724 265.245 197.196 265.245 cv
199.548 261.537 mo
199.548 262.617 li
199.248 262.473 198.948 262.365 198.648 262.293 cv
198.336 262.221 198.036 262.185 197.748 262.185 cv
196.956 262.185 196.356 262.449 195.948 262.977 cv
195.54 263.505 195.3 264.309 195.252 265.365 cv
195.48 265.029 195.768 264.765 196.116 264.585 cv
196.464 264.405 196.848 264.309 197.268 264.309 cv
198.144 264.309 198.84 264.585 199.344 265.113 cv
199.848 265.641 200.112 266.373 200.112 267.285 cv
200.112 268.185 199.836 268.905 199.308 269.445 cv
198.78 269.985 198.072 270.249 197.196 270.249 cv
196.188 270.249 195.408 269.865 194.88 269.097 cv
194.34 268.329 194.076 267.201 194.076 265.725 cv
194.076 264.345 194.4 263.241 195.06 262.425 cv
195.708 261.609 196.596 261.189 197.7 261.189 cv
197.988 261.189 198.288 261.225 198.6 261.273 cv
198.9 261.333 199.212 261.417 199.548 261.537 cv
f
224.94 256.968 mo
224.94 252.968 li
f
224.94 256.968 mo
224.94 252.968 li
@
224.94 29.88 mo
224.94 33.88 li
f
224.94 29.88 mo
224.94 33.88 li
@
223.111 261.345 mo
228.74 261.345 li
228.74 261.849 li
225.56 270.093 li
224.324 270.093 li
227.312 262.341 li
223.111 262.341 li
223.111 261.345 li
f
253.628 256.968 mo
253.628 252.968 li
f
253.628 256.968 mo
253.628 252.968 li
@
253.628 29.88 mo
253.628 33.88 li
f
253.628 29.88 mo
253.628 33.88 li
@
254.444 265.941 mo
253.88 265.941 253.436 266.097 253.112 266.397 cv
252.788 266.697 252.632 267.105 252.632 267.633 cv
252.632 268.161 252.788 268.581 253.112 268.881 cv
253.436 269.181 253.88 269.325 254.444 269.325 cv
254.996 269.325 255.44 269.181 255.764 268.869 cv
256.088 268.569 256.256 268.161 256.256 267.633 cv
256.256 267.105 256.088 266.697 255.776 266.397 cv
255.452 266.097 255.008 265.941 254.444 265.941 cv
253.256 265.437 mo
252.752 265.317 252.356 265.077 252.068 264.729 cv
251.78 264.381 251.648 263.961 251.648 263.457 cv
251.648 262.761 251.888 262.209 252.392 261.801 cv
252.884 261.393 253.568 261.189 254.444 261.189 cv
255.308 261.189 255.992 261.393 256.496 261.801 cv
256.988 262.209 257.24 262.761 257.24 263.457 cv
257.24 263.961 257.096 264.381 256.808 264.729 cv
256.52 265.077 256.136 265.317 255.632 265.437 cv
256.196 265.569 256.64 265.833 256.964 266.217 cv
257.276 266.601 257.444 267.081 257.444 267.633 cv
257.444 268.485 257.18 269.133 256.664 269.577 cv
256.136 270.033 255.404 270.249 254.444 270.249 cv
253.472 270.249 252.728 270.033 252.212 269.577 cv
251.696 269.133 251.444 268.485 251.444 267.633 cv
251.444 267.081 251.6 266.601 251.924 266.217 cv
252.236 265.833 252.68 265.569 253.256 265.437 cv
252.824 263.565 mo
252.824 264.021 252.956 264.381 253.244 264.633 cv
253.532 264.885 253.928 265.005 254.444 265.005 cv
254.948 265.005 255.344 264.885 255.632 264.633 cv
255.92 264.381 256.064 264.021 256.064 263.565 cv
256.064 263.109 255.92 262.761 255.632 262.509 cv
255.344 262.257 254.948 262.125 254.444 262.125 cv
253.928 262.125 253.532 262.257 253.244 262.509 cv
252.956 262.761 252.824 263.109 252.824 263.565 cv
f
282.316 256.968 mo
282.316 252.968 li
f
282.316 256.968 mo
282.316 252.968 li
@
282.316 29.88 mo
282.316 33.88 li
f
282.316 29.88 mo
282.316 33.88 li
@
280.613 269.913 mo
280.613 268.833 li
280.901 268.977 281.201 269.085 281.513 269.157 cv
281.813 269.229 282.113 269.265 282.413 269.265 cv
283.181 269.265 283.781 269.013 284.189 268.485 cv
284.597 267.957 284.837 267.165 284.909 266.085 cv
284.669 266.421 284.381 266.685 284.045 266.865 cv
283.697 267.045 283.313 267.129 282.893 267.129 cv
282.005 267.129 281.309 266.865 280.805 266.337 cv
280.301 265.809 280.049 265.089 280.049 264.165 cv
280.049 263.277 280.313 262.557 280.841 262.005 cv
281.369 261.465 282.077 261.189 282.965 261.189 cv
283.973 261.189 284.753 261.585 285.281 262.353 cv
285.809 263.133 286.085 264.261 286.085 265.725 cv
286.085 267.117 285.749 268.209 285.101 269.025 cv
284.441 269.841 283.565 270.249 282.461 270.249 cv
282.161 270.249 281.861 270.213 281.561 270.165 cv
281.249 270.117 280.937 270.033 280.613 269.913 cv
282.965 266.205 mo
283.493 266.205 283.913 266.025 284.225 265.665 cv
284.537 265.305 284.693 264.801 284.693 264.165 cv
284.693 263.541 284.537 263.037 284.225 262.677 cv
283.913 262.317 283.493 262.125 282.965 262.125 cv
282.437 262.125 282.017 262.317 281.705 262.677 cv
281.393 263.037 281.237 263.541 281.237 264.165 cv
281.237 264.801 281.393 265.305 281.705 265.665 cv
282.017 266.025 282.437 266.205 282.965 266.205 cv
f
311.004 256.968 mo
311.004 252.968 li
f
311.004 256.968 mo
311.004 252.968 li
@
311.004 29.88 mo
311.004 33.88 li
f
311.004 29.88 mo
311.004 33.88 li
@
305.906 269.097 mo
307.838 269.097 li
307.838 262.425 li
305.738 262.845 li
305.738 261.765 li
307.826 261.345 li
309.014 261.345 li
309.014 269.097 li
310.946 269.097 li
310.946 270.093 li
305.906 270.093 li
305.906 269.097 li
f
315.866 262.125 mo
315.254 262.125 314.798 262.425 314.486 263.025 cv
314.174 263.625 314.03 264.525 314.03 265.725 cv
314.03 266.925 314.174 267.825 314.486 268.425 cv
314.798 269.025 315.254 269.325 315.866 269.325 cv
316.478 269.325 316.934 269.025 317.246 268.425 cv
317.546 267.825 317.702 266.925 317.702 265.725 cv
317.702 264.525 317.546 263.625 317.246 263.025 cv
316.934 262.425 316.478 262.125 315.866 262.125 cv
315.866 261.189 mo
316.838 261.189 317.582 261.585 318.11 262.353 cv
318.626 263.133 318.89 264.261 318.89 265.725 cv
318.89 267.201 318.626 268.329 318.11 269.097 cv
317.582 269.865 316.838 270.249 315.866 270.249 cv
314.882 270.249 314.126 269.865 313.61 269.097 cv
313.094 268.329 312.842 267.201 312.842 265.725 cv
312.842 264.261 313.094 263.133 313.61 262.353 cv
314.126 261.585 314.882 261.189 315.866 261.189 cv
f
339.692 256.968 mo
339.692 252.968 li
f
339.692 256.968 mo
339.692 252.968 li
@
339.692 29.88 mo
339.692 33.88 li
f
339.692 29.88 mo
339.692 33.88 li
@
335.191 269.097 mo
339.319 269.097 li
339.319 270.093 li
333.763 270.093 li
333.763 269.097 li
334.207 268.641 334.819 268.017 335.599 267.225 cv
336.367 266.445 336.859 265.941 337.063 265.713 cv
337.447 265.293 337.711 264.933 337.855 264.633 cv
337.999 264.345 338.083 264.045 338.083 263.757 cv
338.083 263.301 337.915 262.917 337.591 262.629 cv
337.267 262.341 336.847 262.185 336.319 262.185 cv
335.947 262.185 335.551 262.257 335.143 262.377 cv
334.735 262.509 334.291 262.701 333.823 262.965 cv
333.823 261.765 li
334.303 261.573 334.747 261.429 335.155 261.333 cv
335.563 261.237 335.947 261.189 336.295 261.189 cv
337.195 261.189 337.915 261.417 338.455 261.873 cv
338.995 262.329 339.271 262.929 339.271 263.685 cv
339.271 264.045 339.199 264.393 339.067 264.705 cv
338.935 265.029 338.695 265.413 338.335 265.845 cv
338.239 265.965 337.927 266.289 337.399 266.829 cv
336.871 267.369 336.139 268.125 335.191 269.097 cv
f
344.335 262.125 mo
343.723 262.125 343.267 262.425 342.955 263.025 cv
342.643 263.625 342.499 264.525 342.499 265.725 cv
342.499 266.925 342.643 267.825 342.955 268.425 cv
343.267 269.025 343.723 269.325 344.335 269.325 cv
344.947 269.325 345.403 269.025 345.715 268.425 cv
346.015 267.825 346.171 266.925 346.171 265.725 cv
346.171 264.525 346.015 263.625 345.715 263.025 cv
345.403 262.425 344.947 262.125 344.335 262.125 cv
344.335 261.189 mo
345.307 261.189 346.051 261.585 346.579 262.353 cv
347.095 263.133 347.359 264.261 347.359 265.725 cv
347.359 267.201 347.095 268.329 346.579 269.097 cv
346.051 269.865 345.307 270.249 344.335 270.249 cv
343.351 270.249 342.595 269.865 342.079 269.097 cv
341.563 268.329 341.311 267.201 341.311 265.725 cv
341.311 264.261 341.563 263.133 342.079 262.353 cv
342.595 261.585 343.351 261.189 344.335 261.189 cv
f
368.38 256.968 mo
368.38 252.968 li
f
368.38 256.968 mo
368.38 252.968 li
@
368.38 29.88 mo
368.38 33.88 li
f
368.38 29.88 mo
368.38 33.88 li
@
366.471 265.377 mo
367.035 265.497 367.479 265.749 367.791 266.133 cv
368.103 266.517 368.271 266.997 368.271 267.549 cv
368.271 268.413 367.971 269.085 367.383 269.553 cv
366.783 270.021 365.943 270.249 364.851 270.249 cv
364.479 270.249 364.095 270.213 363.711 270.141 cv
363.327 270.081 362.919 269.973 362.511 269.829 cv
362.511 268.689 li
362.835 268.881 363.195 269.025 363.591 269.121 cv
363.975 269.217 364.383 269.265 364.815 269.265 cv
365.559 269.265 366.123 269.121 366.507 268.833 cv
366.891 268.545 367.095 268.113 367.095 267.549 cv
367.095 267.045 366.915 266.637 366.555 266.349 cv
366.195 266.061 365.691 265.905 365.043 265.905 cv
364.023 265.905 li
364.023 264.933 li
365.091 264.933 li
365.667 264.933 366.111 264.825 366.423 264.585 cv
366.735 264.357 366.891 264.021 366.891 263.577 cv
366.891 263.133 366.723 262.785 366.411 262.545 cv
366.087 262.305 365.631 262.185 365.043 262.185 cv
364.719 262.185 364.371 262.221 363.999 262.293 cv
363.627 262.365 363.219 262.473 362.775 262.617 cv
362.775 261.561 li
363.219 261.441 363.639 261.345 364.035 261.285 cv
364.419 261.225 364.791 261.189 365.151 261.189 cv
366.039 261.189 366.747 261.393 367.275 261.801 cv
367.803 262.209 368.067 262.761 368.067 263.457 cv
368.067 263.937 367.923 264.345 367.647 264.681 cv
367.371 265.017 366.975 265.257 366.471 265.377 cv
f
373.047 262.125 mo
372.435 262.125 371.979 262.425 371.667 263.025 cv
371.355 263.625 371.211 264.525 371.211 265.725 cv
371.211 266.925 371.355 267.825 371.667 268.425 cv
371.979 269.025 372.435 269.325 373.047 269.325 cv
373.659 269.325 374.115 269.025 374.427 268.425 cv
374.727 267.825 374.883 266.925 374.883 265.725 cv
374.883 264.525 374.727 263.625 374.427 263.025 cv
374.115 262.425 373.659 262.125 373.047 262.125 cv
373.047 261.189 mo
374.019 261.189 374.763 261.585 375.291 262.353 cv
375.807 263.133 376.071 264.261 376.071 265.725 cv
376.071 267.201 375.807 268.329 375.291 269.097 cv
374.763 269.865 374.019 270.249 373.047 270.249 cv
372.063 270.249 371.307 269.865 370.791 269.097 cv
370.275 268.329 370.023 267.201 370.023 265.725 cv
370.023 264.261 370.275 263.133 370.791 262.353 cv
371.307 261.585 372.063 261.189 373.047 261.189 cv
f
397.068 256.968 mo
397.068 252.968 li
f
397.068 256.968 mo
397.068 252.968 li
@
397.068 29.88 mo
397.068 33.88 li
f
397.068 29.88 mo
397.068 33.88 li
@
394.659 262.377 mo
391.671 267.045 li
394.659 267.045 li
394.659 262.377 li
394.347 261.345 mo
395.835 261.345 li
395.835 267.045 li
397.083 267.045 li
397.083 268.029 li
395.835 268.029 li
395.835 270.093 li
394.659 270.093 li
394.659 268.029 li
390.711 268.029 li
390.711 266.889 li
394.347 261.345 li
f
401.571 262.125 mo
400.959 262.125 400.503 262.425 400.191 263.025 cv
399.879 263.625 399.735 264.525 399.735 265.725 cv
399.735 266.925 399.879 267.825 400.191 268.425 cv
400.503 269.025 400.959 269.325 401.571 269.325 cv
402.183 269.325 402.639 269.025 402.951 268.425 cv
403.251 267.825 403.407 266.925 403.407 265.725 cv
403.407 264.525 403.251 263.625 402.951 263.025 cv
402.639 262.425 402.183 262.125 401.571 262.125 cv
401.571 261.189 mo
402.543 261.189 403.287 261.585 403.815 262.353 cv
404.331 263.133 404.595 264.261 404.595 265.725 cv
404.595 267.201 404.331 268.329 403.815 269.097 cv
403.287 269.865 402.543 270.249 401.571 270.249 cv
400.587 270.249 399.831 269.865 399.315 269.097 cv
398.799 268.329 398.547 267.201 398.547 265.725 cv
398.547 264.261 398.799 263.133 399.315 262.353 cv
399.831 261.585 400.587 261.189 401.571 261.189 cv
f
425.756 256.968 mo
425.756 252.968 li
f
425.756 256.968 mo
425.756 252.968 li
@
425.756 29.88 mo
425.756 33.88 li
f
425.756 29.88 mo
425.756 33.88 li
@
420.271 261.345 mo
424.915 261.345 li
424.915 262.341 li
421.351 262.341 li
421.351 264.489 li
421.519 264.429 421.699 264.381 421.867 264.357 cv
422.035 264.333 422.215 264.309 422.383 264.309 cv
423.355 264.309 424.123 264.585 424.699 265.113 cv
425.275 265.653 425.563 266.373 425.563 267.285 cv
425.563 268.233 425.263 268.965 424.675 269.481 cv
424.087 269.997 423.259 270.249 422.203 270.249 cv
421.831 270.249 421.459 270.213 421.075 270.165 cv
420.691 270.105 420.307 270.021 419.899 269.889 cv
419.899 268.701 li
420.247 268.893 420.607 269.037 420.991 269.133 cv
421.363 269.229 421.759 269.265 422.179 269.265 cv
422.851 269.265 423.391 269.097 423.787 268.737 cv
424.171 268.377 424.375 267.897 424.375 267.285 cv
424.375 266.685 424.171 266.205 423.787 265.845 cv
423.391 265.485 422.851 265.305 422.179 265.305 cv
421.867 265.305 421.543 265.341 421.231 265.413 cv
420.919 265.485 420.595 265.593 420.271 265.737 cv
420.271 261.345 li
f
430.423 262.125 mo
429.811 262.125 429.355 262.425 429.043 263.025 cv
428.731 263.625 428.587 264.525 428.587 265.725 cv
428.587 266.925 428.731 267.825 429.043 268.425 cv
429.355 269.025 429.811 269.325 430.423 269.325 cv
431.035 269.325 431.491 269.025 431.803 268.425 cv
432.103 267.825 432.259 266.925 432.259 265.725 cv
432.259 264.525 432.103 263.625 431.803 263.025 cv
431.491 262.425 431.035 262.125 430.423 262.125 cv
430.423 261.189 mo
431.395 261.189 432.139 261.585 432.667 262.353 cv
433.183 263.133 433.447 264.261 433.447 265.725 cv
433.447 267.201 433.183 268.329 432.667 269.097 cv
432.139 269.865 431.395 270.249 430.423 270.249 cv
429.439 270.249 428.683 269.865 428.167 269.097 cv
427.651 268.329 427.399 267.201 427.399 265.725 cv
427.399 264.261 427.651 263.133 428.167 262.353 cv
428.683 261.585 429.439 261.189 430.423 261.189 cv
f
454.444 256.968 mo
454.444 252.968 li
f
454.444 256.968 mo
454.444 252.968 li
@
454.444 29.88 mo
454.444 33.88 li
f
454.444 29.88 mo
454.444 33.88 li
@
451.584 265.245 mo
451.056 265.245 450.636 265.437 450.324 265.797 cv
450.012 266.157 449.856 266.661 449.856 267.285 cv
449.856 267.921 450.012 268.425 450.324 268.785 cv
450.636 269.145 451.056 269.325 451.584 269.325 cv
452.112 269.325 452.532 269.145 452.844 268.785 cv
453.156 268.425 453.312 267.921 453.312 267.285 cv
453.312 266.661 453.156 266.157 452.844 265.797 cv
452.532 265.437 452.112 265.245 451.584 265.245 cv
453.936 261.537 mo
453.936 262.617 li
453.636 262.473 453.336 262.365 453.036 262.293 cv
452.724 262.221 452.424 262.185 452.136 262.185 cv
451.344 262.185 450.744 262.449 450.336 262.977 cv
449.928 263.505 449.688 264.309 449.64 265.365 cv
449.868 265.029 450.156 264.765 450.504 264.585 cv
450.852 264.405 451.236 264.309 451.656 264.309 cv
452.532 264.309 453.228 264.585 453.732 265.113 cv
454.236 265.641 454.5 266.373 454.5 267.285 cv
454.5 268.185 454.224 268.905 453.696 269.445 cv
453.168 269.985 452.46 270.249 451.584 270.249 cv
450.576 270.249 449.796 269.865 449.268 269.097 cv
448.728 268.329 448.464 267.201 448.464 265.725 cv
448.464 264.345 448.788 263.241 449.448 262.425 cv
450.096 261.609 450.984 261.189 452.088 261.189 cv
452.376 261.189 452.676 261.225 452.988 261.273 cv
453.288 261.333 453.6 261.417 453.936 261.537 cv
f
459.072 262.125 mo
458.46 262.125 458.004 262.425 457.692 263.025 cv
457.38 263.625 457.236 264.525 457.236 265.725 cv
457.236 266.925 457.38 267.825 457.692 268.425 cv
458.004 269.025 458.46 269.325 459.072 269.325 cv
459.684 269.325 460.14 269.025 460.452 268.425 cv
460.752 267.825 460.908 266.925 460.908 265.725 cv
460.908 264.525 460.752 263.625 460.452 263.025 cv
460.14 262.425 459.684 262.125 459.072 262.125 cv
459.072 261.189 mo
460.044 261.189 460.788 261.585 461.316 262.353 cv
461.832 263.133 462.096 264.261 462.096 265.725 cv
462.096 267.201 461.832 268.329 461.316 269.097 cv
460.788 269.865 460.044 270.249 459.072 270.249 cv
458.088 270.249 457.332 269.865 456.816 269.097 cv
456.3 268.329 456.048 267.201 456.048 265.725 cv
456.048 264.261 456.3 263.133 456.816 262.353 cv
457.332 261.585 458.088 261.189 459.072 261.189 cv
f
483.132 256.968 mo
483.132 252.968 li
f
483.132 256.968 mo
483.132 252.968 li
@
483.132 29.88 mo
483.132 33.88 li
f
483.132 29.88 mo
483.132 33.88 li
@
477.366 261.345 mo
482.994 261.345 li
482.994 261.849 li
479.814 270.093 li
478.578 270.093 li
481.566 262.341 li
477.366 262.341 li
477.366 261.345 li
f
487.83 262.125 mo
487.218 262.125 486.762 262.425 486.45 263.025 cv
486.138 263.625 485.994 264.525 485.994 265.725 cv
485.994 266.925 486.138 267.825 486.45 268.425 cv
486.762 269.025 487.218 269.325 487.83 269.325 cv
488.442 269.325 488.898 269.025 489.21 268.425 cv
489.51 267.825 489.666 266.925 489.666 265.725 cv
489.666 264.525 489.51 263.625 489.21 263.025 cv
488.898 262.425 488.442 262.125 487.83 262.125 cv
487.83 261.189 mo
488.802 261.189 489.546 261.585 490.074 262.353 cv
490.59 263.133 490.854 264.261 490.854 265.725 cv
490.854 267.201 490.59 268.329 490.074 269.097 cv
489.546 269.865 488.802 270.249 487.83 270.249 cv
486.846 270.249 486.09 269.865 485.574 269.097 cv
485.058 268.329 484.806 267.201 484.806 265.725 cv
484.806 264.261 485.058 263.133 485.574 262.353 cv
486.09 261.585 486.846 261.189 487.83 261.189 cv
f
511.82 256.968 mo
511.82 252.968 li
f
511.82 256.968 mo
511.82 252.968 li
@
511.82 29.88 mo
511.82 33.88 li
f
511.82 29.88 mo
511.82 33.88 li
@
508.8 265.941 mo
508.236 265.941 507.792 266.097 507.468 266.397 cv
507.144 266.697 506.988 267.105 506.988 267.633 cv
506.988 268.161 507.144 268.581 507.468 268.881 cv
507.792 269.181 508.236 269.325 508.8 269.325 cv
509.352 269.325 509.796 269.181 510.12 268.869 cv
510.444 268.569 510.612 268.161 510.612 267.633 cv
510.612 267.105 510.444 266.697 510.132 266.397 cv
509.808 266.097 509.364 265.941 508.8 265.941 cv
507.612 265.437 mo
507.108 265.317 506.712 265.077 506.424 264.729 cv
506.136 264.381 506.004 263.961 506.004 263.457 cv
506.004 262.761 506.244 262.209 506.748 261.801 cv
507.24 261.393 507.924 261.189 508.8 261.189 cv
509.664 261.189 510.348 261.393 510.852 261.801 cv
511.344 262.209 511.596 262.761 511.596 263.457 cv
511.596 263.961 511.452 264.381 511.164 264.729 cv
510.876 265.077 510.492 265.317 509.988 265.437 cv
510.552 265.569 510.996 265.833 511.32 266.217 cv
511.632 266.601 511.8 267.081 511.8 267.633 cv
511.8 268.485 511.536 269.133 511.02 269.577 cv
510.492 270.033 509.76 270.249 508.8 270.249 cv
507.828 270.249 507.084 270.033 506.568 269.577 cv
506.052 269.133 505.8 268.485 505.8 267.633 cv
505.8 267.081 505.956 266.601 506.28 266.217 cv
506.592 265.833 507.036 265.569 507.612 265.437 cv
507.18 263.565 mo
507.18 264.021 507.312 264.381 507.6 264.633 cv
507.888 264.885 508.284 265.005 508.8 265.005 cv
509.304 265.005 509.7 264.885 509.988 264.633 cv
510.276 264.381 510.42 264.021 510.42 263.565 cv
510.42 263.109 510.276 262.761 509.988 262.509 cv
509.7 262.257 509.304 262.125 508.8 262.125 cv
508.284 262.125 507.888 262.257 507.6 262.509 cv
507.312 262.761 507.18 263.109 507.18 263.565 cv
f
516.432 262.125 mo
515.82 262.125 515.364 262.425 515.052 263.025 cv
514.74 263.625 514.596 264.525 514.596 265.725 cv
514.596 266.925 514.74 267.825 515.052 268.425 cv
515.364 269.025 515.82 269.325 516.432 269.325 cv
517.044 269.325 517.5 269.025 517.812 268.425 cv
518.112 267.825 518.268 266.925 518.268 265.725 cv
518.268 264.525 518.112 263.625 517.812 263.025 cv
517.5 262.425 517.044 262.125 516.432 262.125 cv
516.432 261.189 mo
517.404 261.189 518.148 261.585 518.676 262.353 cv
519.192 263.133 519.456 264.261 519.456 265.725 cv
519.456 267.201 519.192 268.329 518.676 269.097 cv
518.148 269.865 517.404 270.249 516.432 270.249 cv
515.448 270.249 514.692 269.865 514.176 269.097 cv
513.66 268.329 513.408 267.201 513.408 265.725 cv
513.408 264.261 513.66 263.133 514.176 262.353 cv
514.692 261.585 515.448 261.189 516.432 261.189 cv
f
540.508 256.968 mo
540.508 252.968 li
f
540.508 256.968 mo
540.508 252.968 li
@
540.508 29.88 mo
540.508 33.88 li
f
540.508 29.88 mo
540.508 33.88 li
@
534.961 269.913 mo
534.961 268.833 li
535.249 268.977 535.549 269.085 535.861 269.157 cv
536.161 269.229 536.461 269.265 536.761 269.265 cv
537.529 269.265 538.129 269.013 538.537 268.485 cv
538.945 267.957 539.185 267.165 539.257 266.085 cv
539.017 266.421 538.729 266.685 538.393 266.865 cv
538.045 267.045 537.661 267.129 537.241 267.129 cv
536.353 267.129 535.657 266.865 535.153 266.337 cv
534.649 265.809 534.397 265.089 534.397 264.165 cv
534.397 263.277 534.661 262.557 535.189 262.005 cv
535.717 261.465 536.425 261.189 537.313 261.189 cv
538.321 261.189 539.101 261.585 539.629 262.353 cv
540.157 263.133 540.433 264.261 540.433 265.725 cv
540.433 267.117 540.097 268.209 539.449 269.025 cv
538.789 269.841 537.913 270.249 536.809 270.249 cv
536.509 270.249 536.209 270.213 535.909 270.165 cv
535.597 270.117 535.285 270.033 534.961 269.913 cv
537.313 266.205 mo
537.841 266.205 538.261 266.025 538.573 265.665 cv
538.885 265.305 539.041 264.801 539.041 264.165 cv
539.041 263.541 538.885 263.037 538.573 262.677 cv
538.261 262.317 537.841 262.125 537.313 262.125 cv
536.785 262.125 536.365 262.317 536.053 262.677 cv
535.741 263.037 535.585 263.541 535.585 264.165 cv
535.585 264.801 535.741 265.305 536.053 265.665 cv
536.365 266.025 536.785 266.205 537.313 266.205 cv
f
545.089 262.125 mo
544.477 262.125 544.021 262.425 543.709 263.025 cv
543.397 263.625 543.253 264.525 543.253 265.725 cv
543.253 266.925 543.397 267.825 543.709 268.425 cv
544.021 269.025 544.477 269.325 545.089 269.325 cv
545.701 269.325 546.157 269.025 546.469 268.425 cv
546.769 267.825 546.925 266.925 546.925 265.725 cv
546.925 264.525 546.769 263.625 546.469 263.025 cv
546.157 262.425 545.701 262.125 545.089 262.125 cv
545.089 261.189 mo
546.061 261.189 546.805 261.585 547.333 262.353 cv
547.849 263.133 548.113 264.261 548.113 265.725 cv
548.113 267.201 547.849 268.329 547.333 269.097 cv
546.805 269.865 546.061 270.249 545.089 270.249 cv
544.105 270.249 543.349 269.865 542.833 269.097 cv
542.317 268.329 542.065 267.201 542.065 265.725 cv
542.065 264.261 542.317 263.133 542.833 262.353 cv
543.349 261.585 544.105 261.189 545.089 261.189 cv
f
221.224 289.557 mo
220.768 289.197 220.384 288.801 220.072 288.345 cv
219.748 287.889 219.484 287.397 219.28 286.893 cv
219.076 286.389 218.92 285.849 218.824 285.285 cv
218.716 284.733 218.668 284.169 218.668 283.593 cv
218.668 283.017 218.716 282.453 218.824 281.889 cv
218.92 281.337 219.076 280.797 219.292 280.269 cv
219.496 279.753 219.76 279.261 220.084 278.805 cv
220.408 278.349 220.792 277.953 221.224 277.617 cv
221.284 277.593 li
221.392 277.593 li
221.452 277.629 li
221.488 277.701 li
221.464 277.773 li
221.068 278.157 220.744 278.577 220.48 279.009 cv
220.216 279.441 220.012 279.909 219.856 280.401 cv
219.7 280.905 219.592 281.409 219.52 281.937 cv
219.448 282.465 219.412 283.017 219.412 283.593 cv
219.412 286.137 220.084 288.057 221.452 289.377 cv
221.488 289.473 li
221.452 289.545 li
221.392 289.581 li
221.284 289.581 li
221.224 289.557 li
f
223.326 288.561 mo
223.47 288.669 223.65 288.729 223.866 288.729 cv
224.154 288.729 224.382 288.405 224.562 287.781 cv
224.634 287.469 224.838 286.485 225.174 284.781 cv
225.726 281.841 li
224.694 281.841 li
224.61 281.841 224.574 281.793 224.574 281.685 cv
224.598 281.517 224.658 281.421 224.73 281.421 cv
225.798 281.421 li
225.942 280.641 li
225.99 280.401 226.026 280.197 226.074 280.017 cv
226.11 279.849 226.146 279.681 226.194 279.537 cv
226.242 279.393 226.302 279.225 226.398 279.033 cv
226.53 278.769 226.71 278.553 226.95 278.385 cv
227.178 278.217 227.43 278.133 227.706 278.133 cv
227.874 278.133 228.042 278.169 228.21 278.229 cv
228.378 278.301 228.51 278.397 228.618 278.517 cv
228.726 278.649 228.786 278.805 228.786 278.973 cv
228.786 279.189 228.714 279.369 228.582 279.513 cv
228.438 279.657 228.282 279.729 228.09 279.729 cv
227.958 279.729 227.85 279.693 227.754 279.609 cv
227.658 279.537 227.622 279.429 227.622 279.297 cv
227.622 279.129 227.682 278.973 227.802 278.841 cv
227.922 278.709 228.066 278.637 228.246 278.613 cv
228.09 278.505 227.91 278.445 227.694 278.445 cv
227.574 278.445 227.454 278.505 227.346 278.613 cv
227.238 278.733 227.166 278.853 227.142 278.973 cv
227.094 279.189 226.974 279.741 226.806 280.629 cv
226.662 281.421 li
227.898 281.421 li
227.97 281.421 228.018 281.481 228.018 281.577 cv
227.982 281.685 li
227.934 281.805 li
227.862 281.841 li
226.578 281.841 li
226.026 284.769 li
225.954 285.201 225.87 285.633 225.774 286.065 cv
225.678 286.497 225.558 286.941 225.39 287.409 cv
225.222 287.865 225.018 288.261 224.754 288.573 cv
224.49 288.885 224.19 289.041 223.842 289.041 cv
223.566 289.041 223.326 288.957 223.11 288.813 cv
222.894 288.657 222.798 288.453 222.798 288.201 cv
222.798 287.985 222.858 287.805 222.99 287.661 cv
223.122 287.517 223.29 287.445 223.494 287.445 cv
223.614 287.445 223.722 287.481 223.818 287.565 cv
223.914 287.637 223.962 287.745 223.962 287.877 cv
223.962 288.045 223.89 288.201 223.77 288.345 cv
223.638 288.489 223.494 288.561 223.326 288.561 cv
f
228.807 289.581 mo
228.699 289.473 li
228.723 289.401 li
230.091 288.057 230.775 286.137 230.775 283.593 cv
230.775 281.049 230.091 279.117 228.747 277.797 cv
228.699 277.701 li
228.735 277.629 li
228.807 277.593 li
228.915 277.593 li
228.975 277.617 li
229.551 278.073 230.031 278.625 230.415 279.273 cv
230.799 279.921 231.075 280.617 231.255 281.349 cv
231.423 282.081 231.519 282.825 231.519 283.593 cv
231.519 284.169 231.471 284.721 231.375 285.273 cv
231.279 285.825 231.123 286.353 230.919 286.881 cv
230.703 287.409 230.439 287.889 230.127 288.345 cv
229.803 288.801 229.419 289.197 228.975 289.557 cv
228.915 289.581 li
228.807 289.581 li
f
236.398 286.437 mo
236.422 286.329 li
236.47 286.221 li
236.566 286.173 li
237.25 286.173 237.706 286.161 237.934 286.113 cv
238.15 286.065 238.27 285.945 238.318 285.765 cv
239.962 279.177 li
239.986 279.081 240.01 278.997 240.01 278.913 cv
240.01 278.853 239.866 278.817 239.59 278.817 cv
238.894 278.817 li
238.354 278.817 237.934 278.901 237.646 279.069 cv
237.358 279.237 237.142 279.453 237.01 279.717 cv
236.866 279.981 236.698 280.425 236.482 281.037 cv
236.362 281.145 li
236.254 281.145 li
236.17 281.145 236.134 281.097 236.134 280.989 cv
236.986 278.505 li
237.106 278.397 li
244.198 278.397 li
244.27 278.397 244.318 278.457 244.318 278.553 cv
243.922 281.037 li
243.874 281.109 li
243.802 281.145 li
243.694 281.145 li
243.61 281.145 243.574 281.097 243.574 280.989 cv
243.658 280.425 243.706 280.029 243.706 279.789 cv
243.706 279.513 243.646 279.297 243.526 279.153 cv
243.406 279.009 243.25 278.925 243.07 278.877 cv
242.878 278.841 242.638 278.817 242.338 278.817 cv
241.63 278.817 li
241.414 278.817 241.27 278.841 241.198 278.877 cv
241.126 278.925 241.054 279.033 241.006 279.225 cv
239.362 285.813 li
239.35 285.861 li
239.338 285.921 li
239.338 286.029 239.398 286.089 239.518 286.113 cv
239.722 286.161 240.166 286.173 240.85 286.173 cv
240.922 286.173 240.97 286.233 240.97 286.329 cv
240.934 286.449 240.91 286.521 240.898 286.545 cv
240.766 286.593 li
236.518 286.593 li
236.434 286.593 236.398 286.545 236.398 286.437 cv
f
243.49 286.377 mo
243.502 286.269 li
245.242 279.333 li
245.266 279.201 245.29 279.093 245.302 279.009 cv
245.302 278.889 245.038 278.817 244.522 278.817 cv
244.438 278.817 244.402 278.769 244.402 278.661 cv
244.426 278.553 li
244.474 278.445 li
244.57 278.397 li
246.19 278.265 li
246.226 278.265 li
246.262 278.301 li
246.31 278.325 li
246.334 278.421 li
245.398 282.165 li
245.878 281.589 246.466 281.289 247.15 281.289 cv
247.426 281.289 247.666 281.349 247.87 281.445 cv
248.074 281.541 248.23 281.697 248.35 281.889 cv
248.47 282.081 248.53 282.321 248.53 282.585 cv
248.53 282.921 248.458 283.317 248.314 283.773 cv
248.17 284.241 247.978 284.757 247.762 285.333 cv
247.642 285.597 247.594 285.837 247.594 286.053 cv
247.594 286.293 247.678 286.413 247.87 286.413 cv
248.182 286.413 248.434 286.245 248.65 285.909 cv
248.854 285.573 248.998 285.213 249.094 284.829 cv
249.19 284.757 li
249.334 284.757 li
249.406 284.793 li
249.442 284.865 li
249.43 284.901 li
249.358 285.189 249.25 285.477 249.106 285.753 cv
248.962 286.041 248.794 286.269 248.59 286.449 cv
248.374 286.617 248.134 286.713 247.846 286.713 cv
247.558 286.713 247.318 286.617 247.126 286.437 cv
246.922 286.245 246.826 286.017 246.826 285.729 cv
246.826 285.585 246.85 285.429 246.922 285.261 cv
247.138 284.661 247.33 284.133 247.486 283.653 cv
247.63 283.185 247.714 282.765 247.714 282.405 cv
247.714 282.177 247.666 281.985 247.57 281.829 cv
247.474 281.685 247.33 281.601 247.126 281.601 cv
246.694 281.601 246.31 281.733 245.998 281.997 cv
245.674 282.261 245.398 282.609 245.17 283.041 cv
244.354 286.317 li
244.318 286.437 244.258 286.533 244.174 286.605 cv
244.078 286.677 243.982 286.713 243.862 286.713 cv
243.754 286.713 243.67 286.677 243.598 286.617 cv
243.526 286.557 243.49 286.473 243.49 286.377 cv
f
252.18 286.713 mo
251.796 286.713 251.46 286.617 251.172 286.425 cv
250.884 286.233 250.668 285.957 250.524 285.621 cv
250.368 285.285 250.296 284.937 250.296 284.553 cv
250.296 283.989 250.44 283.449 250.728 282.945 cv
251.016 282.441 251.4 282.045 251.892 281.745 cv
252.384 281.445 252.912 281.289 253.476 281.289 cv
253.812 281.289 254.112 281.385 254.376 281.565 cv
254.628 281.745 254.76 281.997 254.76 282.321 cv
254.76 282.789 254.568 283.137 254.208 283.353 cv
253.836 283.581 253.416 283.725 252.96 283.773 cv
252.504 283.821 251.988 283.845 251.436 283.845 cv
251.4 283.845 li
251.268 284.325 251.208 284.733 251.208 285.069 cv
251.208 285.429 251.28 285.741 251.448 286.005 cv
251.616 286.281 251.868 286.413 252.204 286.413 cv
252.684 286.413 253.14 286.305 253.584 286.089 cv
254.016 285.873 254.376 285.561 254.652 285.177 cv
254.748 285.141 li
254.868 285.213 li
254.928 285.333 li
254.904 285.405 li
254.616 285.813 254.22 286.137 253.728 286.365 cv
253.224 286.593 252.708 286.713 252.18 286.713 cv
251.472 283.533 mo
251.928 283.533 252.36 283.521 252.756 283.473 cv
253.152 283.425 253.512 283.317 253.836 283.149 cv
254.148 282.981 254.316 282.705 254.316 282.333 cv
254.316 282.189 254.268 282.057 254.184 281.949 cv
254.1 281.841 253.992 281.757 253.872 281.697 cv
253.74 281.637 253.608 281.601 253.464 281.601 cv
253.128 281.601 252.816 281.697 252.552 281.877 cv
252.276 282.069 252.048 282.309 251.88 282.597 cv
251.7 282.897 251.568 283.209 251.472 283.533 cv
f
259.431 286.389 mo
259.443 286.281 li
260.343 282.705 li
260.391 282.489 260.427 282.285 260.427 282.117 cv
260.427 281.781 260.307 281.601 260.079 281.601 cv
259.827 281.601 259.635 281.757 259.515 282.057 cv
259.395 282.357 259.275 282.729 259.167 283.185 cv
259.131 283.245 li
259.071 283.257 li
258.927 283.257 li
258.855 283.221 li
258.831 283.137 li
258.915 282.789 258.999 282.489 259.083 282.249 cv
259.155 282.009 259.287 281.793 259.455 281.589 cv
259.623 281.397 259.827 281.289 260.091 281.289 cv
260.379 281.289 260.643 281.385 260.883 281.577 cv
261.111 281.769 261.231 282.009 261.231 282.297 cv
261.471 281.985 261.747 281.745 262.071 281.565 cv
262.383 281.385 262.731 281.289 263.091 281.289 cv
263.367 281.289 263.607 281.349 263.823 281.445 cv
264.027 281.541 264.183 281.697 264.303 281.889 cv
264.423 282.081 264.483 282.321 264.483 282.585 cv
264.483 282.921 264.399 283.317 264.255 283.773 cv
264.111 284.241 263.931 284.757 263.715 285.333 cv
263.595 285.597 263.547 285.837 263.547 286.053 cv
263.547 286.293 263.631 286.413 263.823 286.413 cv
264.135 286.413 264.387 286.245 264.603 285.909 cv
264.807 285.573 264.951 285.213 265.047 284.829 cv
265.143 284.757 li
265.287 284.757 li
265.359 284.793 li
265.395 284.865 li
265.383 284.901 li
265.275 285.357 265.083 285.777 264.819 286.149 cv
264.543 286.533 264.207 286.713 263.799 286.713 cv
263.511 286.713 263.271 286.617 263.079 286.437 cv
262.875 286.245 262.779 286.017 262.779 285.729 cv
262.779 285.585 262.803 285.429 262.875 285.261 cv
262.971 284.997 263.079 284.685 263.211 284.325 cv
263.343 283.965 263.451 283.629 263.535 283.293 cv
263.619 282.957 263.667 282.669 263.667 282.405 cv
263.667 282.189 263.619 281.997 263.523 281.841 cv
263.427 281.685 263.283 281.601 263.067 281.601 cv
262.767 281.601 262.491 281.673 262.251 281.793 cv
262.011 281.925 261.795 282.093 261.615 282.309 cv
261.423 282.525 261.255 282.777 261.111 283.065 cv
260.295 286.329 li
260.271 286.449 260.211 286.533 260.115 286.605 cv
260.019 286.677 259.911 286.713 259.791 286.713 cv
259.695 286.713 259.611 286.677 259.539 286.629 cv
259.467 286.581 259.431 286.497 259.431 286.389 cv
f
266.98 285.285 mo
266.98 285.021 267.016 284.757 267.088 284.481 cv
267.16 284.217 267.256 283.905 267.376 283.569 cv
267.496 283.233 267.616 282.933 267.712 282.681 cv
267.808 282.393 267.868 282.153 267.868 281.961 cv
267.868 281.721 267.772 281.601 267.604 281.601 cv
267.292 281.601 267.028 281.769 266.824 282.093 cv
266.608 282.429 266.464 282.789 266.368 283.185 cv
266.272 283.257 li
266.128 283.257 li
266.032 283.149 li
266.032 283.113 li
266.152 282.633 266.356 282.213 266.62 281.841 cv
266.884 281.481 267.22 281.289 267.628 281.289 cv
267.916 281.289 268.156 281.385 268.348 281.577 cv
268.54 281.769 268.648 281.997 268.648 282.285 cv
268.648 282.441 268.612 282.597 268.552 282.753 cv
268.504 282.849 268.42 283.065 268.3 283.389 cv
268.18 283.725 268.084 283.989 268.024 284.205 cv
267.952 284.421 267.904 284.637 267.856 284.841 cv
267.808 285.057 267.796 285.261 267.796 285.465 cv
267.796 285.729 267.844 285.957 267.964 286.137 cv
268.072 286.329 268.252 286.413 268.516 286.413 cv
269.02 286.413 269.476 286.101 269.86 285.465 cv
269.884 285.381 li
269.896 285.285 li
270.76 281.805 li
270.784 281.709 270.844 281.613 270.94 281.541 cv
271.036 281.469 271.144 281.421 271.264 281.421 cv
271.36 281.421 271.444 281.457 271.516 281.517 cv
271.588 281.577 271.624 281.661 271.624 281.757 cv
271.612 281.853 li
270.748 285.309 li
270.688 285.549 270.664 285.753 270.664 285.897 cv
270.664 286.245 270.772 286.413 271.012 286.413 cv
271.264 286.413 271.456 286.257 271.588 285.933 cv
271.708 285.621 271.816 285.249 271.912 284.829 cv
272.008 284.757 li
272.152 284.757 li
272.224 284.805 li
272.26 284.877 li
272.164 285.225 272.08 285.525 272.008 285.765 cv
271.924 286.005 271.792 286.233 271.624 286.425 cv
271.456 286.617 271.24 286.713 270.988 286.713 cv
270.724 286.713 270.496 286.641 270.304 286.521 cv
270.1 286.389 269.968 286.197 269.896 285.957 cv
269.704 286.197 269.5 286.377 269.26 286.509 cv
269.02 286.641 268.756 286.713 268.492 286.713 cv
268.024 286.713 267.652 286.593 267.388 286.341 cv
267.112 286.101 266.98 285.741 266.98 285.285 cv
f
273.493 286.389 mo
273.505 286.281 li
274.405 282.705 li
274.453 282.489 274.489 282.285 274.489 282.117 cv
274.489 281.781 274.369 281.601 274.141 281.601 cv
273.889 281.601 273.697 281.757 273.577 282.057 cv
273.457 282.357 273.337 282.729 273.229 283.185 cv
273.193 283.245 li
273.133 283.257 li
272.989 283.257 li
272.917 283.221 li
272.893 283.137 li
272.977 282.789 273.061 282.489 273.145 282.249 cv
273.217 282.009 273.349 281.793 273.517 281.589 cv
273.685 281.397 273.889 281.289 274.153 281.289 cv
274.441 281.289 274.705 281.385 274.945 281.577 cv
275.173 281.769 275.293 282.009 275.293 282.297 cv
275.533 281.985 275.809 281.745 276.133 281.565 cv
276.445 281.385 276.793 281.289 277.153 281.289 cv
277.525 281.289 277.849 281.385 278.125 281.577 cv
278.401 281.769 278.545 282.045 278.545 282.405 cv
278.785 282.057 279.073 281.781 279.409 281.589 cv
279.733 281.397 280.093 281.289 280.489 281.289 cv
280.897 281.289 281.233 281.409 281.485 281.625 cv
281.737 281.853 281.869 282.177 281.869 282.585 cv
281.869 282.921 281.785 283.317 281.641 283.773 cv
281.497 284.241 281.317 284.757 281.101 285.333 cv
280.981 285.621 280.933 285.861 280.933 286.053 cv
280.933 286.293 281.017 286.413 281.209 286.413 cv
281.521 286.413 281.773 286.245 281.989 285.909 cv
282.193 285.573 282.337 285.213 282.433 284.829 cv
282.529 284.757 li
282.673 284.757 li
282.745 284.793 li
282.781 284.865 li
282.769 284.901 li
282.649 285.357 282.457 285.777 282.193 286.149 cv
281.929 286.533 281.593 286.713 281.185 286.713 cv
280.897 286.713 280.657 286.617 280.465 286.437 cv
280.261 286.245 280.165 286.017 280.165 285.729 cv
280.165 285.597 280.189 285.441 280.261 285.261 cv
280.477 284.661 280.669 284.133 280.825 283.653 cv
280.969 283.185 281.053 282.765 281.053 282.405 cv
281.053 282.189 281.005 281.997 280.921 281.841 cv
280.825 281.685 280.681 281.601 280.465 281.601 cv
280.033 281.601 279.649 281.745 279.325 282.009 cv
279.001 282.273 278.725 282.633 278.497 283.065 cv
278.461 283.245 li
277.693 286.329 li
277.657 286.449 277.597 286.533 277.501 286.605 cv
277.405 286.677 277.297 286.713 277.189 286.713 cv
277.093 286.713 277.009 286.677 276.937 286.629 cv
276.865 286.581 276.829 286.497 276.829 286.389 cv
276.841 286.281 li
277.609 283.221 li
277.681 282.897 277.729 282.621 277.729 282.405 cv
277.729 282.189 277.681 281.997 277.585 281.841 cv
277.489 281.685 277.345 281.601 277.129 281.601 cv
276.829 281.601 276.553 281.673 276.313 281.793 cv
276.073 281.925 275.857 282.093 275.677 282.309 cv
275.485 282.525 275.317 282.777 275.173 283.065 cv
274.357 286.329 li
274.333 286.449 274.273 286.533 274.177 286.605 cv
274.081 286.677 273.973 286.713 273.853 286.713 cv
273.757 286.713 273.673 286.677 273.601 286.629 cv
273.529 286.581 273.493 286.497 273.493 286.389 cv
f
285.18 286.713 mo
284.688 286.713 284.304 286.533 284.04 286.161 cv
283.776 285.789 283.644 285.345 283.644 284.829 cv
283.644 284.757 283.656 284.613 283.692 284.397 cv
283.728 284.181 283.752 284.049 283.752 283.989 cv
284.916 279.333 li
284.94 279.201 284.964 279.093 284.976 279.009 cv
284.976 278.889 284.712 278.817 284.196 278.817 cv
284.112 278.817 284.076 278.769 284.076 278.661 cv
284.1 278.553 li
284.148 278.445 li
284.244 278.397 li
285.864 278.265 li
285.96 278.265 286.008 278.325 286.008 278.421 cv
285.12 281.961 li
285.576 281.517 286.032 281.289 286.488 281.289 cv
286.824 281.289 287.124 281.385 287.364 281.565 cv
287.604 281.745 287.796 281.985 287.916 282.273 cv
288.036 282.561 288.096 282.873 288.096 283.209 cv
288.096 283.593 288.012 284.001 287.868 284.409 cv
287.712 284.817 287.508 285.201 287.244 285.561 cv
286.98 285.921 286.668 286.197 286.308 286.401 cv
285.948 286.605 285.576 286.713 285.18 286.713 cv
285.204 286.413 mo
285.468 286.413 285.732 286.305 285.972 286.077 cv
286.212 285.849 286.404 285.585 286.548 285.297 cv
286.704 284.985 286.848 284.553 286.992 284.001 cv
287.136 283.449 287.208 283.017 287.208 282.681 cv
287.208 282.393 287.148 282.141 287.028 281.925 cv
286.908 281.709 286.716 281.601 286.464 281.601 cv
286.176 281.601 285.9 281.709 285.636 281.925 cv
285.372 282.141 285.132 282.393 284.94 282.681 cv
284.604 284.037 li
284.472 284.541 284.4 284.949 284.4 285.249 cv
284.4 285.561 284.46 285.825 284.592 286.065 cv
284.724 286.305 284.928 286.413 285.204 286.413 cv
f
290.667 286.713 mo
290.283 286.713 289.947 286.617 289.659 286.425 cv
289.371 286.233 289.155 285.957 289.011 285.621 cv
288.855 285.285 288.783 284.937 288.783 284.553 cv
288.783 283.989 288.927 283.449 289.215 282.945 cv
289.503 282.441 289.887 282.045 290.379 281.745 cv
290.871 281.445 291.399 281.289 291.963 281.289 cv
292.299 281.289 292.599 281.385 292.863 281.565 cv
293.115 281.745 293.247 281.997 293.247 282.321 cv
293.247 282.789 293.055 283.137 292.695 283.353 cv
292.323 283.581 291.903 283.725 291.447 283.773 cv
290.991 283.821 290.475 283.845 289.923 283.845 cv
289.887 283.845 li
289.755 284.325 289.695 284.733 289.695 285.069 cv
289.695 285.429 289.767 285.741 289.935 286.005 cv
290.103 286.281 290.355 286.413 290.691 286.413 cv
291.171 286.413 291.627 286.305 292.071 286.089 cv
292.503 285.873 292.863 285.561 293.139 285.177 cv
293.235 285.141 li
293.355 285.213 li
293.415 285.333 li
293.391 285.405 li
293.103 285.813 292.707 286.137 292.215 286.365 cv
291.711 286.593 291.195 286.713 290.667 286.713 cv
289.959 283.533 mo
290.415 283.533 290.847 283.521 291.243 283.473 cv
291.639 283.425 291.999 283.317 292.323 283.149 cv
292.635 282.981 292.803 282.705 292.803 282.333 cv
292.803 282.189 292.755 282.057 292.671 281.949 cv
292.587 281.841 292.479 281.757 292.359 281.697 cv
292.227 281.637 292.095 281.601 291.951 281.601 cv
291.615 281.601 291.303 281.697 291.039 281.877 cv
290.763 282.069 290.535 282.309 290.367 282.597 cv
290.187 282.897 290.055 283.209 289.959 283.533 cv
f
294.757 286.389 mo
294.769 286.281 li
295.669 282.705 li
295.717 282.489 295.753 282.285 295.753 282.117 cv
295.753 281.781 295.633 281.601 295.405 281.601 cv
295.153 281.601 294.961 281.757 294.841 282.057 cv
294.721 282.357 294.601 282.729 294.493 283.185 cv
294.457 283.245 li
294.397 283.257 li
294.253 283.257 li
294.181 283.221 li
294.157 283.137 li
294.241 282.789 294.325 282.489 294.409 282.249 cv
294.481 282.009 294.613 281.793 294.781 281.589 cv
294.949 281.397 295.153 281.289 295.417 281.289 cv
295.693 281.289 295.933 281.373 296.149 281.529 cv
296.353 281.697 296.485 281.901 296.533 282.165 cv
296.725 281.901 296.953 281.697 297.217 281.529 cv
297.481 281.373 297.769 281.289 298.081 281.289 cv
298.333 281.289 298.561 281.373 298.753 281.517 cv
298.945 281.661 299.041 281.865 299.041 282.117 cv
299.041 282.321 298.969 282.501 298.849 282.645 cv
298.717 282.801 298.549 282.873 298.345 282.873 cv
298.213 282.873 298.105 282.837 298.021 282.753 cv
297.925 282.681 297.889 282.573 297.889 282.441 cv
297.889 282.273 297.949 282.117 298.081 281.973 cv
298.201 281.829 298.357 281.757 298.525 281.757 cv
298.393 281.661 298.237 281.601 298.057 281.601 cv
297.709 281.601 297.409 281.733 297.157 281.973 cv
296.905 282.213 296.677 282.525 296.473 282.897 cv
295.621 286.329 li
295.597 286.449 295.537 286.533 295.441 286.605 cv
295.345 286.677 295.237 286.713 295.117 286.713 cv
295.021 286.713 294.937 286.677 294.865 286.629 cv
294.793 286.581 294.757 286.497 294.757 286.389 cv
f
304.819 286.713 mo
304.436 286.713 304.099 286.617 303.811 286.449 cv
303.512 286.281 303.284 286.041 303.128 285.729 cv
302.96 285.429 302.888 285.081 302.888 284.697 cv
302.888 284.157 303.031 283.617 303.344 283.089 cv
303.643 282.561 304.039 282.129 304.543 281.793 cv
305.048 281.457 305.576 281.289 306.128 281.289 cv
306.415 281.289 306.68 281.349 306.919 281.445 cv
307.147 281.541 307.352 281.685 307.52 281.865 cv
307.688 282.057 307.819 282.273 307.915 282.513 cv
308.012 282.765 308.06 283.029 308.06 283.317 cv
308.06 283.737 307.964 284.145 307.796 284.553 cv
307.616 284.961 307.375 285.321 307.076 285.657 cv
306.763 285.993 306.415 286.245 306.02 286.437 cv
305.624 286.617 305.228 286.713 304.819 286.713 cv
304.844 286.413 mo
305.203 286.413 305.527 286.293 305.815 286.053 cv
306.104 285.813 306.355 285.501 306.548 285.129 cv
306.74 284.769 306.884 284.373 306.979 283.965 cv
307.076 283.557 307.135 283.185 307.135 282.849 cv
307.135 282.513 307.039 282.213 306.871 281.973 cv
306.703 281.733 306.44 281.601 306.104 281.601 cv
305.635 281.601 305.228 281.805 304.88 282.201 cv
304.52 282.609 304.255 283.089 304.076 283.641 cv
303.896 284.193 303.811 284.709 303.811 285.165 cv
303.811 285.513 303.896 285.813 304.076 286.053 cv
304.255 286.293 304.508 286.413 304.844 286.413 cv
f
309.378 288.561 mo
309.522 288.669 309.702 288.729 309.918 288.729 cv
310.206 288.729 310.434 288.405 310.614 287.781 cv
310.686 287.469 310.89 286.485 311.226 284.781 cv
311.778 281.841 li
310.746 281.841 li
310.662 281.841 310.626 281.793 310.626 281.685 cv
310.65 281.517 310.71 281.421 310.782 281.421 cv
311.85 281.421 li
311.994 280.641 li
312.042 280.401 312.078 280.197 312.126 280.017 cv
312.162 279.849 312.198 279.681 312.246 279.537 cv
312.294 279.393 312.354 279.225 312.45 279.033 cv
312.582 278.769 312.762 278.553 313.002 278.385 cv
313.23 278.217 313.482 278.133 313.758 278.133 cv
313.926 278.133 314.094 278.169 314.262 278.229 cv
314.43 278.301 314.562 278.397 314.67 278.517 cv
314.778 278.649 314.838 278.805 314.838 278.973 cv
314.838 279.189 314.766 279.369 314.634 279.513 cv
314.49 279.657 314.334 279.729 314.142 279.729 cv
314.01 279.729 313.902 279.693 313.806 279.609 cv
313.71 279.537 313.674 279.429 313.674 279.297 cv
313.674 279.129 313.734 278.973 313.854 278.841 cv
313.974 278.709 314.118 278.637 314.298 278.613 cv
314.142 278.505 313.962 278.445 313.746 278.445 cv
313.626 278.445 313.506 278.505 313.398 278.613 cv
313.29 278.733 313.218 278.853 313.194 278.973 cv
313.146 279.189 313.026 279.741 312.858 280.629 cv
312.714 281.421 li
313.95 281.421 li
314.022 281.421 314.07 281.481 314.07 281.577 cv
314.034 281.685 li
313.986 281.805 li
313.914 281.841 li
312.63 281.841 li
312.078 284.769 li
312.006 285.201 311.922 285.633 311.826 286.065 cv
311.73 286.497 311.61 286.941 311.442 287.409 cv
311.274 287.865 311.07 288.261 310.806 288.573 cv
310.542 288.885 310.242 289.041 309.894 289.041 cv
309.618 289.041 309.378 288.957 309.162 288.813 cv
308.946 288.657 308.85 288.453 308.85 288.201 cv
308.85 287.985 308.91 287.805 309.042 287.661 cv
309.174 287.517 309.342 287.445 309.546 287.445 cv
309.666 287.445 309.774 287.481 309.87 287.565 cv
309.966 287.637 310.014 287.745 310.014 287.877 cv
310.014 288.045 309.942 288.201 309.822 288.345 cv
309.69 288.489 309.546 288.561 309.378 288.561 cv
f
317.852 286.593 mo
317.768 286.593 317.732 286.545 317.732 286.437 cv
317.756 286.341 li
317.792 286.221 li
317.888 286.173 li
318.644 286.173 319.088 285.933 319.22 285.441 cv
320.78 279.177 li
320.804 279.009 li
320.804 278.925 320.756 278.877 320.66 278.865 cv
320.504 278.841 320.216 278.817 319.796 278.817 cv
319.712 278.817 319.676 278.769 319.676 278.661 cv
319.7 278.553 li
319.748 278.445 li
319.832 278.397 li
321.944 278.397 li
322.1 278.529 li
323.036 285.405 li
327.404 278.529 li
327.452 278.445 327.536 278.397 327.632 278.397 cv
329.672 278.397 li
329.744 278.397 329.792 278.457 329.792 278.553 cv
329.756 278.661 li
329.708 278.781 li
329.636 278.817 li
329.144 278.817 328.808 278.853 328.616 278.901 cv
328.508 278.937 328.436 279.045 328.388 279.225 cv
326.744 285.813 li
326.72 285.981 li
326.732 286.065 li
326.768 286.101 li
326.864 286.125 li
327.008 286.161 327.296 286.173 327.728 286.173 cv
327.8 286.173 327.848 286.233 327.848 286.329 cv
327.812 286.449 327.788 286.521 327.776 286.545 cv
327.644 286.593 li
324.512 286.593 li
324.428 286.593 324.392 286.545 324.392 286.437 cv
324.416 286.329 li
324.464 286.221 li
324.548 286.173 li
325.028 286.173 325.376 286.149 325.568 286.089 cv
325.664 286.065 325.748 285.957 325.796 285.765 cv
327.524 278.817 li
322.676 286.461 li
322.628 286.557 322.544 286.593 322.436 286.593 cv
322.328 286.593 322.268 286.557 322.268 286.461 cv
321.248 278.913 li
319.604 285.489 li
319.58 285.573 li
319.568 285.669 li
319.568 285.885 319.652 286.017 319.832 286.077 cv
320.012 286.149 320.24 286.173 320.504 286.173 cv
320.576 286.173 320.624 286.233 320.624 286.329 cv
320.6 286.437 320.576 286.509 320.552 286.545 cv
320.42 286.593 li
317.852 286.593 li
f
329.447 286.593 mo
329.363 286.593 329.327 286.545 329.327 286.437 cv
329.35 286.329 li
329.398 286.221 li
329.483 286.173 li
329.962 286.173 330.311 286.149 330.503 286.089 cv
330.599 286.065 330.682 285.957 330.73 285.765 cv
332.375 279.177 li
332.398 279.009 li
332.398 278.925 332.35 278.877 332.255 278.865 cv
332.099 278.841 331.811 278.817 331.391 278.817 cv
331.307 278.817 331.271 278.769 331.271 278.661 cv
331.294 278.553 li
331.342 278.445 li
331.427 278.397 li
337.763 278.397 li
337.835 278.397 337.883 278.457 337.883 278.553 cv
337.595 281.037 li
337.547 281.109 li
337.475 281.145 li
337.367 281.145 li
337.283 281.145 337.247 281.097 337.247 280.989 cv
337.294 280.629 337.319 280.341 337.319 280.101 cv
337.319 279.705 337.223 279.417 337.055 279.225 cv
336.887 279.033 336.671 278.925 336.406 278.877 cv
336.143 278.841 335.783 278.817 335.327 278.817 cv
334.043 278.817 li
333.827 278.817 333.682 278.841 333.611 278.877 cv
333.539 278.913 333.467 279.033 333.419 279.225 cv
332.651 282.285 li
333.551 282.285 li
333.839 282.285 334.079 282.273 334.271 282.237 cv
334.451 282.213 334.607 282.153 334.727 282.057 cv
334.846 281.973 334.943 281.841 335.027 281.673 cv
335.099 281.505 335.182 281.277 335.255 280.989 cv
335.375 280.881 li
335.483 280.881 li
335.555 280.881 335.603 280.941 335.603 281.037 cv
334.871 284.001 li
334.751 284.109 li
334.643 284.109 li
334.559 284.109 334.523 284.061 334.523 283.953 cv
334.57 283.749 li
334.583 283.701 334.595 283.617 334.618 283.509 cv
334.63 283.413 334.643 283.317 334.643 283.233 cv
334.643 283.005 334.535 282.861 334.331 282.801 cv
334.126 282.741 333.863 282.705 333.539 282.705 cv
332.555 282.705 li
331.775 285.813 li
331.751 285.933 li
331.751 286.029 331.775 286.089 331.835 286.089 cv
332.039 286.149 332.447 286.173 333.059 286.173 cv
333.13 286.173 333.178 286.233 333.178 286.329 cv
333.143 286.449 333.118 286.521 333.107 286.545 cv
332.975 286.593 li
329.447 286.593 li
f
337.331 286.845 mo
337.259 286.797 li
337.235 286.725 li
337.931 283.941 li
338.027 283.869 li
338.171 283.869 li
338.243 283.905 li
338.267 283.989 li
338.195 284.265 338.171 284.505 338.171 284.721 cv
338.171 285.309 338.363 285.741 338.759 286.017 cv
339.155 286.305 339.659 286.437 340.271 286.437 cv
340.535 286.437 340.787 286.377 341.039 286.245 cv
341.291 286.125 341.519 285.957 341.711 285.741 cv
341.903 285.537 342.047 285.309 342.167 285.045 cv
342.275 284.793 342.335 284.529 342.335 284.265 cv
342.335 283.989 342.251 283.737 342.107 283.521 cv
341.963 283.305 341.759 283.161 341.495 283.089 cv
340.031 282.705 li
339.635 282.609 339.323 282.393 339.083 282.069 cv
338.843 281.757 338.735 281.397 338.735 280.989 cv
338.735 280.509 338.879 280.053 339.167 279.609 cv
339.455 279.165 339.827 278.805 340.283 278.541 cv
340.739 278.277 341.207 278.133 341.687 278.133 cv
342.047 278.133 342.383 278.205 342.695 278.337 cv
342.995 278.481 343.235 278.685 343.403 278.973 cv
344.087 278.169 li
344.171 278.133 li
344.243 278.133 li
344.315 278.181 li
344.351 278.253 li
343.655 281.037 li
343.559 281.121 li
343.415 281.121 li
343.343 281.121 343.307 281.085 343.307 280.989 cv
343.343 280.737 343.367 280.521 343.367 280.329 cv
343.367 279.969 343.295 279.645 343.175 279.369 cv
343.043 279.093 342.851 278.877 342.599 278.733 cv
342.335 278.589 342.023 278.517 341.651 278.517 cv
341.327 278.517 341.003 278.613 340.691 278.793 cv
340.379 278.985 340.115 279.225 339.923 279.525 cv
339.731 279.837 339.635 280.149 339.635 280.473 cv
339.635 280.737 339.707 280.965 339.863 281.157 cv
340.007 281.361 340.211 281.493 340.463 281.565 cv
341.927 281.949 li
342.191 282.021 342.419 282.153 342.611 282.321 cv
342.803 282.501 342.959 282.717 343.067 282.957 cv
343.163 283.197 343.223 283.461 343.223 283.749 cv
343.223 284.133 343.139 284.517 342.983 284.877 cv
342.815 285.249 342.599 285.585 342.311 285.885 cv
342.023 286.197 341.687 286.425 341.327 286.593 cv
340.967 286.761 340.595 286.845 340.223 286.845 cv
339.263 286.845 338.579 286.569 338.171 286.017 cv
337.499 286.809 li
337.415 286.845 li
337.331 286.845 li
f
348.049 285.729 mo
348.049 285.585 348.073 285.429 348.145 285.261 cv
349.117 282.681 li
349.213 282.393 349.273 282.153 349.273 281.961 cv
349.273 281.721 349.177 281.601 349.009 281.601 cv
348.697 281.601 348.433 281.769 348.229 282.093 cv
348.013 282.429 347.869 282.789 347.773 283.185 cv
347.677 283.257 li
347.533 283.257 li
347.437 283.149 li
347.437 283.113 li
347.557 282.633 347.761 282.213 348.025 281.841 cv
348.289 281.481 348.625 281.289 349.033 281.289 cv
349.321 281.289 349.561 281.385 349.753 281.577 cv
349.945 281.769 350.053 281.997 350.053 282.285 cv
350.053 282.441 350.017 282.597 349.957 282.753 cv
348.985 285.333 li
348.865 285.597 348.817 285.837 348.817 286.053 cv
348.817 286.293 348.901 286.413 349.093 286.413 cv
349.405 286.413 349.657 286.245 349.873 285.909 cv
350.077 285.573 350.221 285.213 350.317 284.829 cv
350.413 284.757 li
350.557 284.757 li
350.629 284.793 li
350.665 284.865 li
350.653 284.901 li
350.533 285.357 350.341 285.777 350.077 286.149 cv
349.801 286.533 349.465 286.713 349.069 286.713 cv
348.781 286.713 348.541 286.617 348.349 286.437 cv
348.145 286.245 348.049 286.017 348.049 285.729 cv
349.405 279.321 mo
349.405 279.153 349.465 279.009 349.609 278.865 cv
349.753 278.733 349.909 278.661 350.077 278.661 cv
350.209 278.661 350.317 278.709 350.413 278.793 cv
350.497 278.877 350.545 278.985 350.545 279.105 cv
350.545 279.285 350.473 279.441 350.329 279.573 cv
350.185 279.717 350.029 279.777 349.861 279.777 cv
349.729 279.777 349.621 279.741 349.537 279.645 cv
349.441 279.561 349.405 279.453 349.405 279.321 cv
f
352.168 286.389 mo
352.18 286.281 li
353.08 282.705 li
353.128 282.489 353.164 282.285 353.164 282.117 cv
353.164 281.781 353.044 281.601 352.816 281.601 cv
352.564 281.601 352.372 281.757 352.252 282.057 cv
352.132 282.357 352.012 282.729 351.904 283.185 cv
351.868 283.245 li
351.808 283.257 li
351.664 283.257 li
351.592 283.221 li
351.568 283.137 li
351.652 282.789 351.736 282.489 351.82 282.249 cv
351.892 282.009 352.024 281.793 352.192 281.589 cv
352.36 281.397 352.564 281.289 352.828 281.289 cv
353.116 281.289 353.38 281.385 353.62 281.577 cv
353.848 281.769 353.968 282.009 353.968 282.297 cv
354.208 281.985 354.484 281.745 354.808 281.565 cv
355.12 281.385 355.468 281.289 355.828 281.289 cv
356.104 281.289 356.344 281.349 356.56 281.445 cv
356.764 281.541 356.92 281.697 357.04 281.889 cv
357.16 282.081 357.22 282.321 357.22 282.585 cv
357.22 282.921 357.136 283.317 356.992 283.773 cv
356.848 284.241 356.668 284.757 356.452 285.333 cv
356.332 285.597 356.284 285.837 356.284 286.053 cv
356.284 286.293 356.368 286.413 356.56 286.413 cv
356.872 286.413 357.124 286.245 357.34 285.909 cv
357.544 285.573 357.688 285.213 357.784 284.829 cv
357.88 284.757 li
358.024 284.757 li
358.096 284.793 li
358.132 284.865 li
358.12 284.901 li
358.012 285.357 357.82 285.777 357.556 286.149 cv
357.28 286.533 356.944 286.713 356.536 286.713 cv
356.248 286.713 356.008 286.617 355.816 286.437 cv
355.612 286.245 355.516 286.017 355.516 285.729 cv
355.516 285.585 355.54 285.429 355.612 285.261 cv
355.708 284.997 355.816 284.685 355.948 284.325 cv
356.08 283.965 356.188 283.629 356.272 283.293 cv
356.356 282.957 356.404 282.669 356.404 282.405 cv
356.404 282.189 356.356 281.997 356.26 281.841 cv
356.164 281.685 356.02 281.601 355.804 281.601 cv
355.504 281.601 355.228 281.673 354.988 281.793 cv
354.748 281.925 354.532 282.093 354.352 282.309 cv
354.16 282.525 353.992 282.777 353.848 283.065 cv
353.032 286.329 li
353.008 286.449 352.948 286.533 352.852 286.605 cv
352.756 286.677 352.648 286.713 352.528 286.713 cv
352.432 286.713 352.348 286.677 352.276 286.629 cv
352.204 286.581 352.168 286.497 352.168 286.389 cv
f
362.35 285.621 mo
362.35 285.501 362.362 285.393 362.386 285.285 cv
363.25 281.841 li
361.99 281.841 li
361.906 281.841 361.87 281.793 361.87 281.685 cv
361.894 281.517 361.954 281.421 362.026 281.421 cv
363.358 281.421 li
363.838 279.465 li
363.862 279.369 363.922 279.273 364.018 279.201 cv
364.114 279.129 364.222 279.081 364.342 279.081 cv
364.438 279.081 364.522 279.117 364.594 279.177 cv
364.666 279.237 364.702 279.321 364.702 279.417 cv
364.69 279.477 li
364.69 279.513 li
364.21 281.421 li
365.446 281.421 li
365.518 281.421 365.566 281.481 365.566 281.577 cv
365.542 281.673 li
365.494 281.793 li
365.41 281.841 li
364.102 281.841 li
363.238 285.309 li
363.178 285.537 363.154 285.729 363.154 285.897 cv
363.154 286.245 363.262 286.413 363.502 286.413 cv
363.85 286.413 364.162 286.257 364.438 285.921 cv
364.702 285.585 364.918 285.225 365.062 284.829 cv
365.158 284.757 li
365.302 284.757 li
365.374 284.793 li
365.41 284.865 li
365.398 284.901 li
365.218 285.381 364.966 285.813 364.63 286.173 cv
364.294 286.533 363.91 286.713 363.478 286.713 cv
363.154 286.713 362.89 286.605 362.674 286.413 cv
362.458 286.209 362.35 285.945 362.35 285.621 cv
f
366.572 286.377 mo
366.584 286.269 li
368.324 279.333 li
368.348 279.201 368.372 279.093 368.384 279.009 cv
368.384 278.889 368.12 278.817 367.604 278.817 cv
367.52 278.817 367.484 278.769 367.484 278.661 cv
367.508 278.553 li
367.556 278.445 li
367.652 278.397 li
369.272 278.265 li
369.308 278.265 li
369.344 278.301 li
369.392 278.325 li
369.416 278.421 li
368.48 282.165 li
368.96 281.589 369.548 281.289 370.232 281.289 cv
370.508 281.289 370.748 281.349 370.952 281.445 cv
371.156 281.541 371.312 281.697 371.432 281.889 cv
371.552 282.081 371.612 282.321 371.612 282.585 cv
371.612 282.921 371.54 283.317 371.396 283.773 cv
371.252 284.241 371.06 284.757 370.844 285.333 cv
370.724 285.597 370.676 285.837 370.676 286.053 cv
370.676 286.293 370.76 286.413 370.952 286.413 cv
371.264 286.413 371.516 286.245 371.732 285.909 cv
371.936 285.573 372.08 285.213 372.176 284.829 cv
372.272 284.757 li
372.416 284.757 li
372.488 284.793 li
372.524 284.865 li
372.512 284.901 li
372.44 285.189 372.332 285.477 372.188 285.753 cv
372.044 286.041 371.876 286.269 371.672 286.449 cv
371.456 286.617 371.216 286.713 370.928 286.713 cv
370.64 286.713 370.4 286.617 370.208 286.437 cv
370.004 286.245 369.908 286.017 369.908 285.729 cv
369.908 285.585 369.932 285.429 370.004 285.261 cv
370.22 284.661 370.412 284.133 370.568 283.653 cv
370.712 283.185 370.796 282.765 370.796 282.405 cv
370.796 282.177 370.748 281.985 370.652 281.829 cv
370.556 281.685 370.412 281.601 370.208 281.601 cv
369.776 281.601 369.392 281.733 369.08 281.997 cv
368.756 282.261 368.48 282.609 368.252 283.041 cv
367.436 286.317 li
367.4 286.437 367.34 286.533 367.256 286.605 cv
367.16 286.677 367.064 286.713 366.944 286.713 cv
366.836 286.713 366.752 286.677 366.68 286.617 cv
366.608 286.557 366.572 286.473 366.572 286.377 cv
f
375.262 286.713 mo
374.878 286.713 374.542 286.617 374.254 286.425 cv
373.966 286.233 373.75 285.957 373.606 285.621 cv
373.45 285.285 373.378 284.937 373.378 284.553 cv
373.378 283.989 373.522 283.449 373.81 282.945 cv
374.098 282.441 374.482 282.045 374.974 281.745 cv
375.466 281.445 375.994 281.289 376.558 281.289 cv
376.894 281.289 377.194 281.385 377.458 281.565 cv
377.71 281.745 377.842 281.997 377.842 282.321 cv
377.842 282.789 377.65 283.137 377.29 283.353 cv
376.918 283.581 376.498 283.725 376.042 283.773 cv
375.586 283.821 375.07 283.845 374.518 283.845 cv
374.482 283.845 li
374.35 284.325 374.29 284.733 374.29 285.069 cv
374.29 285.429 374.362 285.741 374.53 286.005 cv
374.698 286.281 374.95 286.413 375.286 286.413 cv
375.766 286.413 376.222 286.305 376.666 286.089 cv
377.098 285.873 377.458 285.561 377.734 285.177 cv
377.83 285.141 li
377.95 285.213 li
378.01 285.333 li
377.986 285.405 li
377.698 285.813 377.302 286.137 376.81 286.365 cv
376.306 286.593 375.79 286.713 375.262 286.713 cv
374.554 283.533 mo
375.01 283.533 375.442 283.521 375.838 283.473 cv
376.234 283.425 376.594 283.317 376.918 283.149 cv
377.23 282.981 377.398 282.705 377.398 282.333 cv
377.398 282.189 377.35 282.057 377.266 281.949 cv
377.182 281.841 377.074 281.757 376.954 281.697 cv
376.822 281.637 376.69 281.601 376.546 281.601 cv
376.21 281.601 375.898 281.697 375.634 281.877 cv
375.358 282.069 375.13 282.309 374.962 282.597 cv
374.782 282.897 374.65 283.209 374.554 283.533 cv
f
382.321 286.845 mo
382.249 286.797 li
382.225 286.725 li
382.921 283.941 li
383.017 283.869 li
383.161 283.869 li
383.233 283.905 li
383.257 283.989 li
383.185 284.265 383.161 284.505 383.161 284.721 cv
383.161 285.309 383.353 285.741 383.749 286.017 cv
384.145 286.305 384.649 286.437 385.261 286.437 cv
385.525 286.437 385.777 286.377 386.029 286.245 cv
386.281 286.125 386.509 285.957 386.701 285.741 cv
386.893 285.537 387.037 285.309 387.157 285.045 cv
387.265 284.793 387.325 284.529 387.325 284.265 cv
387.325 283.989 387.241 283.737 387.097 283.521 cv
386.953 283.305 386.749 283.161 386.485 283.089 cv
385.021 282.705 li
384.625 282.609 384.313 282.393 384.073 282.069 cv
383.833 281.757 383.725 281.397 383.725 280.989 cv
383.725 280.509 383.869 280.053 384.157 279.609 cv
384.445 279.165 384.817 278.805 385.273 278.541 cv
385.729 278.277 386.197 278.133 386.677 278.133 cv
387.037 278.133 387.373 278.205 387.685 278.337 cv
387.985 278.481 388.225 278.685 388.393 278.973 cv
389.077 278.169 li
389.161 278.133 li
389.233 278.133 li
389.305 278.181 li
389.341 278.253 li
388.645 281.037 li
388.549 281.121 li
388.405 281.121 li
388.333 281.121 388.297 281.085 388.297 280.989 cv
388.333 280.737 388.357 280.521 388.357 280.329 cv
388.357 279.969 388.285 279.645 388.165 279.369 cv
388.033 279.093 387.841 278.877 387.589 278.733 cv
387.325 278.589 387.013 278.517 386.641 278.517 cv
386.317 278.517 385.993 278.613 385.681 278.793 cv
385.369 278.985 385.105 279.225 384.913 279.525 cv
384.721 279.837 384.625 280.149 384.625 280.473 cv
384.625 280.737 384.697 280.965 384.853 281.157 cv
384.997 281.361 385.201 281.493 385.453 281.565 cv
386.917 281.949 li
387.181 282.021 387.409 282.153 387.601 282.321 cv
387.793 282.501 387.949 282.717 388.057 282.957 cv
388.153 283.197 388.213 283.461 388.213 283.749 cv
388.213 284.133 388.129 284.517 387.973 284.877 cv
387.805 285.249 387.589 285.585 387.301 285.885 cv
387.013 286.197 386.677 286.425 386.317 286.593 cv
385.957 286.761 385.585 286.845 385.213 286.845 cv
384.253 286.845 383.569 286.569 383.161 286.017 cv
382.489 286.809 li
382.405 286.845 li
382.321 286.845 li
f
390.706 284.925 mo
390.706 285.213 390.754 285.477 390.874 285.705 cv
390.994 285.945 391.162 286.125 391.378 286.245 cv
391.594 286.377 391.846 286.437 392.146 286.437 cv
392.482 286.437 392.818 286.377 393.154 286.233 cv
393.478 286.089 393.766 285.897 394.03 285.645 cv
394.294 285.393 394.51 285.105 394.702 284.781 cv
394.882 284.469 395.014 284.145 395.098 283.833 cv
396.178 279.501 li
396.202 279.321 li
396.202 278.985 395.89 278.817 395.278 278.817 cv
395.194 278.817 395.158 278.769 395.158 278.661 cv
395.182 278.565 395.194 278.493 395.218 278.457 cv
395.362 278.397 li
397.966 278.397 li
398.05 278.457 li
398.086 278.553 li
398.062 278.649 li
398.002 278.781 li
397.93 278.817 li
397.162 278.817 396.718 279.069 396.598 279.549 cv
395.518 283.881 li
395.422 284.265 395.278 284.625 395.062 284.973 cv
394.846 285.333 394.582 285.645 394.27 285.933 cv
393.958 286.221 393.622 286.449 393.25 286.605 cv
392.878 286.761 392.494 286.845 392.11 286.845 cv
391.666 286.845 391.258 286.749 390.898 286.569 cv
390.538 286.377 390.25 286.113 390.046 285.765 cv
389.83 285.417 389.734 285.009 389.734 284.553 cv
389.734 284.289 389.758 284.049 389.818 283.833 cv
390.982 279.177 li
391.006 279.009 li
391.006 278.925 390.958 278.877 390.862 278.865 cv
390.706 278.841 390.418 278.817 389.998 278.817 cv
389.914 278.817 389.878 278.769 389.878 278.661 cv
389.902 278.565 389.926 278.493 389.938 278.457 cv
390.082 278.397 li
393.31 278.397 li
393.382 278.397 393.43 278.457 393.43 278.553 cv
393.406 278.661 li
393.358 278.769 li
393.274 278.817 li
392.782 278.817 392.446 278.853 392.254 278.901 cv
392.146 278.949 392.074 279.057 392.026 279.225 cv
390.862 283.881 li
390.754 284.313 390.706 284.661 390.706 284.925 cv
f
397.68 286.437 mo
397.704 286.329 li
397.752 286.221 li
397.848 286.173 li
398.532 286.173 398.988 286.161 399.216 286.113 cv
399.432 286.065 399.552 285.945 399.6 285.765 cv
401.244 279.177 li
401.268 279.081 401.292 278.997 401.292 278.913 cv
401.292 278.853 401.148 278.817 400.872 278.817 cv
400.176 278.817 li
399.636 278.817 399.216 278.901 398.928 279.069 cv
398.64 279.237 398.424 279.453 398.292 279.717 cv
398.148 279.981 397.98 280.425 397.764 281.037 cv
397.644 281.145 li
397.536 281.145 li
397.452 281.145 397.416 281.097 397.416 280.989 cv
398.268 278.505 li
398.388 278.397 li
405.48 278.397 li
405.552 278.397 405.6 278.457 405.6 278.553 cv
405.204 281.037 li
405.156 281.109 li
405.084 281.145 li
404.976 281.145 li
404.892 281.145 404.856 281.097 404.856 280.989 cv
404.94 280.425 404.988 280.029 404.988 279.789 cv
404.988 279.513 404.928 279.297 404.808 279.153 cv
404.688 279.009 404.532 278.925 404.352 278.877 cv
404.16 278.841 403.92 278.817 403.62 278.817 cv
402.912 278.817 li
402.696 278.817 402.552 278.841 402.48 278.877 cv
402.408 278.925 402.336 279.033 402.288 279.225 cv
400.644 285.813 li
400.632 285.861 li
400.62 285.921 li
400.62 286.029 400.68 286.089 400.8 286.113 cv
401.004 286.161 401.448 286.173 402.132 286.173 cv
402.204 286.173 402.252 286.233 402.252 286.329 cv
402.216 286.449 402.192 286.521 402.18 286.545 cv
402.048 286.593 li
397.8 286.593 li
397.716 286.593 397.68 286.545 397.68 286.437 cv
f
52.812 256.968 mo
56.812 256.968 li
f
52.812 256.968 mo
56.812 256.968 li
@
46.5811 252.312 mo
45.9691 252.312 45.5131 252.612 45.2011 253.212 cv
44.8891 253.812 44.7451 254.712 44.7451 255.912 cv
44.7451 257.112 44.8891 258.012 45.2011 258.612 cv
45.5131 259.212 45.9691 259.512 46.5811 259.512 cv
47.1931 259.512 47.6491 259.212 47.9611 258.612 cv
48.2611 258.012 48.4171 257.112 48.4171 255.912 cv
48.4171 254.712 48.2611 253.812 47.9611 253.212 cv
47.6491 252.612 47.1931 252.312 46.5811 252.312 cv
46.5811 251.376 mo
47.5531 251.376 48.2971 251.772 48.8251 252.54 cv
49.3411 253.32 49.6051 254.448 49.6051 255.912 cv
49.6051 257.388 49.3411 258.516 48.8251 259.284 cv
48.2971 260.052 47.5531 260.436 46.5811 260.436 cv
45.5971 260.436 44.8411 260.052 44.3251 259.284 cv
43.8091 258.516 43.5571 257.388 43.5571 255.912 cv
43.5571 254.448 43.8091 253.32 44.3251 252.54 cv
44.8411 251.772 45.5971 251.376 46.5811 251.376 cv
f
52.812 224.527 mo
56.812 224.527 li
f
52.812 224.527 mo
56.812 224.527 li
@
36.5455 219.091 mo
41.1895 219.091 li
41.1895 220.087 li
37.6255 220.087 li
37.6255 222.235 li
37.7935 222.175 37.9735 222.127 38.1415 222.103 cv
38.3095 222.079 38.4895 222.055 38.6575 222.055 cv
39.6295 222.055 40.3975 222.331 40.9735 222.859 cv
41.5495 223.399 41.8375 224.119 41.8375 225.031 cv
41.8375 225.979 41.5375 226.711 40.9495 227.227 cv
40.3615 227.743 39.5335 227.995 38.4775 227.995 cv
38.1055 227.995 37.7335 227.959 37.3495 227.911 cv
36.9655 227.851 36.5815 227.767 36.1735 227.635 cv
36.1735 226.447 li
36.5215 226.639 36.8815 226.783 37.2655 226.879 cv
37.6375 226.975 38.0335 227.011 38.4535 227.011 cv
39.1255 227.011 39.6655 226.843 40.0615 226.483 cv
40.4455 226.123 40.6495 225.643 40.6495 225.031 cv
40.6495 224.431 40.4455 223.951 40.0615 223.591 cv
39.6655 223.231 39.1255 223.051 38.4535 223.051 cv
38.1415 223.051 37.8175 223.087 37.5055 223.159 cv
37.1935 223.231 36.8695 223.339 36.5455 223.483 cv
36.5455 219.091 li
f
46.6975 219.871 mo
46.0855 219.871 45.6295 220.171 45.3175 220.771 cv
45.0055 221.371 44.8615 222.271 44.8615 223.471 cv
44.8615 224.671 45.0055 225.571 45.3175 226.171 cv
45.6295 226.771 46.0855 227.071 46.6975 227.071 cv
47.3095 227.071 47.7655 226.771 48.0775 226.171 cv
48.3775 225.571 48.5335 224.671 48.5335 223.471 cv
48.5335 222.271 48.3775 221.371 48.0775 220.771 cv
47.7655 220.171 47.3095 219.871 46.6975 219.871 cv
46.6975 218.935 mo
47.6695 218.935 48.4135 219.331 48.9415 220.099 cv
49.4575 220.879 49.7215 222.007 49.7215 223.471 cv
49.7215 224.947 49.4575 226.075 48.9415 226.843 cv
48.4135 227.611 47.6695 227.995 46.6975 227.995 cv
45.7135 227.995 44.9575 227.611 44.4415 226.843 cv
43.9255 226.075 43.6735 224.947 43.6735 223.471 cv
43.6735 222.007 43.9255 220.879 44.4415 220.099 cv
44.9575 219.331 45.7135 218.935 46.6975 218.935 cv
f
52.812 192.086 mo
56.812 192.086 li
f
52.812 192.086 mo
56.812 192.086 li
@
29.4875 194.402 mo
31.4195 194.402 li
31.4195 187.73 li
29.3195 188.15 li
29.3195 187.07 li
31.4075 186.65 li
32.5955 186.65 li
32.5955 194.402 li
34.5275 194.402 li
34.5275 195.398 li
29.4875 195.398 li
29.4875 194.402 li
f
39.4475 187.43 mo
38.8355 187.43 38.3795 187.73 38.0675 188.33 cv
37.7555 188.93 37.6115 189.83 37.6115 191.03 cv
37.6115 192.23 37.7555 193.13 38.0675 193.73 cv
38.3795 194.33 38.8355 194.63 39.4475 194.63 cv
40.0595 194.63 40.5155 194.33 40.8275 193.73 cv
41.1275 193.13 41.2835 192.23 41.2835 191.03 cv
41.2835 189.83 41.1275 188.93 40.8275 188.33 cv
40.5155 187.73 40.0595 187.43 39.4475 187.43 cv
39.4475 186.494 mo
40.4195 186.494 41.1635 186.89 41.6915 187.658 cv
42.2075 188.438 42.4715 189.566 42.4715 191.03 cv
42.4715 192.506 42.2075 193.634 41.6915 194.402 cv
41.1635 195.17 40.4195 195.554 39.4475 195.554 cv
38.4635 195.554 37.7075 195.17 37.1915 194.402 cv
36.6755 193.634 36.4235 192.506 36.4235 191.03 cv
36.4235 189.566 36.6755 188.438 37.1915 187.658 cv
37.7075 186.89 38.4635 186.494 39.4475 186.494 cv
f
47.0795 187.43 mo
46.4675 187.43 46.0115 187.73 45.6995 188.33 cv
45.3875 188.93 45.2435 189.83 45.2435 191.03 cv
45.2435 192.23 45.3875 193.13 45.6995 193.73 cv
46.0115 194.33 46.4675 194.63 47.0795 194.63 cv
47.6915 194.63 48.1475 194.33 48.4595 193.73 cv
48.7595 193.13 48.9155 192.23 48.9155 191.03 cv
48.9155 189.83 48.7595 188.93 48.4595 188.33 cv
48.1475 187.73 47.6915 187.43 47.0795 187.43 cv
47.0795 186.494 mo
48.0515 186.494 48.7955 186.89 49.3235 187.658 cv
49.8395 188.438 50.1035 189.566 50.1035 191.03 cv
50.1035 192.506 49.8395 193.634 49.3235 194.402 cv
48.7955 195.17 48.0515 195.554 47.0795 195.554 cv
46.0955 195.554 45.3395 195.17 44.8235 194.402 cv
44.3075 193.634 44.0555 192.506 44.0555 191.03 cv
44.0555 189.566 44.3075 188.438 44.8235 187.658 cv
45.3395 186.89 46.0955 186.494 47.0795 186.494 cv
f
52.812 159.645 mo
56.812 159.645 li
f
52.812 159.645 mo
56.812 159.645 li
@
29.4875 161.961 mo
31.4195 161.961 li
31.4195 155.289 li
29.3195 155.709 li
29.3195 154.629 li
31.4075 154.209 li
32.5955 154.209 li
32.5955 161.961 li
34.5275 161.961 li
34.5275 162.957 li
29.4875 162.957 li
29.4875 161.961 li
f
36.9275 154.209 mo
41.5715 154.209 li
41.5715 155.205 li
38.0075 155.205 li
38.0075 157.353 li
38.1755 157.293 38.3555 157.245 38.5235 157.221 cv
38.6915 157.197 38.8715 157.173 39.0395 157.173 cv
40.0115 157.173 40.7795 157.449 41.3555 157.977 cv
41.9315 158.517 42.2195 159.237 42.2195 160.149 cv
42.2195 161.097 41.9195 161.829 41.3315 162.345 cv
40.7435 162.861 39.9155 163.113 38.8595 163.113 cv
38.4875 163.113 38.1155 163.077 37.7315 163.029 cv
37.3475 162.969 36.9635 162.885 36.5555 162.753 cv
36.5555 161.565 li
36.9035 161.757 37.2635 161.901 37.6475 161.997 cv
38.0195 162.093 38.4155 162.129 38.8355 162.129 cv
39.5075 162.129 40.0475 161.961 40.4435 161.601 cv
40.8275 161.241 41.0315 160.761 41.0315 160.149 cv
41.0315 159.549 40.8275 159.069 40.4435 158.709 cv
40.0475 158.349 39.5075 158.169 38.8355 158.169 cv
38.5235 158.169 38.1995 158.205 37.8875 158.277 cv
37.5755 158.349 37.2515 158.457 36.9275 158.601 cv
36.9275 154.209 li
f
47.0795 154.989 mo
46.4675 154.989 46.0115 155.289 45.6995 155.889 cv
45.3875 156.489 45.2435 157.389 45.2435 158.589 cv
45.2435 159.789 45.3875 160.689 45.6995 161.289 cv
46.0115 161.889 46.4675 162.189 47.0795 162.189 cv
47.6915 162.189 48.1475 161.889 48.4595 161.289 cv
48.7595 160.689 48.9155 159.789 48.9155 158.589 cv
48.9155 157.389 48.7595 156.489 48.4595 155.889 cv
48.1475 155.289 47.6915 154.989 47.0795 154.989 cv
47.0795 154.053 mo
48.0515 154.053 48.7955 154.449 49.3235 155.217 cv
49.8395 155.997 50.1035 157.125 50.1035 158.589 cv
50.1035 160.065 49.8395 161.193 49.3235 161.961 cv
48.7955 162.729 48.0515 163.113 47.0795 163.113 cv
46.0955 163.113 45.3395 162.729 44.8235 161.961 cv
44.3075 161.193 44.0555 160.065 44.0555 158.589 cv
44.0555 157.125 44.3075 155.997 44.8235 155.217 cv
45.3395 154.449 46.0955 154.053 47.0795 154.053 cv
f
52.812 127.203 mo
56.812 127.203 li
f
52.812 127.203 mo
56.812 127.203 li
@
29.866 129.52 mo
33.994 129.52 li
33.994 130.516 li
28.438 130.516 li
28.438 129.52 li
28.882 129.064 29.494 128.44 30.274 127.648 cv
31.042 126.868 31.534 126.364 31.738 126.136 cv
32.122 125.716 32.386 125.356 32.53 125.056 cv
32.674 124.768 32.758 124.468 32.758 124.18 cv
32.758 123.724 32.59 123.34 32.266 123.052 cv
31.942 122.764 31.522 122.608 30.994 122.608 cv
30.622 122.608 30.226 122.68 29.818 122.8 cv
29.41 122.932 28.966 123.124 28.498 123.388 cv
28.498 122.188 li
28.978 121.996 29.422 121.852 29.83 121.756 cv
30.238 121.66 30.622 121.612 30.97 121.612 cv
31.87 121.612 32.59 121.84 33.13 122.296 cv
33.67 122.752 33.946 123.352 33.946 124.108 cv
33.946 124.468 33.874 124.816 33.742 125.128 cv
33.61 125.452 33.37 125.836 33.01 126.268 cv
32.914 126.388 32.602 126.712 32.074 127.252 cv
31.546 127.792 30.814 128.548 29.866 129.52 cv
f
39.01 122.548 mo
38.398 122.548 37.942 122.848 37.63 123.448 cv
37.318 124.048 37.174 124.948 37.174 126.148 cv
37.174 127.348 37.318 128.248 37.63 128.848 cv
37.942 129.448 38.398 129.748 39.01 129.748 cv
39.622 129.748 40.078 129.448 40.39 128.848 cv
40.69 128.248 40.846 127.348 40.846 126.148 cv
40.846 124.948 40.69 124.048 40.39 123.448 cv
40.078 122.848 39.622 122.548 39.01 122.548 cv
39.01 121.612 mo
39.982 121.612 40.726 122.008 41.254 122.776 cv
41.77 123.556 42.034 124.684 42.034 126.148 cv
42.034 127.624 41.77 128.752 41.254 129.52 cv
40.726 130.288 39.982 130.672 39.01 130.672 cv
38.026 130.672 37.27 130.288 36.754 129.52 cv
36.238 128.752 35.986 127.624 35.986 126.148 cv
35.986 124.684 36.238 123.556 36.754 122.776 cv
37.27 122.008 38.026 121.612 39.01 121.612 cv
f
46.642 122.548 mo
46.03 122.548 45.574 122.848 45.262 123.448 cv
44.95 124.048 44.806 124.948 44.806 126.148 cv
44.806 127.348 44.95 128.248 45.262 128.848 cv
45.574 129.448 46.03 129.748 46.642 129.748 cv
47.254 129.748 47.71 129.448 48.022 128.848 cv
48.322 128.248 48.478 127.348 48.478 126.148 cv
48.478 124.948 48.322 124.048 48.022 123.448 cv
47.71 122.848 47.254 122.548 46.642 122.548 cv
46.642 121.612 mo
47.614 121.612 48.358 122.008 48.886 122.776 cv
49.402 123.556 49.666 124.684 49.666 126.148 cv
49.666 127.624 49.402 128.752 48.886 129.52 cv
48.358 130.288 47.614 130.672 46.642 130.672 cv
45.658 130.672 44.902 130.288 44.386 129.52 cv
43.87 128.752 43.618 127.624 43.618 126.148 cv
43.618 124.684 43.87 123.556 44.386 122.776 cv
44.902 122.008 45.658 121.612 46.642 121.612 cv
f
52.812 94.7623 mo
56.812 94.7623 li
f
52.812 94.7623 mo
56.812 94.7623 li
@
29.866 97.0788 mo
33.994 97.0788 li
33.994 98.0748 li
28.438 98.0748 li
28.438 97.0788 li
28.882 96.6228 29.494 95.9988 30.274 95.2068 cv
31.042 94.4268 31.534 93.9228 31.738 93.6948 cv
32.122 93.2748 32.386 92.9148 32.53 92.6148 cv
32.674 92.3268 32.758 92.0268 32.758 91.7388 cv
32.758 91.2828 32.59 90.8988 32.266 90.6108 cv
31.942 90.3228 31.522 90.1668 30.994 90.1668 cv
30.622 90.1668 30.226 90.2388 29.818 90.3588 cv
29.41 90.4908 28.966 90.6828 28.498 90.9468 cv
28.498 89.7468 li
28.978 89.5548 29.422 89.4108 29.83 89.3148 cv
30.238 89.2188 30.622 89.1708 30.97 89.1708 cv
31.87 89.1708 32.59 89.3988 33.13 89.8548 cv
33.67 90.3108 33.946 90.9108 33.946 91.6668 cv
33.946 92.0268 33.874 92.3748 33.742 92.6868 cv
33.61 93.0108 33.37 93.3948 33.01 93.8268 cv
32.914 93.9468 32.602 94.2708 32.074 94.8108 cv
31.546 95.3508 30.814 96.1068 29.866 97.0788 cv
f
36.49 89.3268 mo
41.134 89.3268 li
41.134 90.3228 li
37.57 90.3228 li
37.57 92.4708 li
37.738 92.4108 37.918 92.3628 38.086 92.3388 cv
38.254 92.3148 38.434 92.2908 38.602 92.2908 cv
39.574 92.2908 40.342 92.5668 40.918 93.0948 cv
41.494 93.6348 41.782 94.3548 41.782 95.2668 cv
41.782 96.2148 41.482 96.9468 40.894 97.4628 cv
40.306 97.9788 39.478 98.2308 38.422 98.2308 cv
38.05 98.2308 37.678 98.1948 37.294 98.1468 cv
36.91 98.0868 36.526 98.0028 36.118 97.8708 cv
36.118 96.6828 li
36.466 96.8748 36.826 97.0188 37.21 97.1148 cv
37.582 97.2108 37.978 97.2468 38.398 97.2468 cv
39.07 97.2468 39.61 97.0788 40.006 96.7188 cv
40.39 96.3588 40.594 95.8788 40.594 95.2668 cv
40.594 94.6668 40.39 94.1868 40.006 93.8268 cv
39.61 93.4668 39.07 93.2868 38.398 93.2868 cv
38.086 93.2868 37.762 93.3228 37.45 93.3948 cv
37.138 93.4668 36.814 93.5748 36.49 93.7188 cv
36.49 89.3268 li
f
46.642 90.1068 mo
46.03 90.1068 45.574 90.4068 45.262 91.0068 cv
44.95 91.6068 44.806 92.5068 44.806 93.7068 cv
44.806 94.9068 44.95 95.8068 45.262 96.4068 cv
45.574 97.0068 46.03 97.3068 46.642 97.3068 cv
47.254 97.3068 47.71 97.0068 48.022 96.4068 cv
48.322 95.8068 48.478 94.9068 48.478 93.7068 cv
48.478 92.5068 48.322 91.6068 48.022 91.0068 cv
47.71 90.4068 47.254 90.1068 46.642 90.1068 cv
46.642 89.1708 mo
47.614 89.1708 48.358 89.5668 48.886 90.3348 cv
49.402 91.1148 49.666 92.2428 49.666 93.7068 cv
49.666 95.1828 49.402 96.3108 48.886 97.0788 cv
48.358 97.8468 47.614 98.2308 46.642 98.2308 cv
45.658 98.2308 44.902 97.8468 44.386 97.0788 cv
43.87 96.3108 43.618 95.1828 43.618 93.7068 cv
43.618 92.2428 43.87 91.1148 44.386 90.3348 cv
44.902 89.5668 45.658 89.1708 46.642 89.1708 cv
f
52.812 62.3211 mo
56.812 62.3211 li
f
52.812 62.3211 mo
56.812 62.3211 li
@
32.4809 60.9176 mo
33.0449 61.0376 33.4889 61.2896 33.8009 61.6736 cv
34.1129 62.0576 34.2809 62.5376 34.2809 63.0896 cv
34.2809 63.9536 33.9809 64.6256 33.3929 65.0936 cv
32.7929 65.5616 31.9529 65.7896 30.8609 65.7896 cv
30.4889 65.7896 30.1049 65.7536 29.7209 65.6816 cv
29.3369 65.6216 28.9289 65.5136 28.5209 65.3696 cv
28.5209 64.2296 li
28.8449 64.4216 29.2049 64.5656 29.6009 64.6616 cv
29.9849 64.7576 30.3929 64.8056 30.8249 64.8056 cv
31.5689 64.8056 32.1329 64.6616 32.5169 64.3736 cv
32.9009 64.0856 33.1049 63.6536 33.1049 63.0896 cv
33.1049 62.5856 32.9249 62.1776 32.5649 61.8896 cv
32.2049 61.6016 31.7009 61.4456 31.0529 61.4456 cv
30.0329 61.4456 li
30.0329 60.4736 li
31.1009 60.4736 li
31.6769 60.4736 32.1209 60.3656 32.4329 60.1256 cv
32.7449 59.8976 32.9009 59.5616 32.9009 59.1176 cv
32.9009 58.6736 32.7329 58.3256 32.4209 58.0856 cv
32.0969 57.8456 31.6409 57.7256 31.0529 57.7256 cv
30.7289 57.7256 30.3809 57.7616 30.0089 57.8336 cv
29.6369 57.9056 29.2289 58.0136 28.7849 58.1576 cv
28.7849 57.1016 li
29.2289 56.9816 29.6489 56.8856 30.0449 56.8256 cv
30.4289 56.7656 30.8009 56.7296 31.1609 56.7296 cv
32.0489 56.7296 32.7569 56.9336 33.2849 57.3416 cv
33.8129 57.7496 34.0769 58.3016 34.0769 58.9976 cv
34.0769 59.4776 33.9329 59.8856 33.6569 60.2216 cv
33.3809 60.5576 32.9849 60.7976 32.4809 60.9176 cv
f
39.0569 57.6656 mo
38.4449 57.6656 37.9889 57.9656 37.6769 58.5656 cv
37.3649 59.1656 37.2209 60.0656 37.2209 61.2656 cv
37.2209 62.4656 37.3649 63.3656 37.6769 63.9656 cv
37.9889 64.5656 38.4449 64.8656 39.0569 64.8656 cv
39.6689 64.8656 40.1249 64.5656 40.4369 63.9656 cv
40.7369 63.3656 40.8929 62.4656 40.8929 61.2656 cv
40.8929 60.0656 40.7369 59.1656 40.4369 58.5656 cv
40.1249 57.9656 39.6689 57.6656 39.0569 57.6656 cv
39.0569 56.7296 mo
40.0289 56.7296 40.7729 57.1256 41.3009 57.8936 cv
41.8169 58.6736 42.0809 59.8016 42.0809 61.2656 cv
42.0809 62.7416 41.8169 63.8696 41.3009 64.6376 cv
40.7729 65.4056 40.0289 65.7896 39.0569 65.7896 cv
38.0729 65.7896 37.3169 65.4056 36.8009 64.6376 cv
36.2849 63.8696 36.0329 62.7416 36.0329 61.2656 cv
36.0329 59.8016 36.2849 58.6736 36.8009 57.8936 cv
37.3169 57.1256 38.0729 56.7296 39.0569 56.7296 cv
f
46.6889 57.6656 mo
46.0769 57.6656 45.6209 57.9656 45.3089 58.5656 cv
44.9969 59.1656 44.8529 60.0656 44.8529 61.2656 cv
44.8529 62.4656 44.9969 63.3656 45.3089 63.9656 cv
45.6209 64.5656 46.0769 64.8656 46.6889 64.8656 cv
47.3009 64.8656 47.7569 64.5656 48.0689 63.9656 cv
48.3689 63.3656 48.5249 62.4656 48.5249 61.2656 cv
48.5249 60.0656 48.3689 59.1656 48.0689 58.5656 cv
47.7569 57.9656 47.3009 57.6656 46.6889 57.6656 cv
46.6889 56.7296 mo
47.6609 56.7296 48.4049 57.1256 48.9329 57.8936 cv
49.4489 58.6736 49.7129 59.8016 49.7129 61.2656 cv
49.7129 62.7416 49.4489 63.8696 48.9329 64.6376 cv
48.4049 65.4056 47.6609 65.7896 46.6889 65.7896 cv
45.7049 65.7896 44.9489 65.4056 44.4329 64.6376 cv
43.9169 63.8696 43.6649 62.7416 43.6649 61.2656 cv
43.6649 59.8016 43.9169 58.6736 44.4329 57.8936 cv
44.9489 57.1256 45.7049 56.7296 46.6889 56.7296 cv
f
52.812 29.88 mo
56.812 29.88 li
f
52.812 29.88 mo
56.812 29.88 li
@
32.4809 28.4765 mo
33.0449 28.5965 33.4889 28.8485 33.8009 29.2325 cv
34.1129 29.6165 34.2809 30.0965 34.2809 30.6485 cv
34.2809 31.5125 33.9809 32.1845 33.3929 32.6525 cv
32.7929 33.1205 31.9529 33.3485 30.8609 33.3485 cv
30.4889 33.3485 30.1049 33.3125 29.7209 33.2405 cv
29.3369 33.1805 28.9289 33.0725 28.5209 32.9285 cv
28.5209 31.7885 li
28.8449 31.9805 29.2049 32.1245 29.6009 32.2205 cv
29.9849 32.3165 30.3929 32.3645 30.8249 32.3645 cv
31.5689 32.3645 32.1329 32.2205 32.5169 31.9325 cv
32.9009 31.6445 33.1049 31.2125 33.1049 30.6485 cv
33.1049 30.1445 32.9249 29.7365 32.5649 29.4485 cv
32.2049 29.1605 31.7009 29.0045 31.0529 29.0045 cv
30.0329 29.0045 li
30.0329 28.0325 li
31.1009 28.0325 li
31.6769 28.0325 32.1209 27.9245 32.4329 27.6845 cv
32.7449 27.4565 32.9009 27.1205 32.9009 26.6765 cv
32.9009 26.2325 32.7329 25.8845 32.4209 25.6445 cv
32.0969 25.4045 31.6409 25.2845 31.0529 25.2845 cv
30.7289 25.2845 30.3809 25.3205 30.0089 25.3925 cv
29.6369 25.4645 29.2289 25.5725 28.7849 25.7165 cv
28.7849 24.6605 li
29.2289 24.5405 29.6489 24.4445 30.0449 24.3845 cv
30.4289 24.3245 30.8009 24.2885 31.1609 24.2885 cv
32.0489 24.2885 32.7569 24.4925 33.2849 24.9005 cv
33.8129 25.3085 34.0769 25.8605 34.0769 26.5565 cv
34.0769 27.0365 33.9329 27.4445 33.6569 27.7805 cv
33.3809 28.1165 32.9849 28.3565 32.4809 28.4765 cv
f
36.5369 24.4445 mo
41.1809 24.4445 li
41.1809 25.4405 li
37.6169 25.4405 li
37.6169 27.5885 li
37.7849 27.5285 37.9649 27.4805 38.1329 27.4565 cv
38.3009 27.4325 38.4809 27.4085 38.6489 27.4085 cv
39.6209 27.4085 40.3889 27.6845 40.9649 28.2125 cv
41.5409 28.7525 41.8289 29.4725 41.8289 30.3845 cv
41.8289 31.3325 41.5289 32.0645 40.9409 32.5805 cv
40.3529 33.0965 39.5249 33.3485 38.4689 33.3485 cv
38.0969 33.3485 37.7249 33.3125 37.3409 33.2645 cv
36.9569 33.2045 36.5729 33.1205 36.1649 32.9885 cv
36.1649 31.8005 li
36.5129 31.9925 36.8729 32.1365 37.2569 32.2325 cv
37.6289 32.3285 38.0249 32.3645 38.4449 32.3645 cv
39.1169 32.3645 39.6569 32.1965 40.0529 31.8365 cv
40.4369 31.4765 40.6409 30.9965 40.6409 30.3845 cv
40.6409 29.7845 40.4369 29.3045 40.0529 28.9445 cv
39.6569 28.5845 39.1169 28.4045 38.4449 28.4045 cv
38.1329 28.4045 37.8089 28.4405 37.4969 28.5125 cv
37.1849 28.5845 36.8609 28.6925 36.5369 28.8365 cv
36.5369 24.4445 li
f
46.6889 25.2245 mo
46.0769 25.2245 45.6209 25.5245 45.3089 26.1245 cv
44.9969 26.7245 44.8529 27.6245 44.8529 28.8245 cv
44.8529 30.0245 44.9969 30.9245 45.3089 31.5245 cv
45.6209 32.1245 46.0769 32.4245 46.6889 32.4245 cv
47.3009 32.4245 47.7569 32.1245 48.0689 31.5245 cv
48.3689 30.9245 48.5249 30.0245 48.5249 28.8245 cv
48.5249 27.6245 48.3689 26.7245 48.0689 26.1245 cv
47.7569 25.5245 47.3009 25.2245 46.6889 25.2245 cv
46.6889 24.2885 mo
47.6609 24.2885 48.4049 24.6845 48.9329 25.4525 cv
49.4489 26.2325 49.7129 27.3605 49.7129 28.8245 cv
49.7129 30.3005 49.4489 31.4285 48.9329 32.1965 cv
48.4049 32.9645 47.6609 33.3485 46.6889 33.3485 cv
45.7049 33.3485 44.9489 32.9645 44.4329 32.1965 cv
43.9169 31.4285 43.6649 30.3005 43.6649 28.8245 cv
43.6649 27.3605 43.9169 26.2325 44.4329 25.4525 cv
44.9489 24.6845 45.7049 24.2885 46.6889 24.2885 cv
f
18.8267 201 mo
18.7188 200.988 li
15.1427 200.088 li
14.9268 200.04 14.7227 200.004 14.5548 200.004 cv
14.2188 200.004 14.0387 200.124 14.0387 200.352 cv
14.0387 200.604 14.1947 200.796 14.4948 200.916 cv
14.7948 201.036 15.1667 201.156 15.6228 201.264 cv
15.6828 201.3 li
15.6947 201.36 li
15.6947 201.504 li
15.6588 201.576 li
15.5747 201.6 li
15.2268 201.516 14.9268 201.432 14.6868 201.348 cv
14.4468 201.276 14.2308 201.144 14.0268 200.976 cv
13.8348 200.808 13.7268 200.604 13.7268 200.34 cv
13.7268 200.052 13.8228 199.788 14.0147 199.548 cv
14.2068 199.32 14.4468 199.2 14.7348 199.2 cv
14.4228 198.96 14.1828 198.684 14.0028 198.36 cv
13.8228 198.048 13.7268 197.7 13.7268 197.34 cv
13.7268 197.064 13.7868 196.824 13.8827 196.608 cv
13.9788 196.404 14.1348 196.248 14.3267 196.128 cv
14.5188 196.008 14.7588 195.948 15.0228 195.948 cv
15.3588 195.948 15.7548 196.032 16.2108 196.176 cv
16.6788 196.32 17.1947 196.5 17.7708 196.716 cv
18.0347 196.836 18.2747 196.884 18.4907 196.884 cv
18.7308 196.884 18.8507 196.8 18.8507 196.608 cv
18.8507 196.296 18.6828 196.044 18.3468 195.828 cv
18.0107 195.624 17.6508 195.48 17.2668 195.384 cv
17.1947 195.288 li
17.1947 195.144 li
17.2308 195.072 li
17.3027 195.036 li
17.3388 195.048 li
17.7948 195.156 18.2148 195.348 18.5868 195.612 cv
18.9708 195.888 19.1508 196.224 19.1508 196.632 cv
19.1508 196.92 19.0548 197.16 18.8748 197.352 cv
18.6828 197.556 18.4548 197.652 18.1667 197.652 cv
18.0228 197.652 17.8668 197.628 17.6987 197.556 cv
17.4347 197.46 17.1227 197.352 16.7628 197.22 cv
16.4028 197.088 16.0667 196.98 15.7308 196.896 cv
15.3948 196.812 15.1068 196.764 14.8428 196.764 cv
14.6268 196.764 14.4347 196.812 14.2788 196.908 cv
14.1228 197.004 14.0387 197.148 14.0387 197.364 cv
14.0387 197.664 14.1108 197.94 14.2308 198.18 cv
14.3628 198.42 14.5308 198.636 14.7467 198.816 cv
14.9628 199.008 15.2148 199.176 15.5028 199.32 cv
18.7668 200.136 li
18.8868 200.16 18.9708 200.22 19.0427 200.316 cv
19.1147 200.412 19.1508 200.52 19.1508 200.64 cv
19.1508 200.736 19.1147 200.82 19.0667 200.892 cv
19.0188 200.964 18.9347 201 18.8267 201 cv
f
17.7227 193.451 mo
17.4587 193.451 17.1947 193.415 16.9188 193.343 cv
16.6548 193.271 16.3428 193.175 16.0068 193.055 cv
15.6707 192.935 15.3708 192.815 15.1188 192.719 cv
14.8308 192.623 14.5907 192.563 14.3988 192.563 cv
14.1588 192.563 14.0387 192.659 14.0387 192.827 cv
14.0387 193.139 14.2068 193.403 14.5308 193.607 cv
14.8668 193.823 15.2268 193.967 15.6228 194.063 cv
15.6947 194.159 li
15.6947 194.303 li
15.5868 194.399 li
15.5508 194.399 li
15.0708 194.279 14.6508 194.075 14.2788 193.811 cv
13.9188 193.547 13.7268 193.211 13.7268 192.803 cv
13.7268 192.515 13.8228 192.275 14.0147 192.083 cv
14.2068 191.891 14.4347 191.783 14.7227 191.783 cv
14.8787 191.783 15.0347 191.819 15.1908 191.879 cv
15.2868 191.927 15.5028 192.011 15.8267 192.131 cv
16.1628 192.251 16.4268 192.347 16.6427 192.407 cv
16.8587 192.479 17.0748 192.527 17.2787 192.575 cv
17.4948 192.623 17.6987 192.635 17.9028 192.635 cv
18.1667 192.635 18.3948 192.587 18.5748 192.467 cv
18.7668 192.359 18.8507 192.179 18.8507 191.915 cv
18.8507 191.411 18.5387 190.955 17.9028 190.571 cv
17.8188 190.547 li
17.7227 190.535 li
14.2428 189.671 li
14.1468 189.647 14.0508 189.587 13.9788 189.491 cv
13.9067 189.395 13.8588 189.287 13.8588 189.167 cv
13.8588 189.071 13.8948 188.987 13.9548 188.915 cv
14.0147 188.843 14.0988 188.807 14.1947 188.807 cv
14.2908 188.819 li
17.7467 189.683 li
17.9867 189.743 18.1908 189.767 18.3348 189.767 cv
18.6828 189.767 18.8507 189.659 18.8507 189.419 cv
18.8507 189.167 18.6947 188.975 18.3708 188.843 cv
18.0588 188.723 17.6868 188.615 17.2668 188.519 cv
17.1947 188.423 li
17.1947 188.279 li
17.2428 188.207 li
17.3148 188.171 li
17.6628 188.267 17.9627 188.351 18.2028 188.423 cv
18.4428 188.507 18.6707 188.639 18.8628 188.807 cv
19.0548 188.975 19.1508 189.191 19.1508 189.443 cv
19.1508 189.707 19.0788 189.935 18.9587 190.127 cv
18.8267 190.331 18.6348 190.463 18.3948 190.535 cv
18.6348 190.727 18.8148 190.931 18.9468 191.171 cv
19.0788 191.411 19.1508 191.675 19.1508 191.939 cv
19.1508 192.407 19.0308 192.779 18.7787 193.043 cv
18.5387 193.319 18.1788 193.451 17.7227 193.451 cv
f
18.8267 186.937 mo
18.7188 186.925 li
15.1427 186.025 li
14.9268 185.977 14.7227 185.941 14.5548 185.941 cv
14.2188 185.941 14.0387 186.061 14.0387 186.289 cv
14.0387 186.541 14.1947 186.733 14.4948 186.853 cv
14.7948 186.973 15.1667 187.093 15.6228 187.201 cv
15.6828 187.237 li
15.6947 187.297 li
15.6947 187.441 li
15.6588 187.513 li
15.5747 187.537 li
15.2268 187.453 14.9268 187.369 14.6868 187.285 cv
14.4468 187.213 14.2308 187.081 14.0268 186.913 cv
13.8348 186.745 13.7268 186.541 13.7268 186.277 cv
13.7268 185.989 13.8228 185.725 14.0147 185.485 cv
14.2068 185.257 14.4468 185.137 14.7348 185.137 cv
14.4228 184.897 14.1828 184.621 14.0028 184.297 cv
13.8228 183.985 13.7268 183.637 13.7268 183.277 cv
13.7268 182.905 13.8228 182.581 14.0147 182.305 cv
14.2068 182.029 14.4827 181.885 14.8428 181.885 cv
14.4948 181.645 14.2188 181.357 14.0268 181.021 cv
13.8348 180.697 13.7268 180.337 13.7268 179.941 cv
13.7268 179.533 13.8468 179.197 14.0627 178.945 cv
14.2908 178.693 14.6147 178.561 15.0228 178.561 cv
15.3588 178.561 15.7548 178.645 16.2108 178.789 cv
16.6788 178.933 17.1947 179.113 17.7708 179.329 cv
18.0588 179.449 18.2987 179.497 18.4907 179.497 cv
18.7308 179.497 18.8507 179.413 18.8507 179.221 cv
18.8507 178.909 18.6828 178.657 18.3468 178.441 cv
18.0107 178.237 17.6508 178.093 17.2668 177.997 cv
17.1947 177.901 li
17.1947 177.757 li
17.2308 177.685 li
17.3027 177.649 li
17.3388 177.661 li
17.7948 177.781 18.2148 177.973 18.5868 178.237 cv
18.9708 178.501 19.1508 178.837 19.1508 179.245 cv
19.1508 179.533 19.0548 179.773 18.8748 179.965 cv
18.6828 180.169 18.4548 180.265 18.1667 180.265 cv
18.0347 180.265 17.8787 180.241 17.6987 180.169 cv
17.0988 179.953 16.5708 179.761 16.0907 179.605 cv
15.6228 179.461 15.2028 179.377 14.8428 179.377 cv
14.6268 179.377 14.4347 179.425 14.2788 179.509 cv
14.1228 179.605 14.0387 179.749 14.0387 179.965 cv
14.0387 180.397 14.1828 180.781 14.4468 181.105 cv
14.7108 181.429 15.0708 181.705 15.5028 181.933 cv
15.6828 181.969 li
18.7668 182.737 li
18.8868 182.773 18.9708 182.833 19.0427 182.929 cv
19.1147 183.025 19.1508 183.133 19.1508 183.241 cv
19.1508 183.337 19.1147 183.421 19.0667 183.493 cv
19.0188 183.565 18.9347 183.601 18.8267 183.601 cv
18.7188 183.589 li
15.6588 182.821 li
15.3348 182.749 15.0588 182.701 14.8428 182.701 cv
14.6268 182.701 14.4347 182.749 14.2788 182.845 cv
14.1228 182.941 14.0387 183.085 14.0387 183.301 cv
14.0387 183.601 14.1108 183.877 14.2308 184.117 cv
14.3628 184.357 14.5308 184.573 14.7467 184.753 cv
14.9628 184.945 15.2148 185.113 15.5028 185.257 cv
18.7668 186.073 li
18.8868 186.097 18.9708 186.157 19.0427 186.253 cv
19.1147 186.349 19.1508 186.457 19.1508 186.577 cv
19.1508 186.673 19.1147 186.757 19.0667 186.829 cv
19.0188 186.901 18.9347 186.937 18.8267 186.937 cv
f
19.1508 175.25 mo
19.1508 175.742 18.9708 176.126 18.5988 176.39 cv
18.2267 176.654 17.7828 176.786 17.2668 176.786 cv
17.1947 176.786 17.0508 176.774 16.8348 176.738 cv
16.6187 176.702 16.4867 176.678 16.4268 176.678 cv
11.7708 175.514 li
11.6388 175.49 11.5308 175.466 11.4468 175.454 cv
11.3267 175.454 11.2548 175.718 11.2548 176.234 cv
11.2548 176.318 11.2068 176.354 11.0988 176.354 cv
10.9908 176.33 li
10.8828 176.282 li
10.8348 176.186 li
10.7028 174.566 li
10.7028 174.47 10.7628 174.422 10.8588 174.422 cv
14.3988 175.31 li
13.9548 174.854 13.7268 174.398 13.7268 173.942 cv
13.7268 173.606 13.8228 173.306 14.0028 173.066 cv
14.1828 172.826 14.4228 172.634 14.7108 172.514 cv
14.9988 172.394 15.3108 172.334 15.6468 172.334 cv
16.0308 172.334 16.4388 172.418 16.8468 172.562 cv
17.2547 172.718 17.6388 172.922 17.9988 173.186 cv
18.3587 173.45 18.6348 173.762 18.8388 174.122 cv
19.0427 174.482 19.1508 174.854 19.1508 175.25 cv
18.8507 175.226 mo
18.8507 174.962 18.7428 174.698 18.5147 174.458 cv
18.2868 174.218 18.0228 174.026 17.7348 173.882 cv
17.4228 173.726 16.9907 173.582 16.4388 173.438 cv
15.8868 173.294 15.4548 173.222 15.1188 173.222 cv
14.8308 173.222 14.5788 173.282 14.3628 173.402 cv
14.1468 173.522 14.0387 173.714 14.0387 173.966 cv
14.0387 174.254 14.1468 174.53 14.3628 174.794 cv
14.5788 175.058 14.8308 175.298 15.1188 175.49 cv
16.4748 175.826 li
16.9788 175.958 17.3867 176.03 17.6868 176.03 cv
17.9988 176.03 18.2628 175.97 18.5028 175.838 cv
18.7428 175.706 18.8507 175.502 18.8507 175.226 cv
f
19.1508 169.764 mo
19.1508 170.148 19.0548 170.484 18.8628 170.772 cv
18.6707 171.06 18.3948 171.276 18.0588 171.42 cv
17.7227 171.576 17.3748 171.648 16.9907 171.648 cv
16.4268 171.648 15.8868 171.504 15.3828 171.216 cv
14.8787 170.928 14.4827 170.544 14.1828 170.052 cv
13.8827 169.56 13.7268 169.032 13.7268 168.468 cv
13.7268 168.132 13.8228 167.832 14.0028 167.568 cv
14.1828 167.316 14.4347 167.184 14.7588 167.184 cv
15.2268 167.184 15.5747 167.376 15.7908 167.736 cv
16.0187 168.108 16.1628 168.528 16.2108 168.984 cv
16.2588 169.44 16.2828 169.956 16.2828 170.508 cv
16.2828 170.544 li
16.7628 170.676 17.1707 170.736 17.5068 170.736 cv
17.8668 170.736 18.1788 170.664 18.4428 170.496 cv
18.7188 170.328 18.8507 170.076 18.8507 169.74 cv
18.8507 169.26 18.7428 168.804 18.5268 168.36 cv
18.3108 167.928 17.9988 167.568 17.6147 167.292 cv
17.5788 167.196 li
17.6508 167.076 li
17.7708 167.016 li
17.8428 167.04 li
18.2507 167.328 18.5748 167.724 18.8027 168.216 cv
19.0308 168.72 19.1508 169.236 19.1508 169.764 cv
15.9708 170.472 mo
15.9708 170.016 15.9587 169.584 15.9108 169.188 cv
15.8628 168.792 15.7548 168.432 15.5868 168.108 cv
15.4188 167.796 15.1427 167.628 14.7708 167.628 cv
14.6268 167.628 14.4948 167.676 14.3868 167.76 cv
14.2788 167.844 14.1947 167.952 14.1348 168.072 cv
14.0748 168.204 14.0387 168.336 14.0387 168.48 cv
14.0387 168.816 14.1348 169.128 14.3148 169.392 cv
14.5068 169.668 14.7467 169.896 15.0347 170.064 cv
15.3348 170.244 15.6468 170.376 15.9708 170.472 cv
f
18.8267 165.674 mo
18.7188 165.662 li
15.1427 164.762 li
14.9268 164.714 14.7227 164.678 14.5548 164.678 cv
14.2188 164.678 14.0387 164.798 14.0387 165.026 cv
14.0387 165.278 14.1947 165.47 14.4948 165.59 cv
14.7948 165.71 15.1667 165.83 15.6228 165.938 cv
15.6828 165.974 li
15.6947 166.034 li
15.6947 166.178 li
15.6588 166.25 li
15.5747 166.274 li
15.2268 166.19 14.9268 166.106 14.6868 166.022 cv
14.4468 165.95 14.2308 165.818 14.0268 165.65 cv
13.8348 165.482 13.7268 165.278 13.7268 165.014 cv
13.7268 164.738 13.8108 164.498 13.9668 164.282 cv
14.1348 164.078 14.3388 163.946 14.6028 163.898 cv
14.3388 163.706 14.1348 163.478 13.9668 163.214 cv
13.8108 162.95 13.7268 162.662 13.7268 162.35 cv
13.7268 162.098 13.8108 161.87 13.9548 161.678 cv
14.0988 161.486 14.3027 161.39 14.5548 161.39 cv
14.7588 161.39 14.9388 161.462 15.0828 161.582 cv
15.2388 161.714 15.3108 161.882 15.3108 162.086 cv
15.3108 162.218 15.2747 162.326 15.1908 162.41 cv
15.1188 162.506 15.0107 162.542 14.8787 162.542 cv
14.7108 162.542 14.5548 162.482 14.4108 162.35 cv
14.2668 162.23 14.1947 162.074 14.1947 161.906 cv
14.0988 162.038 14.0387 162.194 14.0387 162.374 cv
14.0387 162.722 14.1707 163.022 14.4108 163.274 cv
14.6508 163.526 14.9628 163.754 15.3348 163.958 cv
18.7668 164.81 li
18.8868 164.834 18.9708 164.894 19.0427 164.99 cv
19.1147 165.086 19.1508 165.194 19.1508 165.314 cv
19.1508 165.41 19.1147 165.494 19.0667 165.566 cv
19.0188 165.638 18.9347 165.674 18.8267 165.674 cv
f
19.1508 155.611 mo
19.1508 155.995 19.0548 156.331 18.8868 156.619 cv
18.7188 156.919 18.4788 157.147 18.1667 157.303 cv
17.8668 157.471 17.5188 157.543 17.1348 157.543 cv
16.5947 157.543 16.0548 157.399 15.5268 157.087 cv
14.9988 156.787 14.5667 156.391 14.2308 155.887 cv
13.8948 155.383 13.7268 154.855 13.7268 154.303 cv
13.7268 154.015 13.7868 153.751 13.8827 153.511 cv
13.9788 153.283 14.1228 153.079 14.3027 152.911 cv
14.4948 152.743 14.7108 152.611 14.9508 152.515 cv
15.2028 152.419 15.4668 152.371 15.7548 152.371 cv
16.1748 152.371 16.5828 152.467 16.9907 152.635 cv
17.3988 152.815 17.7588 153.055 18.0947 153.355 cv
18.4307 153.667 18.6828 154.015 18.8748 154.411 cv
19.0548 154.807 19.1508 155.203 19.1508 155.611 cv
18.8507 155.587 mo
18.8507 155.227 18.7308 154.903 18.4907 154.615 cv
18.2507 154.327 17.9388 154.075 17.5667 153.883 cv
17.2068 153.691 16.8108 153.547 16.4028 153.451 cv
15.9948 153.355 15.6228 153.295 15.2868 153.295 cv
14.9508 153.295 14.6508 153.391 14.4108 153.559 cv
14.1707 153.727 14.0387 153.991 14.0387 154.327 cv
14.0387 154.795 14.2428 155.203 14.6388 155.551 cv
15.0468 155.911 15.5268 156.175 16.0788 156.355 cv
16.6308 156.535 17.1467 156.619 17.6028 156.619 cv
17.9508 156.619 18.2507 156.535 18.4907 156.355 cv
18.7308 156.175 18.8507 155.923 18.8507 155.587 cv
f
20.9988 151.053 mo
21.1068 150.909 21.1667 150.729 21.1667 150.513 cv
21.1667 150.225 20.8428 149.997 20.2188 149.817 cv
19.9067 149.745 18.9228 149.541 17.2188 149.205 cv
14.2788 148.653 li
14.2788 149.685 li
14.2788 149.769 14.2308 149.805 14.1228 149.805 cv
13.9548 149.781 13.8588 149.721 13.8588 149.649 cv
13.8588 148.581 li
13.0788 148.437 li
12.8388 148.389 12.6348 148.353 12.4548 148.305 cv
12.2868 148.269 12.1187 148.233 11.9748 148.185 cv
11.8307 148.137 11.6628 148.077 11.4708 147.981 cv
11.2068 147.849 10.9908 147.669 10.8228 147.429 cv
10.6547 147.201 10.5708 146.949 10.5708 146.673 cv
10.5708 146.505 10.6068 146.337 10.6667 146.169 cv
10.7388 146.001 10.8348 145.869 10.9548 145.761 cv
11.0868 145.653 11.2428 145.593 11.4108 145.593 cv
11.6267 145.593 11.8068 145.665 11.9508 145.797 cv
12.0948 145.941 12.1667 146.097 12.1667 146.289 cv
12.1667 146.421 12.1308 146.529 12.0468 146.625 cv
11.9748 146.721 11.8668 146.757 11.7348 146.757 cv
11.5667 146.757 11.4108 146.697 11.2788 146.577 cv
11.1467 146.457 11.0748 146.313 11.0508 146.133 cv
10.9427 146.289 10.8828 146.469 10.8828 146.685 cv
10.8828 146.805 10.9427 146.925 11.0508 147.033 cv
11.1707 147.141 11.2908 147.213 11.4108 147.237 cv
11.6267 147.285 12.1788 147.405 13.0667 147.573 cv
13.8588 147.717 li
13.8588 146.481 li
13.8588 146.409 13.9188 146.361 14.0147 146.361 cv
14.1228 146.397 li
14.2428 146.445 li
14.2788 146.517 li
14.2788 147.801 li
17.2068 148.353 li
17.6388 148.425 18.0708 148.509 18.5028 148.605 cv
18.9347 148.701 19.3787 148.821 19.8468 148.989 cv
20.3027 149.157 20.6987 149.361 21.0107 149.625 cv
21.3228 149.889 21.4788 150.189 21.4788 150.537 cv
21.4788 150.813 21.3948 151.053 21.2507 151.269 cv
21.0947 151.485 20.8908 151.581 20.6388 151.581 cv
20.4228 151.581 20.2428 151.521 20.0988 151.389 cv
19.9548 151.257 19.8827 151.089 19.8827 150.885 cv
19.8827 150.765 19.9188 150.657 20.0028 150.561 cv
20.0748 150.465 20.1828 150.417 20.3148 150.417 cv
20.4827 150.417 20.6388 150.489 20.7828 150.609 cv
20.9268 150.741 20.9988 150.885 20.9988 151.053 cv
f
18.8748 142.639 mo
18.7668 142.615 li
18.6588 142.567 li
18.6108 142.471 li
18.6108 141.787 18.5988 141.331 18.5508 141.103 cv
18.5028 140.887 18.3827 140.767 18.2028 140.719 cv
11.6147 139.075 li
11.5188 139.051 11.4347 139.027 11.3507 139.027 cv
11.2908 139.027 11.2548 139.171 11.2548 139.447 cv
11.2548 140.143 li
11.2548 140.683 11.3388 141.103 11.5068 141.391 cv
11.6748 141.679 11.8908 141.895 12.1548 142.027 cv
12.4188 142.171 12.8628 142.339 13.4748 142.555 cv
13.5828 142.675 li
13.5828 142.783 li
13.5828 142.867 13.5347 142.903 13.4268 142.903 cv
10.9427 142.051 li
10.8348 141.931 li
10.8348 134.839 li
10.8348 134.767 10.8948 134.719 10.9908 134.719 cv
13.4748 135.115 li
13.5468 135.163 li
13.5828 135.235 li
13.5828 135.343 li
13.5828 135.427 13.5347 135.463 13.4268 135.463 cv
12.8628 135.379 12.4668 135.331 12.2268 135.331 cv
11.9508 135.331 11.7348 135.391 11.5907 135.511 cv
11.4468 135.631 11.3628 135.787 11.3148 135.967 cv
11.2788 136.159 11.2548 136.399 11.2548 136.699 cv
11.2548 137.407 li
11.2548 137.623 11.2788 137.767 11.3148 137.839 cv
11.3628 137.911 11.4708 137.983 11.6628 138.031 cv
18.2507 139.675 li
18.2987 139.687 li
18.3587 139.699 li
18.4668 139.699 18.5268 139.639 18.5508 139.519 cv
18.5988 139.315 18.6108 138.871 18.6108 138.187 cv
18.6108 138.115 18.6707 138.067 18.7668 138.067 cv
18.8868 138.103 18.9587 138.127 18.9827 138.139 cv
19.0308 138.271 li
19.0308 142.519 li
19.0308 142.603 18.9827 142.639 18.8748 142.639 cv
f
19.1508 133.771 mo
19.1508 134.155 19.0548 134.491 18.8628 134.779 cv
18.6707 135.067 18.3948 135.283 18.0588 135.427 cv
17.7227 135.583 17.3748 135.655 16.9907 135.655 cv
16.4268 135.655 15.8868 135.511 15.3828 135.223 cv
14.8787 134.935 14.4827 134.551 14.1828 134.059 cv
13.8827 133.567 13.7268 133.039 13.7268 132.475 cv
13.7268 132.139 13.8228 131.839 14.0028 131.575 cv
14.1828 131.323 14.4347 131.191 14.7588 131.191 cv
15.2268 131.191 15.5747 131.383 15.7908 131.743 cv
16.0187 132.115 16.1628 132.535 16.2108 132.991 cv
16.2588 133.447 16.2828 133.963 16.2828 134.515 cv
16.2828 134.551 li
16.7628 134.683 17.1707 134.743 17.5068 134.743 cv
17.8668 134.743 18.1788 134.671 18.4428 134.503 cv
18.7188 134.335 18.8507 134.083 18.8507 133.747 cv
18.8507 133.267 18.7428 132.811 18.5268 132.367 cv
18.3108 131.935 17.9988 131.575 17.6147 131.299 cv
17.5788 131.203 li
17.6508 131.083 li
17.7708 131.023 li
17.8428 131.047 li
18.2507 131.335 18.5748 131.731 18.8027 132.223 cv
19.0308 132.727 19.1508 133.243 19.1508 133.771 cv
15.9708 134.479 mo
15.9708 134.023 15.9587 133.591 15.9108 133.195 cv
15.8628 132.799 15.7548 132.439 15.5868 132.115 cv
15.4188 131.803 15.1427 131.635 14.7708 131.635 cv
14.6268 131.635 14.4948 131.683 14.3868 131.767 cv
14.2788 131.851 14.1947 131.959 14.1348 132.079 cv
14.0748 132.211 14.0387 132.343 14.0387 132.487 cv
14.0387 132.823 14.1348 133.135 14.3148 133.399 cv
14.5068 133.675 14.7467 133.903 15.0347 134.071 cv
15.3348 134.251 15.6468 134.383 15.9708 134.479 cv
f
18.2987 129.561 mo
18.6707 129.345 18.8507 128.913 18.8507 128.265 cv
18.8507 127.989 18.8027 127.725 18.7068 127.473 cv
18.6108 127.221 18.4668 127.005 18.2747 126.837 cv
18.0828 126.669 17.8547 126.585 17.5788 126.585 cv
17.3748 126.585 17.2068 126.669 17.0748 126.813 cv
16.9428 126.957 16.8468 127.137 16.7987 127.353 cv
16.6667 128.001 li
16.5947 128.301 16.4627 128.541 16.2588 128.733 cv
16.0548 128.925 15.8028 129.021 15.5148 129.021 cv
15.1667 129.021 14.8547 128.925 14.5788 128.733 cv
14.3027 128.541 14.0868 128.289 13.9428 127.977 cv
13.7987 127.665 13.7268 127.329 13.7268 126.981 cv
13.7268 126.621 13.8228 126.297 13.9908 126.009 cv
14.1707 125.721 14.4228 125.577 14.7588 125.577 cv
14.9508 125.577 15.1068 125.637 15.2508 125.733 cv
15.3948 125.841 15.4548 125.985 15.4548 126.165 cv
15.4548 126.273 15.4307 126.369 15.3588 126.441 cv
15.2868 126.513 15.2028 126.549 15.0948 126.549 cv
14.9988 126.549 14.9148 126.525 14.8188 126.477 cv
14.7348 126.429 14.6628 126.357 14.6147 126.261 cv
14.5667 126.177 14.5308 126.081 14.5308 125.985 cv
14.3628 126.057 14.2428 126.189 14.1588 126.381 cv
14.0868 126.573 14.0387 126.789 14.0387 127.005 cv
14.0387 127.221 14.0868 127.425 14.1588 127.617 cv
14.2428 127.821 14.3628 127.989 14.5188 128.109 cv
14.6868 128.229 14.8668 128.289 15.0828 128.289 cv
15.2268 128.289 15.3588 128.241 15.4668 128.145 cv
15.5747 128.049 15.6468 127.917 15.6947 127.761 cv
15.8388 127.065 li
15.8868 126.849 15.9708 126.645 16.0907 126.453 cv
16.2108 126.273 16.3668 126.129 16.5468 126.021 cv
16.7267 125.913 16.9307 125.853 17.1588 125.853 cv
17.4587 125.853 17.7588 125.937 18.0468 126.105 cv
18.3348 126.273 18.5627 126.477 18.7308 126.717 cv
19.0188 127.149 19.1508 127.665 19.1508 128.277 cv
19.1508 128.709 19.0548 129.093 18.8628 129.453 cv
18.6707 129.813 18.3827 129.981 17.9988 129.981 cv
17.7828 129.981 17.6028 129.921 17.4347 129.801 cv
17.2668 129.681 17.1828 129.501 17.1828 129.273 cv
17.1828 129.153 17.2308 129.045 17.3027 128.949 cv
17.3867 128.865 17.4948 128.817 17.6147 128.817 cv
17.8068 128.817 17.9627 128.889 18.0947 129.021 cv
18.2388 129.165 18.2987 129.321 18.2987 129.501 cv
18.2987 129.561 li
f
18.0588 124.248 mo
17.9388 124.248 17.8307 124.236 17.7227 124.212 cv
14.2788 123.348 li
14.2788 124.608 li
14.2788 124.692 14.2308 124.728 14.1228 124.728 cv
13.9548 124.704 13.8588 124.644 13.8588 124.572 cv
13.8588 123.24 li
11.9028 122.76 li
11.8068 122.736 11.7108 122.676 11.6388 122.58 cv
11.5667 122.484 11.5188 122.376 11.5188 122.256 cv
11.5188 122.16 11.5548 122.076 11.6147 122.004 cv
11.6748 121.932 11.7588 121.896 11.8547 121.896 cv
11.9148 121.908 li
11.9508 121.908 li
13.8588 122.388 li
13.8588 121.152 li
13.8588 121.08 13.9188 121.032 14.0147 121.032 cv
14.1108 121.056 li
14.2308 121.104 li
14.2788 121.188 li
14.2788 122.496 li
17.7467 123.36 li
17.9748 123.42 18.1667 123.444 18.3348 123.444 cv
18.6828 123.444 18.8507 123.336 18.8507 123.096 cv
18.8507 122.748 18.6947 122.436 18.3587 122.16 cv
18.0228 121.896 17.6628 121.68 17.2668 121.536 cv
17.1947 121.44 li
17.1947 121.296 li
17.2308 121.224 li
17.3027 121.188 li
17.3388 121.2 li
17.8188 121.38 18.2507 121.632 18.6108 121.968 cv
18.9708 122.304 19.1508 122.688 19.1508 123.12 cv
19.1508 123.444 19.0427 123.708 18.8507 123.924 cv
18.6467 124.14 18.3827 124.248 18.0588 124.248 cv
f
16.4388 115.749 mo
16.9188 115.749 17.3507 115.665 17.7108 115.473 cv
18.0828 115.293 18.3708 115.029 18.5748 114.669 cv
18.7787 114.309 18.8748 113.889 18.8748 113.409 cv
18.8748 112.905 18.7548 112.425 18.4907 111.957 cv
18.2267 111.489 17.8787 111.093 17.4468 110.757 cv
17.0147 110.433 16.5588 110.205 16.0788 110.085 cv
16.0068 109.989 li
16.0068 109.845 li
16.0428 109.773 li
16.1147 109.737 li
16.1507 109.749 li
16.7028 109.893 17.2308 110.157 17.7108 110.541 cv
18.2028 110.937 18.5868 111.405 18.8628 111.957 cv
19.1388 112.509 19.2828 113.061 19.2828 113.637 cv
19.2828 114.261 19.1388 114.825 18.8748 115.317 cv
18.5988 115.821 18.2148 116.205 17.7108 116.481 cv
17.2068 116.757 16.6427 116.889 16.0068 116.889 cv
15.3348 116.889 14.6748 116.745 14.0147 116.445 cv
13.3668 116.145 12.7788 115.737 12.2628 115.233 cv
11.7467 114.729 11.3388 114.141 11.0268 113.493 cv
10.7268 112.845 10.5708 112.185 10.5708 111.513 cv
10.5708 111.249 10.6188 110.997 10.6908 110.757 cv
10.7747 110.517 10.8948 110.289 11.0627 110.073 cv
11.2308 109.869 11.4108 109.701 11.6267 109.569 cv
10.5948 108.621 li
10.5708 108.561 li
10.5708 108.489 li
10.6188 108.417 li
10.6908 108.381 li
13.9307 109.197 li
14.0147 109.293 li
14.0147 109.509 li
14.0147 109.581 13.9788 109.605 13.8827 109.605 cv
13.7148 109.581 13.4988 109.557 13.2467 109.557 cv
12.8628 109.557 12.4908 109.629 12.1427 109.761 cv
11.8068 109.893 11.5308 110.097 11.3148 110.373 cv
11.0988 110.661 10.9908 110.997 10.9908 111.393 cv
10.9908 112.053 11.1588 112.653 11.4827 113.193 cv
11.8188 113.733 12.2507 114.189 12.7788 114.573 cv
13.3068 114.957 13.9067 115.245 14.5548 115.449 cv
15.2028 115.653 15.8388 115.749 16.4388 115.749 cv
f
19.1508 106.847 mo
19.1508 107.351 18.9708 107.759 18.5868 108.047 cv
18.2148 108.335 17.7708 108.479 17.2428 108.479 cv
16.7388 108.479 16.1987 108.347 15.6468 108.083 cv
15.0948 107.819 14.6388 107.471 14.2788 107.015 cv
13.9188 106.559 13.7268 106.079 13.7268 105.551 cv
13.7268 105.311 13.7987 105.107 13.9188 104.915 cv
14.0508 104.723 14.2308 104.579 14.4468 104.471 cv
14.1348 104.387 13.9668 104.207 13.9668 103.943 cv
13.9668 103.847 14.0028 103.763 14.0627 103.691 cv
14.1228 103.619 14.2068 103.583 14.3027 103.583 cv
14.3628 103.595 li
14.3988 103.595 li
17.7467 104.435 li
17.9867 104.495 18.1908 104.519 18.3348 104.519 cv
18.6828 104.519 18.8507 104.411 18.8507 104.171 cv
18.8507 103.931 18.6947 103.739 18.3708 103.607 cv
18.0588 103.475 17.6868 103.367 17.2668 103.271 cv
17.1947 103.175 li
17.1947 103.031 li
17.2428 102.959 li
17.3148 102.923 li
17.8787 103.067 18.3228 103.223 18.6588 103.391 cv
18.9948 103.559 19.1508 103.823 19.1508 104.195 cv
19.1508 104.471 19.0667 104.711 18.9228 104.915 cv
18.7787 105.119 18.5627 105.251 18.2987 105.299 cv
18.8748 105.815 19.1508 106.331 19.1508 106.847 cv
18.8507 106.835 mo
18.8507 106.547 18.7428 106.271 18.5268 105.995 cv
18.3108 105.731 18.0588 105.491 17.7588 105.299 cv
17.7227 105.287 li
15.1188 104.639 li
15.0828 104.627 li
14.7948 104.675 14.5548 104.783 14.3507 104.939 cv
14.1468 105.107 14.0387 105.311 14.0387 105.575 cv
14.0387 105.851 14.1588 106.103 14.3748 106.331 cv
14.5907 106.571 14.8547 106.763 15.1548 106.919 cv
15.4788 107.087 15.9228 107.231 16.4748 107.375 cv
17.0268 107.519 17.4587 107.579 17.7708 107.579 cv
18.0588 107.579 18.3108 107.519 18.5268 107.399 cv
18.7428 107.279 18.8507 107.099 18.8507 106.835 cv
f
18.2987 101.557 mo
18.6707 101.341 18.8507 100.909 18.8507 100.261 cv
18.8507 99.9846 18.8027 99.7206 18.7068 99.4686 cv
18.6108 99.2165 18.4668 99.0005 18.2747 98.8326 cv
18.0828 98.6646 17.8547 98.5806 17.5788 98.5806 cv
17.3748 98.5806 17.2068 98.6646 17.0748 98.8085 cv
16.9428 98.9525 16.8468 99.1325 16.7987 99.3485 cv
16.6667 99.9966 li
16.5947 100.297 16.4627 100.537 16.2588 100.729 cv
16.0548 100.921 15.8028 101.017 15.5148 101.017 cv
15.1667 101.017 14.8547 100.921 14.5788 100.729 cv
14.3027 100.537 14.0868 100.285 13.9428 99.9725 cv
13.7987 99.6605 13.7268 99.3245 13.7268 98.9765 cv
13.7268 98.6165 13.8228 98.2925 13.9908 98.0045 cv
14.1707 97.7165 14.4228 97.5725 14.7588 97.5725 cv
14.9508 97.5725 15.1068 97.6325 15.2508 97.7285 cv
15.3948 97.8365 15.4548 97.9805 15.4548 98.1605 cv
15.4548 98.2685 15.4307 98.3645 15.3588 98.4365 cv
15.2868 98.5085 15.2028 98.5445 15.0948 98.5445 cv
14.9988 98.5445 14.9148 98.5205 14.8188 98.4725 cv
14.7348 98.4245 14.6628 98.3525 14.6147 98.2565 cv
14.5667 98.1725 14.5308 98.0765 14.5308 97.9805 cv
14.3628 98.0526 14.2428 98.1845 14.1588 98.3765 cv
14.0868 98.5686 14.0387 98.7845 14.0387 99.0005 cv
14.0387 99.2165 14.0868 99.4205 14.1588 99.6125 cv
14.2428 99.8166 14.3628 99.9846 14.5188 100.105 cv
14.6868 100.225 14.8668 100.285 15.0828 100.285 cv
15.2268 100.285 15.3588 100.237 15.4668 100.141 cv
15.5747 100.045 15.6468 99.9125 15.6947 99.7565 cv
15.8388 99.0605 li
15.8868 98.8446 15.9708 98.6405 16.0907 98.4485 cv
16.2108 98.2685 16.3668 98.1245 16.5468 98.0165 cv
16.7267 97.9085 16.9307 97.8485 17.1588 97.8485 cv
17.4587 97.8485 17.7588 97.9325 18.0468 98.1005 cv
18.3348 98.2685 18.5627 98.4725 18.7308 98.7125 cv
19.0188 99.1445 19.1508 99.6605 19.1508 100.273 cv
19.1508 100.705 19.0548 101.089 18.8628 101.449 cv
18.6707 101.809 18.3827 101.977 17.9988 101.977 cv
17.7828 101.977 17.6028 101.917 17.4347 101.797 cv
17.2668 101.677 17.1828 101.497 17.1828 101.269 cv
17.1828 101.149 17.2308 101.041 17.3027 100.945 cv
17.3867 100.861 17.4948 100.813 17.6147 100.813 cv
17.8068 100.813 17.9627 100.885 18.0947 101.017 cv
18.2388 101.161 18.2987 101.317 18.2987 101.497 cv
18.2987 101.557 li
f
19.1508 94.5753 mo
19.1508 94.9593 19.0548 95.2953 18.8628 95.5833 cv
18.6707 95.8713 18.3948 96.0873 18.0588 96.2313 cv
17.7227 96.3873 17.3748 96.4593 16.9907 96.4593 cv
16.4268 96.4593 15.8868 96.3153 15.3828 96.0273 cv
14.8787 95.7393 14.4827 95.3553 14.1828 94.8633 cv
13.8827 94.3713 13.7268 93.8433 13.7268 93.2793 cv
13.7268 92.9433 13.8228 92.6433 14.0028 92.3793 cv
14.1828 92.1273 14.4347 91.9953 14.7588 91.9953 cv
15.2268 91.9953 15.5747 92.1873 15.7908 92.5473 cv
16.0187 92.9193 16.1628 93.3393 16.2108 93.7953 cv
16.2588 94.2513 16.2828 94.7673 16.2828 95.3193 cv
16.2828 95.3553 li
16.7628 95.4873 17.1707 95.5473 17.5068 95.5473 cv
17.8668 95.5473 18.1788 95.4753 18.4428 95.3073 cv
18.7188 95.1393 18.8507 94.8873 18.8507 94.5513 cv
18.8507 94.0713 18.7428 93.6153 18.5268 93.1713 cv
18.3108 92.7393 17.9988 92.3793 17.6147 92.1033 cv
17.5788 92.0073 li
17.6508 91.8873 li
17.7708 91.8273 li
17.8428 91.8513 li
18.2507 92.1393 18.5748 92.5353 18.8027 93.0273 cv
19.0308 93.5313 19.1508 94.0473 19.1508 94.5753 cv
15.9708 95.2833 mo
15.9708 94.8273 15.9587 94.3953 15.9108 93.9993 cv
15.8628 93.6033 15.7548 93.2433 15.5868 92.9193 cv
15.4188 92.6073 15.1427 92.4393 14.7708 92.4393 cv
14.6268 92.4393 14.4948 92.4873 14.3868 92.5713 cv
14.2788 92.6553 14.1947 92.7633 14.1348 92.8833 cv
14.0748 93.0153 14.0387 93.1473 14.0387 93.2913 cv
14.0387 93.6273 14.1348 93.9393 14.3148 94.2033 cv
14.5068 94.4793 14.7467 94.7073 15.0347 94.8753 cv
15.3348 95.0553 15.6468 95.1873 15.9708 95.2833 cv
f
18.2987 90.3651 mo
18.6707 90.1491 18.8507 89.7171 18.8507 89.0691 cv
18.8507 88.7931 18.8027 88.5291 18.7068 88.2771 cv
18.6108 88.0251 18.4668 87.8091 18.2747 87.6411 cv
18.0828 87.4731 17.8547 87.3891 17.5788 87.3891 cv
17.3748 87.3891 17.2068 87.4731 17.0748 87.6171 cv
16.9428 87.7611 16.8468 87.9411 16.7987 88.1571 cv
16.6667 88.8051 li
16.5947 89.1051 16.4627 89.3451 16.2588 89.5371 cv
16.0548 89.7291 15.8028 89.8251 15.5148 89.8251 cv
15.1667 89.8251 14.8547 89.7291 14.5788 89.5371 cv
14.3027 89.3451 14.0868 89.0931 13.9428 88.7811 cv
13.7987 88.4691 13.7268 88.1331 13.7268 87.7851 cv
13.7268 87.4251 13.8228 87.1011 13.9908 86.8131 cv
14.1707 86.5251 14.4228 86.3811 14.7588 86.3811 cv
14.9508 86.3811 15.1068 86.4411 15.2508 86.5371 cv
15.3948 86.6451 15.4548 86.7891 15.4548 86.9691 cv
15.4548 87.0771 15.4307 87.1731 15.3588 87.2451 cv
15.2868 87.3171 15.2028 87.3531 15.0948 87.3531 cv
14.9988 87.3531 14.9148 87.3291 14.8188 87.2811 cv
14.7348 87.2331 14.6628 87.1611 14.6147 87.0651 cv
14.5667 86.9811 14.5308 86.8851 14.5308 86.7891 cv
14.3628 86.8611 14.2428 86.9931 14.1588 87.1851 cv
14.0868 87.3771 14.0387 87.5931 14.0387 87.8091 cv
14.0387 88.0251 14.0868 88.2291 14.1588 88.4211 cv
14.2428 88.6251 14.3628 88.7931 14.5188 88.9131 cv
14.6868 89.0331 14.8668 89.0931 15.0828 89.0931 cv
15.2268 89.0931 15.3588 89.0451 15.4668 88.9491 cv
15.5747 88.8531 15.6468 88.7211 15.6947 88.5651 cv
15.8388 87.8691 li
15.8868 87.6531 15.9708 87.4491 16.0907 87.2571 cv
16.2108 87.0771 16.3668 86.9331 16.5468 86.8251 cv
16.7267 86.7171 16.9307 86.6571 17.1588 86.6571 cv
17.4587 86.6571 17.7588 86.7411 18.0468 86.9091 cv
18.3348 87.0771 18.5627 87.2811 18.7308 87.5211 cv
19.0188 87.9531 19.1508 88.4691 19.1508 89.0811 cv
19.1508 89.5131 19.0548 89.8971 18.8628 90.2571 cv
18.6707 90.6171 18.3827 90.7851 17.9988 90.7851 cv
17.7828 90.7851 17.6028 90.7251 17.4347 90.6051 cv
17.2668 90.4851 17.1828 90.3051 17.1828 90.0771 cv
17.1828 89.9571 17.2308 89.8491 17.3027 89.7531 cv
17.3867 89.6691 17.4948 89.6211 17.6147 89.6211 cv
17.8068 89.6211 17.9627 89.6931 18.0947 89.8251 cv
18.2388 89.9691 18.2987 90.1251 18.2987 90.3051 cv
18.2987 90.3651 li
f
gsave
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
clp
1 lw
[6 6 ] 0 dsh
52.812 238.477 mo
81.5 232.442 li
110.188 226.344 li
138.876 223.359 li
167.564 226.408 li
196.252 232.637 li
224.94 232.572 li
253.628 232.702 li
282.316 232.962 li
311.004 229.263 li
339.692 211.55 li
368.38 206.684 li
397.068 175.67 li
425.756 55.1841 li
454.444 96.0599 li
483.132 93.9188 li
511.82 96.9683 li
540.508 95.8004 li
@
gsave
50.0164 242.969 mo
55.6076 242.969 li
55.6076 233.984 li
50.0164 233.984 li
cp
clp
52.812 242.719 mo
55.3576 238.477 li
52.812 234.234 li
50.2664 238.477 li
cp
f
.5 lw
0 lj
[] 0 dsh
52.812 242.719 mo
55.3576 238.477 li
52.812 234.234 li
50.2664 238.477 li
cp
@
grestore
gsave
78.7044 236.935 mo
84.2956 236.935 li
84.2956 227.95 li
78.7044 227.95 li
cp
clp
81.5 236.685 mo
84.0456 232.442 li
81.5 228.2 li
78.9544 232.442 li
cp
f
.5 lw
0 lj
[] 0 dsh
81.5 236.685 mo
84.0456 232.442 li
81.5 228.2 li
78.9544 232.442 li
cp
@
grestore
gsave
107.392 230.836 mo
112.984 230.836 li
112.984 221.851 li
107.392 221.851 li
cp
clp
110.188 230.586 mo
112.734 226.344 li
110.188 222.101 li
107.642 226.344 li
cp
f
.5 lw
0 lj
[] 0 dsh
110.188 230.586 mo
112.734 226.344 li
110.188 222.101 li
107.642 226.344 li
cp
@
grestore
gsave
136.08 227.852 mo
141.672 227.852 li
141.672 218.866 li
136.08 218.866 li
cp
clp
138.876 227.602 mo
141.422 223.359 li
138.876 219.116 li
136.33 223.359 li
cp
f
.5 lw
0 lj
[] 0 dsh
138.876 227.602 mo
141.422 223.359 li
138.876 219.116 li
136.33 223.359 li
cp
@
grestore
gsave
164.768 230.901 mo
170.36 230.901 li
170.36 221.916 li
164.768 221.916 li
cp
clp
167.564 230.651 mo
170.11 226.408 li
167.564 222.166 li
165.018 226.408 li
cp
f
.5 lw
0 lj
[] 0 dsh
167.564 230.651 mo
170.11 226.408 li
167.564 222.166 li
165.018 226.408 li
cp
@
grestore
gsave
193.456 237.13 mo
199.048 237.13 li
199.048 228.144 li
193.456 228.144 li
cp
clp
196.252 236.88 mo
198.798 232.637 li
196.252 228.394 li
193.706 232.637 li
cp
f
.5 lw
0 lj
[] 0 dsh
196.252 236.88 mo
198.798 232.637 li
196.252 228.394 li
193.706 232.637 li
cp
@
grestore
gsave
222.144 237.065 mo
227.736 237.065 li
227.736 228.08 li
222.144 228.08 li
cp
clp
224.94 236.815 mo
227.486 232.572 li
224.94 228.33 li
222.394 232.572 li
cp
f
.5 lw
0 lj
[] 0 dsh
224.94 236.815 mo
227.486 232.572 li
224.94 228.33 li
222.394 232.572 li
cp
@
grestore
gsave
250.832 237.195 mo
256.424 237.195 li
256.424 228.209 li
250.832 228.209 li
cp
clp
253.628 236.945 mo
256.174 232.702 li
253.628 228.459 li
251.082 232.702 li
cp
f
.5 lw
0 lj
[] 0 dsh
253.628 236.945 mo
256.174 232.702 li
253.628 228.459 li
251.082 232.702 li
cp
@
grestore
gsave
279.52 237.454 mo
285.112 237.454 li
285.112 228.469 li
279.52 228.469 li
cp
clp
282.316 237.204 mo
284.862 232.962 li
282.316 228.719 li
279.77 232.962 li
cp
f
.5 lw
0 lj
[] 0 dsh
282.316 237.204 mo
284.862 232.962 li
282.316 228.719 li
279.77 232.962 li
cp
@
grestore
gsave
308.208 233.756 mo
313.8 233.756 li
313.8 224.771 li
308.208 224.771 li
cp
clp
311.004 233.506 mo
313.55 229.263 li
311.004 225.021 li
308.458 229.263 li
cp
f
.5 lw
0 lj
[] 0 dsh
311.004 233.506 mo
313.55 229.263 li
311.004 225.021 li
308.458 229.263 li
cp
@
grestore
gsave
336.896 216.043 mo
342.488 216.043 li
342.488 207.058 li
336.896 207.058 li
cp
clp
339.692 215.793 mo
342.238 211.55 li
339.692 207.308 li
337.146 211.55 li
cp
f
.5 lw
0 lj
[] 0 dsh
339.692 215.793 mo
342.238 211.55 li
339.692 207.308 li
337.146 211.55 li
cp
@
grestore
gsave
365.584 211.177 mo
371.176 211.177 li
371.176 202.192 li
365.584 202.192 li
cp
clp
368.38 210.927 mo
370.926 206.684 li
368.38 202.442 li
365.834 206.684 li
cp
f
.5 lw
0 lj
[] 0 dsh
368.38 210.927 mo
370.926 206.684 li
368.38 202.442 li
365.834 206.684 li
cp
@
grestore
gsave
394.272 180.163 mo
399.864 180.163 li
399.864 171.178 li
394.272 171.178 li
cp
clp
397.068 179.913 mo
399.614 175.67 li
397.068 171.428 li
394.522 175.67 li
cp
f
.5 lw
0 lj
[] 0 dsh
397.068 179.913 mo
399.614 175.67 li
397.068 171.428 li
394.522 175.67 li
cp
@
grestore
gsave
422.96 59.6767 mo
428.552 59.6767 li
428.552 50.6915 li
422.96 50.6915 li
cp
clp
425.756 59.4267 mo
428.302 55.1841 li
425.756 50.9414 li
423.21 55.1841 li
cp
f
.5 lw
0 lj
[] 0 dsh
425.756 59.4267 mo
428.302 55.1841 li
425.756 50.9414 li
423.21 55.1841 li
cp
@
grestore
gsave
451.648 100.553 mo
457.24 100.553 li
457.24 91.5673 li
451.648 91.5673 li
cp
clp
454.444 100.303 mo
456.99 96.0599 li
454.444 91.8173 li
451.898 96.0599 li
cp
f
.5 lw
0 lj
[] 0 dsh
454.444 100.303 mo
456.99 96.0599 li
454.444 91.8173 li
451.898 96.0599 li
cp
@
grestore
gsave
480.336 98.4115 mo
485.927 98.4115 li
485.927 89.4262 li
480.336 89.4262 li
cp
clp
483.132 98.1614 mo
485.678 93.9188 li
483.132 89.6762 li
480.586 93.9188 li
cp
f
.5 lw
0 lj
[] 0 dsh
483.132 98.1614 mo
485.678 93.9188 li
483.132 89.6762 li
480.586 93.9188 li
cp
@
grestore
gsave
509.024 101.461 mo
514.615 101.461 li
514.615 92.4756 li
509.024 92.4756 li
cp
clp
511.82 101.211 mo
514.365 96.9683 li
511.82 92.7256 li
509.274 96.9683 li
cp
f
.5 lw
0 lj
[] 0 dsh
511.82 101.211 mo
514.365 96.9683 li
511.82 92.7256 li
509.274 96.9683 li
cp
@
grestore
gsave
537.712 100.293 mo
543.303 100.293 li
543.303 91.3078 li
537.712 91.3078 li
cp
clp
540.508 100.043 mo
543.054 95.8004 li
540.508 91.5578 li
537.962 95.8004 li
cp
f
.5 lw
0 lj
[] 0 dsh
540.508 100.043 mo
543.054 95.8004 li
540.508 91.5578 li
537.962 95.8004 li
cp
@
grestore
grestore
gsave
52.812 256.968 mo
569.196 256.968 li
569.196 29.88 li
52.812 29.88 li
cp
clp
1 lw
[1 3 ] 0 dsh
52.812 219.855 mo
81.5 208.047 li
110.188 205.841 li
138.876 190.529 li
167.564 191.437 li
196.252 200.52 li
224.94 197.666 li
253.628 191.696 li
282.316 192.345 li
311.004 169.766 li
339.692 154.194 li
368.38 151.599 li
397.068 136.676 li
425.756 128.242 li
454.444 132.005 li
483.132 125.257 li
511.82 126.425 li
540.508 121.753 li
@
gsave
49.562 223.105 mo
56.062 223.105 li
56.062 216.605 li
49.562 216.605 li
cp
clp
.5 lw
[] 0 dsh
52.812 222.855 mo
53.6076 222.855 54.3707 222.539 54.9333 221.977 cv
55.4959 221.414 55.812 220.651 55.812 219.855 cv
55.812 219.06 55.4959 218.297 54.9333 217.734 cv
54.3707 217.171 53.6076 216.855 52.812 216.855 cv
52.0164 216.855 51.2533 217.171 50.6907 217.734 cv
50.1281 218.297 49.812 219.06 49.812 219.855 cv
49.812 220.651 50.1281 221.414 50.6907 221.977 cv
51.2533 222.539 52.0164 222.855 52.812 222.855 cv
cp
@
grestore
gsave
78.25 211.297 mo
84.75 211.297 li
84.75 204.797 li
78.25 204.797 li
cp
clp
.5 lw
[] 0 dsh
81.5 211.047 mo
82.2956 211.047 83.0587 210.731 83.6213 210.168 cv
84.1839 209.605 84.5 208.842 84.5 208.047 cv
84.5 207.251 84.1839 206.488 83.6213 205.925 cv
83.0587 205.363 82.2956 205.047 81.5 205.047 cv
80.7044 205.047 79.9413 205.363 79.3787 205.925 cv
78.8161 206.488 78.5 207.251 78.5 208.047 cv
78.5 208.842 78.8161 209.605 79.3787 210.168 cv
79.9413 210.731 80.7044 211.047 81.5 211.047 cv
cp
@
grestore
gsave
106.938 209.091 mo
113.438 209.091 li
113.438 202.591 li
106.938 202.591 li
cp
clp
.5 lw
[] 0 dsh
110.188 208.841 mo
110.984 208.841 111.747 208.525 112.309 207.962 cv
112.872 207.399 113.188 206.636 113.188 205.841 cv
113.188 205.045 112.872 204.282 112.309 203.719 cv
111.747 203.157 110.984 202.841 110.188 202.841 cv
109.392 202.841 108.629 203.157 108.067 203.719 cv
107.504 204.282 107.188 205.045 107.188 205.841 cv
107.188 206.636 107.504 207.399 108.067 207.962 cv
108.629 208.525 109.392 208.841 110.188 208.841 cv
cp
@
grestore
gsave
135.626 193.779 mo
142.126 193.779 li
142.126 187.279 li
135.626 187.279 li
cp
clp
.5 lw
[] 0 dsh
138.876 193.529 mo
139.672 193.529 140.435 193.212 140.997 192.65 cv
141.56 192.087 141.876 191.324 141.876 190.529 cv
141.876 189.733 141.56 188.97 140.997 188.407 cv
140.435 187.845 139.672 187.529 138.876 187.529 cv
138.08 187.529 137.317 187.845 136.755 188.407 cv
136.192 188.97 135.876 189.733 135.876 190.529 cv
135.876 191.324 136.192 192.087 136.755 192.65 cv
137.317 193.212 138.08 193.529 138.876 193.529 cv
cp
@
grestore
gsave
164.314 194.687 mo
170.814 194.687 li
170.814 188.187 li
164.314 188.187 li
cp
clp
.5 lw
[] 0 dsh
167.564 194.437 mo
168.36 194.437 169.123 194.121 169.685 193.558 cv
170.248 192.996 170.564 192.232 170.564 191.437 cv
170.564 190.641 170.248 189.878 169.685 189.316 cv
169.123 188.753 168.36 188.437 167.564 188.437 cv
166.768 188.437 166.005 188.753 165.443 189.316 cv
164.88 189.878 164.564 190.641 164.564 191.437 cv
164.564 192.232 164.88 192.996 165.443 193.558 cv
166.005 194.121 166.768 194.437 167.564 194.437 cv
cp
@
grestore
gsave
193.002 203.77 mo
199.502 203.77 li
199.502 197.27 li
193.002 197.27 li
cp
clp
.5 lw
[] 0 dsh
196.252 203.52 mo
197.048 203.52 197.811 203.204 198.373 202.642 cv
198.936 202.079 199.252 201.316 199.252 200.52 cv
199.252 199.725 198.936 198.962 198.373 198.399 cv
197.811 197.837 197.048 197.52 196.252 197.52 cv
195.456 197.52 194.693 197.837 194.131 198.399 cv
193.568 198.962 193.252 199.725 193.252 200.52 cv
193.252 201.316 193.568 202.079 194.131 202.642 cv
194.693 203.204 195.456 203.52 196.252 203.52 cv
cp
@
grestore
gsave
221.69 200.916 mo
228.19 200.916 li
228.19 194.416 li
221.69 194.416 li
cp
clp
.5 lw
[] 0 dsh
224.94 200.666 mo
225.736 200.666 226.499 200.349 227.061 199.787 cv
227.624 199.224 227.94 198.461 227.94 197.666 cv
227.94 196.87 227.624 196.107 227.061 195.544 cv
226.499 194.982 225.736 194.666 224.94 194.666 cv
224.144 194.666 223.381 194.982 222.819 195.544 cv
222.256 196.107 221.94 196.87 221.94 197.666 cv
221.94 198.461 222.256 199.224 222.819 199.787 cv
223.381 200.349 224.144 200.666 224.94 200.666 cv
cp
@
grestore
gsave
250.378 194.946 mo
256.878 194.946 li
256.878 188.446 li
250.378 188.446 li
cp
clp
.5 lw
[] 0 dsh
253.628 194.696 mo
254.424 194.696 255.187 194.38 255.749 193.818 cv
256.312 193.255 256.628 192.492 256.628 191.696 cv
256.628 190.901 256.312 190.138 255.749 189.575 cv
255.187 189.013 254.424 188.696 253.628 188.696 cv
252.832 188.696 252.069 189.013 251.507 189.575 cv
250.944 190.138 250.628 190.901 250.628 191.696 cv
250.628 192.492 250.944 193.255 251.507 193.818 cv
252.069 194.38 252.832 194.696 253.628 194.696 cv
cp
@
grestore
gsave
279.066 195.595 mo
285.566 195.595 li
285.566 189.095 li
279.066 189.095 li
cp
clp
.5 lw
[] 0 dsh
282.316 195.345 mo
283.112 195.345 283.875 195.029 284.437 194.467 cv
285 193.904 285.316 193.141 285.316 192.345 cv
285.316 191.55 285 190.786 284.437 190.224 cv
283.875 189.661 283.112 189.345 282.316 189.345 cv
281.52 189.345 280.757 189.661 280.195 190.224 cv
279.632 190.786 279.316 191.55 279.316 192.345 cv
279.316 193.141 279.632 193.904 280.195 194.467 cv
280.757 195.029 281.52 195.345 282.316 195.345 cv
cp
@
grestore
gsave
307.754 173.016 mo
314.254 173.016 li
314.254 166.516 li
307.754 166.516 li
cp
clp
.5 lw
[] 0 dsh
311.004 172.766 mo
311.8 172.766 312.563 172.45 313.125 171.888 cv
313.688 171.325 314.004 170.562 314.004 169.766 cv
314.004 168.971 313.688 168.207 313.125 167.645 cv
312.563 167.082 311.8 166.766 311.004 166.766 cv
310.208 166.766 309.445 167.082 308.883 167.645 cv
308.32 168.207 308.004 168.971 308.004 169.766 cv
308.004 170.562 308.32 171.325 308.883 171.888 cv
309.445 172.45 310.208 172.766 311.004 172.766 cv
cp
@
grestore
gsave
336.442 157.444 mo
342.942 157.444 li
342.942 150.944 li
336.442 150.944 li
cp
clp
.5 lw
[] 0 dsh
339.692 157.194 mo
340.488 157.194 341.251 156.878 341.813 156.316 cv
342.376 155.753 342.692 154.99 342.692 154.194 cv
342.692 153.399 342.376 152.636 341.813 152.073 cv
341.251 151.511 340.488 151.194 339.692 151.194 cv
338.896 151.194 338.133 151.511 337.571 152.073 cv
337.008 152.636 336.692 153.399 336.692 154.194 cv
336.692 154.99 337.008 155.753 337.571 156.316 cv
338.133 156.878 338.896 157.194 339.692 157.194 cv
cp
@
grestore
gsave
365.13 154.849 mo
371.63 154.849 li
371.63 148.349 li
365.13 148.349 li
cp
clp
.5 lw
[] 0 dsh
368.38 154.599 mo
369.176 154.599 369.939 154.283 370.501 153.72 cv
371.064 153.158 371.38 152.395 371.38 151.599 cv
371.38 150.804 371.064 150.04 370.501 149.478 cv
369.939 148.915 369.176 148.599 368.38 148.599 cv
367.584 148.599 366.821 148.915 366.259 149.478 cv
365.696 150.04 365.38 150.804 365.38 151.599 cv
365.38 152.395 365.696 153.158 366.259 153.72 cv
366.821 154.283 367.584 154.599 368.38 154.599 cv
cp
@
grestore
gsave
393.818 139.926 mo
400.318 139.926 li
400.318 133.426 li
393.818 133.426 li
cp
clp
.5 lw
[] 0 dsh
397.068 139.676 mo
397.864 139.676 398.627 139.36 399.189 138.798 cv
399.752 138.235 400.068 137.472 400.068 136.676 cv
400.068 135.881 399.752 135.117 399.189 134.555 cv
398.627 133.992 397.864 133.676 397.068 133.676 cv
396.272 133.676 395.509 133.992 394.947 134.555 cv
394.384 135.117 394.068 135.881 394.068 136.676 cv
394.068 137.472 394.384 138.235 394.947 138.798 cv
395.509 139.36 396.272 139.676 397.068 139.676 cv
cp
@
grestore
gsave
422.506 131.492 mo
429.006 131.492 li
429.006 124.992 li
422.506 124.992 li
cp
clp
.5 lw
[] 0 dsh
425.756 131.242 mo
426.552 131.242 427.315 130.925 427.877 130.363 cv
428.44 129.8 428.756 129.037 428.756 128.242 cv
428.756 127.446 428.44 126.683 427.877 126.12 cv
427.315 125.558 426.552 125.242 425.756 125.242 cv
424.96 125.242 424.197 125.558 423.635 126.12 cv
423.072 126.683 422.756 127.446 422.756 128.242 cv
422.756 129.037 423.072 129.8 423.635 130.363 cv
424.197 130.925 424.96 131.242 425.756 131.242 cv
cp
@
grestore
gsave
451.194 135.255 mo
457.694 135.255 li
457.694 128.755 li
451.194 128.755 li
cp
clp
.5 lw
[] 0 dsh
454.444 135.005 mo
455.24 135.005 456.003 134.689 456.565 134.126 cv
457.128 133.563 457.444 132.8 457.444 132.005 cv
457.444 131.209 457.128 130.446 456.565 129.883 cv
456.003 129.321 455.24 129.005 454.444 129.005 cv
453.648 129.005 452.885 129.321 452.323 129.883 cv
451.76 130.446 451.444 131.209 451.444 132.005 cv
451.444 132.8 451.76 133.563 452.323 134.126 cv
452.885 134.689 453.648 135.005 454.444 135.005 cv
cp
@
grestore
gsave
479.882 128.507 mo
486.382 128.507 li
486.382 122.007 li
479.882 122.007 li
cp
clp
.5 lw
[] 0 dsh
483.132 128.257 mo
483.928 128.257 484.691 127.941 485.253 127.378 cv
485.816 126.816 486.132 126.053 486.132 125.257 cv
486.132 124.461 485.816 123.698 485.253 123.136 cv
484.691 122.573 483.928 122.257 483.132 122.257 cv
482.336 122.257 481.573 122.573 481.011 123.136 cv
480.448 123.698 480.132 124.461 480.132 125.257 cv
480.132 126.053 480.448 126.816 481.011 127.378 cv
481.573 127.941 482.336 128.257 483.132 128.257 cv
cp
@
grestore
gsave
508.57 129.675 mo
515.07 129.675 li
515.07 123.175 li
508.57 123.175 li
cp
clp
.5 lw
[] 0 dsh
511.82 129.425 mo
512.616 129.425 513.379 129.109 513.941 128.546 cv
514.504 127.984 514.82 127.22 514.82 126.425 cv
514.82 125.629 514.504 124.866 513.941 124.304 cv
513.379 123.741 512.616 123.425 511.82 123.425 cv
511.024 123.425 510.261 123.741 509.699 124.304 cv
509.136 124.866 508.82 125.629 508.82 126.425 cv
508.82 127.22 509.136 127.984 509.699 128.546 cv
510.261 129.109 511.024 129.425 511.82 129.425 cv
cp
@
grestore
gsave
537.258 125.003 mo
543.758 125.003 li
543.758 118.503 li
537.258 118.503 li
cp
clp
.5 lw
[] 0 dsh
540.508 124.753 mo
541.304 124.753 542.067 124.437 542.629 123.875 cv
543.192 123.312 543.508 122.549 543.508 121.753 cv
543.508 120.958 543.192 120.195 542.629 119.632 cv
542.067 119.069 541.304 118.753 540.508 118.753 cv
539.712 118.753 538.949 119.069 538.387 119.632 cv
537.824 120.195 537.508 120.958 537.508 121.753 cv
537.508 122.549 537.824 123.312 538.387 123.875 cv
538.949 124.437 539.712 124.753 540.508 124.753 cv
cp
@
grestore
grestore
52.812 256.968 mo
52.812 252.968 li
f
52.812 256.968 mo
52.812 252.968 li
@
52.812 29.88 mo
52.812 33.88 li
f
52.812 29.88 mo
52.812 33.88 li
@
51.6906 269.097 mo
53.6226 269.097 li
53.6226 262.425 li
51.5226 262.845 li
51.5226 261.765 li
53.6106 261.345 li
54.7986 261.345 li
54.7986 269.097 li
56.7306 269.097 li
56.7306 270.093 li
51.6906 270.093 li
51.6906 269.097 li
f
81.5 256.968 mo
81.5 252.968 li
f
81.5 256.968 mo
81.5 252.968 li
@
81.5 29.88 mo
81.5 33.88 li
f
81.5 29.88 mo
81.5 33.88 li
@
81.0228 269.097 mo
85.1507 269.097 li
85.1507 270.093 li
79.5947 270.093 li
79.5947 269.097 li
80.0387 268.641 80.6507 268.017 81.4307 267.225 cv
82.1988 266.445 82.6908 265.941 82.8948 265.713 cv
83.2787 265.293 83.5427 264.933 83.6868 264.633 cv
83.8307 264.345 83.9147 264.045 83.9147 263.757 cv
83.9147 263.301 83.7467 262.917 83.4228 262.629 cv
83.0987 262.341 82.6787 262.185 82.1507 262.185 cv
81.7787 262.185 81.3828 262.257 80.9747 262.377 cv
80.5667 262.509 80.1227 262.701 79.6547 262.965 cv
79.6547 261.765 li
80.1348 261.573 80.5788 261.429 80.9867 261.333 cv
81.3948 261.237 81.7787 261.189 82.1267 261.189 cv
83.0267 261.189 83.7467 261.417 84.2868 261.873 cv
84.8268 262.329 85.1028 262.929 85.1028 263.685 cv
85.1028 264.045 85.0307 264.393 84.8988 264.705 cv
84.7667 265.029 84.5267 265.413 84.1667 265.845 cv
84.0707 265.965 83.7588 266.289 83.2308 266.829 cv
82.7028 267.369 81.9707 268.125 81.0228 269.097 cv
f
110.188 256.968 mo
110.188 252.968 li
f
110.188 256.968 mo
110.188 252.968 li
@
110.188 29.88 mo
110.188 33.88 li
f
110.188 29.88 mo
110.188 33.88 li
@
112.185 265.377 mo
112.749 265.497 113.193 265.749 113.505 266.133 cv
113.817 266.517 113.985 266.997 113.985 267.549 cv
113.985 268.413 113.685 269.085 113.097 269.553 cv
112.497 270.021 111.657 270.249 110.565 270.249 cv
110.193 270.249 109.809 270.213 109.425 270.141 cv
109.041 270.081 108.633 269.973 108.225 269.829 cv
108.225 268.689 li
108.549 268.881 108.909 269.025 109.305 269.121 cv
109.689 269.217 110.097 269.265 110.529 269.265 cv
111.273 269.265 111.837 269.121 112.221 268.833 cv
112.605 268.545 112.809 268.113 112.809 267.549 cv
112.809 267.045 112.629 266.637 112.269 266.349 cv
111.909 266.061 111.405 265.905 110.757 265.905 cv
109.737 265.905 li
109.737 264.933 li
110.805 264.933 li
111.381 264.933 111.825 264.825 112.137 264.585 cv
112.449 264.357 112.605 264.021 112.605 263.577 cv
112.605 263.133 112.437 262.785 112.125 262.545 cv
111.801 262.305 111.345 262.185 110.757 262.185 cv
110.433 262.185 110.085 262.221 109.713 262.293 cv
109.341 262.365 108.933 262.473 108.489 262.617 cv
108.489 261.561 li
108.933 261.441 109.353 261.345 109.749 261.285 cv
110.133 261.225 110.505 261.189 110.865 261.189 cv
111.753 261.189 112.461 261.393 112.989 261.801 cv
113.517 262.209 113.781 262.761 113.781 263.457 cv
113.781 263.937 113.637 264.345 113.361 264.681 cv
113.085 265.017 112.689 265.257 112.185 265.377 cv
f
138.876 256.968 mo
138.876 252.968 li
f
138.876 256.968 mo
138.876 252.968 li
@
138.876 29.88 mo
138.876 33.88 li
f
138.876 29.88 mo
138.876 33.88 li
@
140.225 262.377 mo
137.237 267.045 li
140.225 267.045 li
140.225 262.377 li
139.913 261.345 mo
141.401 261.345 li
141.401 267.045 li
142.649 267.045 li
142.649 268.029 li
141.401 268.029 li
141.401 270.093 li
140.225 270.093 li
140.225 268.029 li
136.277 268.029 li
136.277 266.889 li
139.913 261.345 li
f
167.564 256.968 mo
167.564 252.968 li
f
167.564 256.968 mo
167.564 252.968 li
@
167.564 29.88 mo
167.564 33.88 li
f
167.564 29.88 mo
167.564 33.88 li
@
166.024 261.345 mo
170.668 261.345 li
170.668 262.341 li
167.104 262.341 li
167.104 264.489 li
167.272 264.429 167.452 264.381 167.62 264.357 cv
167.788 264.333 167.968 264.309 168.136 264.309 cv
169.108 264.309 169.876 264.585 170.452 265.113 cv
171.028 265.653 171.316 266.373 171.316 267.285 cv
171.316 268.233 171.016 268.965 170.428 269.481 cv
169.84 269.997 169.012 270.249 167.956 270.249 cv
167.584 270.249 167.212 270.213 166.828 270.165 cv
166.444 270.105 166.06 270.021 165.652 269.889 cv
165.652 268.701 li
166 268.893 166.36 269.037 166.744 269.133 cv
167.116 269.229 167.512 269.265 167.932 269.265 cv
168.604 269.265 169.144 269.097 169.54 268.737 cv
169.924 268.377 170.128 267.897 170.128 267.285 cv
170.128 266.685 169.924 266.205 169.54 265.845 cv
169.144 265.485 168.604 265.305 167.932 265.305 cv
167.62 265.305 167.296 265.341 166.984 265.413 cv
166.672 265.485 166.348 265.593 166.024 265.737 cv
166.024 261.345 li
f
196.252 256.968 mo
196.252 252.968 li
f
196.252 256.968 mo
196.252 252.968 li
@
196.252 29.88 mo
196.252 33.88 li
f
196.252 29.88 mo
196.252 33.88 li
@
197.196 265.245 mo
196.668 265.245 196.248 265.437 195.936 265.797 cv
195.624 266.157 195.468 266.661 195.468 267.285 cv
195.468 267.921 195.624 268.425 195.936 268.785 cv
196.248 269.145 196.668 269.325 197.196 269.325 cv
197.724 269.325 198.144 269.145 198.456 268.785 cv
198.768 268.425 198.924 267.921 198.924 267.285 cv
198.924 266.661 198.768 266.157 198.456 265.797 cv
198.144 265.437 197.724 265.245 197.196 265.245 cv
199.548 261.537 mo
199.548 262.617 li
199.248 262.473 198.948 262.365 198.648 262.293 cv
198.336 262.221 198.036 262.185 197.748 262.185 cv
196.956 262.185 196.356 262.449 195.948 262.977 cv
195.54 263.505 195.3 264.309 195.252 265.365 cv
195.48 265.029 195.768 264.765 196.116 264.585 cv
196.464 264.405 196.848 264.309 197.268 264.309 cv
198.144 264.309 198.84 264.585 199.344 265.113 cv
199.848 265.641 200.112 266.373 200.112 267.285 cv
200.112 268.185 199.836 268.905 199.308 269.445 cv
198.78 269.985 198.072 270.249 197.196 270.249 cv
196.188 270.249 195.408 269.865 194.88 269.097 cv
194.34 268.329 194.076 267.201 194.076 265.725 cv
194.076 264.345 194.4 263.241 195.06 262.425 cv
195.708 261.609 196.596 261.189 197.7 261.189 cv
197.988 261.189 198.288 261.225 198.6 261.273 cv
198.9 261.333 199.212 261.417 199.548 261.537 cv
f
224.94 256.968 mo
224.94 252.968 li
f
224.94 256.968 mo
224.94 252.968 li
@
224.94 29.88 mo
224.94 33.88 li
f
224.94 29.88 mo
224.94 33.88 li
@
223.111 261.345 mo
228.74 261.345 li
228.74 261.849 li
225.56 270.093 li
224.324 270.093 li
227.312 262.341 li
223.111 262.341 li
223.111 261.345 li
f
253.628 256.968 mo
253.628 252.968 li
f
253.628 256.968 mo
253.628 252.968 li
@
253.628 29.88 mo
253.628 33.88 li
f
253.628 29.88 mo
253.628 33.88 li
@
254.444 265.941 mo
253.88 265.941 253.436 266.097 253.112 266.397 cv
252.788 266.697 252.632 267.105 252.632 267.633 cv
252.632 268.161 252.788 268.581 253.112 268.881 cv
253.436 269.181 253.88 269.325 254.444 269.325 cv
254.996 269.325 255.44 269.181 255.764 268.869 cv
256.088 268.569 256.256 268.161 256.256 267.633 cv
256.256 267.105 256.088 266.697 255.776 266.397 cv
255.452 266.097 255.008 265.941 254.444 265.941 cv
253.256 265.437 mo
252.752 265.317 252.356 265.077 252.068 264.729 cv
251.78 264.381 251.648 263.961 251.648 263.457 cv
251.648 262.761 251.888 262.209 252.392 261.801 cv
252.884 261.393 253.568 261.189 254.444 261.189 cv
255.308 261.189 255.992 261.393 256.496 261.801 cv
256.988 262.209 257.24 262.761 257.24 263.457 cv
257.24 263.961 257.096 264.381 256.808 264.729 cv
256.52 265.077 256.136 265.317 255.632 265.437 cv
256.196 265.569 256.64 265.833 256.964 266.217 cv
257.276 266.601 257.444 267.081 257.444 267.633 cv
257.444 268.485 257.18 269.133 256.664 269.577 cv
256.136 270.033 255.404 270.249 254.444 270.249 cv
253.472 270.249 252.728 270.033 252.212 269.577 cv
251.696 269.133 251.444 268.485 251.444 267.633 cv
251.444 267.081 251.6 266.601 251.924 266.217 cv
252.236 265.833 252.68 265.569 253.256 265.437 cv
252.824 263.565 mo
252.824 264.021 252.956 264.381 253.244 264.633 cv
253.532 264.885 253.928 265.005 254.444 265.005 cv
254.948 265.005 255.344 264.885 255.632 264.633 cv
255.92 264.381 256.064 264.021 256.064 263.565 cv
256.064 263.109 255.92 262.761 255.632 262.509 cv
255.344 262.257 254.948 262.125 254.444 262.125 cv
253.928 262.125 253.532 262.257 253.244 262.509 cv
252.956 262.761 252.824 263.109 252.824 263.565 cv
f
282.316 256.968 mo
282.316 252.968 li
f
282.316 256.968 mo
282.316 252.968 li
@
282.316 29.88 mo
282.316 33.88 li
f
282.316 29.88 mo
282.316 33.88 li
@
280.613 269.913 mo
280.613 268.833 li
280.901 268.977 281.201 269.085 281.513 269.157 cv
281.813 269.229 282.113 269.265 282.413 269.265 cv
283.181 269.265 283.781 269.013 284.189 268.485 cv
284.597 267.957 284.837 267.165 284.909 266.085 cv
284.669 266.421 284.381 266.685 284.045 266.865 cv
283.697 267.045 283.313 267.129 282.893 267.129 cv
282.005 267.129 281.309 266.865 280.805 266.337 cv
280.301 265.809 280.049 265.089 280.049 264.165 cv
280.049 263.277 280.313 262.557 280.841 262.005 cv
281.369 261.465 282.077 261.189 282.965 261.189 cv
283.973 261.189 284.753 261.585 285.281 262.353 cv
285.809 263.133 286.085 264.261 286.085 265.725 cv
286.085 267.117 285.749 268.209 285.101 269.025 cv
284.441 269.841 283.565 270.249 282.461 270.249 cv
282.161 270.249 281.861 270.213 281.561 270.165 cv
281.249 270.117 280.937 270.033 280.613 269.913 cv
282.965 266.205 mo
283.493 266.205 283.913 266.025 284.225 265.665 cv
284.537 265.305 284.693 264.801 284.693 264.165 cv
284.693 263.541 284.537 263.037 284.225 262.677 cv
283.913 262.317 283.493 262.125 282.965 262.125 cv
282.437 262.125 282.017 262.317 281.705 262.677 cv
281.393 263.037 281.237 263.541 281.237 264.165 cv
281.237 264.801 281.393 265.305 281.705 265.665 cv
282.017 266.025 282.437 266.205 282.965 266.205 cv
f
311.004 256.968 mo
311.004 252.968 li
f
311.004 256.968 mo
311.004 252.968 li
@
311.004 29.88 mo
311.004 33.88 li
f
311.004 29.88 mo
311.004 33.88 li
@
305.906 269.097 mo
307.838 269.097 li
307.838 262.425 li
305.738 262.845 li
305.738 261.765 li
307.826 261.345 li
309.014 261.345 li
309.014 269.097 li
310.946 269.097 li
310.946 270.093 li
305.906 270.093 li
305.906 269.097 li
f
315.866 262.125 mo
315.254 262.125 314.798 262.425 314.486 263.025 cv
314.174 263.625 314.03 264.525 314.03 265.725 cv
314.03 266.925 314.174 267.825 314.486 268.425 cv
314.798 269.025 315.254 269.325 315.866 269.325 cv
316.478 269.325 316.934 269.025 317.246 268.425 cv
317.546 267.825 317.702 266.925 317.702 265.725 cv
317.702 264.525 317.546 263.625 317.246 263.025 cv
316.934 262.425 316.478 262.125 315.866 262.125 cv
315.866 261.189 mo
316.838 261.189 317.582 261.585 318.11 262.353 cv
318.626 263.133 318.89 264.261 318.89 265.725 cv
318.89 267.201 318.626 268.329 318.11 269.097 cv
317.582 269.865 316.838 270.249 315.866 270.249 cv
314.882 270.249 314.126 269.865 313.61 269.097 cv
313.094 268.329 312.842 267.201 312.842 265.725 cv
312.842 264.261 313.094 263.133 313.61 262.353 cv
314.126 261.585 314.882 261.189 315.866 261.189 cv
f
339.692 256.968 mo
339.692 252.968 li
f
339.692 256.968 mo
339.692 252.968 li
@
339.692 29.88 mo
339.692 33.88 li
f
339.692 29.88 mo
339.692 33.88 li
@
335.191 269.097 mo
339.319 269.097 li
339.319 270.093 li
333.763 270.093 li
333.763 269.097 li
334.207 268.641 334.819 268.017 335.599 267.225 cv
336.367 266.445 336.859 265.941 337.063 265.713 cv
337.447 265.293 337.711 264.933 337.855 264.633 cv
337.999 264.345 338.083 264.045 338.083 263.757 cv
338.083 263.301 337.915 262.917 337.591 262.629 cv
337.267 262.341 336.847 262.185 336.319 262.185 cv
335.947 262.185 335.551 262.257 335.143 262.377 cv
334.735 262.509 334.291 262.701 333.823 262.965 cv
333.823 261.765 li
334.303 261.573 334.747 261.429 335.155 261.333 cv
335.563 261.237 335.947 261.189 336.295 261.189 cv
337.195 261.189 337.915 261.417 338.455 261.873 cv
338.995 262.329 339.271 262.929 339.271 263.685 cv
339.271 264.045 339.199 264.393 339.067 264.705 cv
338.935 265.029 338.695 265.413 338.335 265.845 cv
338.239 265.965 337.927 266.289 337.399 266.829 cv
336.871 267.369 336.139 268.125 335.191 269.097 cv
f
344.335 262.125 mo
343.723 262.125 343.267 262.425 342.955 263.025 cv
342.643 263.625 342.499 264.525 342.499 265.725 cv
342.499 266.925 342.643 267.825 342.955 268.425 cv
343.267 269.025 343.723 269.325 344.335 269.325 cv
344.947 269.325 345.403 269.025 345.715 268.425 cv
346.015 267.825 346.171 266.925 346.171 265.725 cv
346.171 264.525 346.015 263.625 345.715 263.025 cv
345.403 262.425 344.947 262.125 344.335 262.125 cv
344.335 261.189 mo
345.307 261.189 346.051 261.585 346.579 262.353 cv
347.095 263.133 347.359 264.261 347.359 265.725 cv
347.359 267.201 347.095 268.329 346.579 269.097 cv
346.051 269.865 345.307 270.249 344.335 270.249 cv
343.351 270.249 342.595 269.865 342.079 269.097 cv
341.563 268.329 341.311 267.201 341.311 265.725 cv
341.311 264.261 341.563 263.133 342.079 262.353 cv
342.595 261.585 343.351 261.189 344.335 261.189 cv
f
368.38 256.968 mo
368.38 252.968 li
f
368.38 256.968 mo
368.38 252.968 li
@
368.38 29.88 mo
368.38 33.88 li
f
368.38 29.88 mo
368.38 33.88 li
@
366.471 265.377 mo
367.035 265.497 367.479 265.749 367.791 266.133 cv
368.103 266.517 368.271 266.997 368.271 267.549 cv
368.271 268.413 367.971 269.085 367.383 269.553 cv
366.783 270.021 365.943 270.249 364.851 270.249 cv
364.479 270.249 364.095 270.213 363.711 270.141 cv
363.327 270.081 362.919 269.973 362.511 269.829 cv
362.511 268.689 li
362.835 268.881 363.195 269.025 363.591 269.121 cv
363.975 269.217 364.383 269.265 364.815 269.265 cv
365.559 269.265 366.123 269.121 366.507 268.833 cv
366.891 268.545 367.095 268.113 367.095 267.549 cv
367.095 267.045 366.915 266.637 366.555 266.349 cv
366.195 266.061 365.691 265.905 365.043 265.905 cv
364.023 265.905 li
364.023 264.933 li
365.091 264.933 li
365.667 264.933 366.111 264.825 366.423 264.585 cv
366.735 264.357 366.891 264.021 366.891 263.577 cv
366.891 263.133 366.723 262.785 366.411 262.545 cv
366.087 262.305 365.631 262.185 365.043 262.185 cv
364.719 262.185 364.371 262.221 363.999 262.293 cv
363.627 262.365 363.219 262.473 362.775 262.617 cv
362.775 261.561 li
363.219 261.441 363.639 261.345 364.035 261.285 cv
364.419 261.225 364.791 261.189 365.151 261.189 cv
366.039 261.189 366.747 261.393 367.275 261.801 cv
367.803 262.209 368.067 262.761 368.067 263.457 cv
368.067 263.937 367.923 264.345 367.647 264.681 cv
367.371 265.017 366.975 265.257 366.471 265.377 cv
f
373.047 262.125 mo
372.435 262.125 371.979 262.425 371.667 263.025 cv
371.355 263.625 371.211 264.525 371.211 265.725 cv
371.211 266.925 371.355 267.825 371.667 268.425 cv
371.979 269.025 372.435 269.325 373.047 269.325 cv
373.659 269.325 374.115 269.025 374.427 268.425 cv
374.727 267.825 374.883 266.925 374.883 265.725 cv
374.883 264.525 374.727 263.625 374.427 263.025 cv
374.115 262.425 373.659 262.125 373.047 262.125 cv
373.047 261.189 mo
374.019 261.189 374.763 261.585 375.291 262.353 cv
375.807 263.133 376.071 264.261 376.071 265.725 cv
376.071 267.201 375.807 268.329 375.291 269.097 cv
374.763 269.865 374.019 270.249 373.047 270.249 cv
372.063 270.249 371.307 269.865 370.791 269.097 cv
370.275 268.329 370.023 267.201 370.023 265.725 cv
370.023 264.261 370.275 263.133 370.791 262.353 cv
371.307 261.585 372.063 261.189 373.047 261.189 cv
f
397.068 256.968 mo
397.068 252.968 li
f
397.068 256.968 mo
397.068 252.968 li
@
397.068 29.88 mo
397.068 33.88 li
f
397.068 29.88 mo
397.068 33.88 li
@
394.659 262.377 mo
391.671 267.045 li
394.659 267.045 li
394.659 262.377 li
394.347 261.345 mo
395.835 261.345 li
395.835 267.045 li
397.083 267.045 li
397.083 268.029 li
395.835 268.029 li
395.835 270.093 li
394.659 270.093 li
394.659 268.029 li
390.711 268.029 li
390.711 266.889 li
394.347 261.345 li
f
401.571 262.125 mo
400.959 262.125 400.503 262.425 400.191 263.025 cv
399.879 263.625 399.735 264.525 399.735 265.725 cv
399.735 266.925 399.879 267.825 400.191 268.425 cv
400.503 269.025 400.959 269.325 401.571 269.325 cv
402.183 269.325 402.639 269.025 402.951 268.425 cv
403.251 267.825 403.407 266.925 403.407 265.725 cv
403.407 264.525 403.251 263.625 402.951 263.025 cv
402.639 262.425 402.183 262.125 401.571 262.125 cv
401.571 261.189 mo
402.543 261.189 403.287 261.585 403.815 262.353 cv
404.331 263.133 404.595 264.261 404.595 265.725 cv
404.595 267.201 404.331 268.329 403.815 269.097 cv
403.287 269.865 402.543 270.249 401.571 270.249 cv
400.587 270.249 399.831 269.865 399.315 269.097 cv
398.799 268.329 398.547 267.201 398.547 265.725 cv
398.547 264.261 398.799 263.133 399.315 262.353 cv
399.831 261.585 400.587 261.189 401.571 261.189 cv
f
425.756 256.968 mo
425.756 252.968 li
f
425.756 256.968 mo
425.756 252.968 li
@
425.756 29.88 mo
425.756 33.88 li
f
425.756 29.88 mo
425.756 33.88 li
@
420.271 261.345 mo
424.915 261.345 li
424.915 262.341 li
421.351 262.341 li
421.351 264.489 li
421.519 264.429 421.699 264.381 421.867 264.357 cv
422.035 264.333 422.215 264.309 422.383 264.309 cv
423.355 264.309 424.123 264.585 424.699 265.113 cv
425.275 265.653 425.563 266.373 425.563 267.285 cv
425.563 268.233 425.263 268.965 424.675 269.481 cv
424.087 269.997 423.259 270.249 422.203 270.249 cv
421.831 270.249 421.459 270.213 421.075 270.165 cv
420.691 270.105 420.307 270.021 419.899 269.889 cv
419.899 268.701 li
420.247 268.893 420.607 269.037 420.991 269.133 cv
421.363 269.229 421.759 269.265 422.179 269.265 cv
422.851 269.265 423.391 269.097 423.787 268.737 cv
424.171 268.377 424.375 267.897 424.375 267.285 cv
424.375 266.685 424.171 266.205 423.787 265.845 cv
423.391 265.485 422.851 265.305 422.179 265.305 cv
421.867 265.305 421.543 265.341 421.231 265.413 cv
420.919 265.485 420.595 265.593 420.271 265.737 cv
420.271 261.345 li
f
430.423 262.125 mo
429.811 262.125 429.355 262.425 429.043 263.025 cv
428.731 263.625 428.587 264.525 428.587 265.725 cv
428.587 266.925 428.731 267.825 429.043 268.425 cv
429.355 269.025 429.811 269.325 430.423 269.325 cv
431.035 269.325 431.491 269.025 431.803 268.425 cv
432.103 267.825 432.259 266.925 432.259 265.725 cv
432.259 264.525 432.103 263.625 431.803 263.025 cv
431.491 262.425 431.035 262.125 430.423 262.125 cv
430.423 261.189 mo
431.395 261.189 432.139 261.585 432.667 262.353 cv
433.183 263.133 433.447 264.261 433.447 265.725 cv
433.447 267.201 433.183 268.329 432.667 269.097 cv
432.139 269.865 431.395 270.249 430.423 270.249 cv
429.439 270.249 428.683 269.865 428.167 269.097 cv
427.651 268.329 427.399 267.201 427.399 265.725 cv
427.399 264.261 427.651 263.133 428.167 262.353 cv
428.683 261.585 429.439 261.189 430.423 261.189 cv
f
454.444 256.968 mo
454.444 252.968 li
f
454.444 256.968 mo
454.444 252.968 li
@
454.444 29.88 mo
454.444 33.88 li
f
454.444 29.88 mo
454.444 33.88 li
@
451.584 265.245 mo
451.056 265.245 450.636 265.437 450.324 265.797 cv
450.012 266.157 449.856 266.661 449.856 267.285 cv
449.856 267.921 450.012 268.425 450.324 268.785 cv
450.636 269.145 451.056 269.325 451.584 269.325 cv
452.112 269.325 452.532 269.145 452.844 268.785 cv
453.156 268.425 453.312 267.921 453.312 267.285 cv
453.312 266.661 453.156 266.157 452.844 265.797 cv
452.532 265.437 452.112 265.245 451.584 265.245 cv
453.936 261.537 mo
453.936 262.617 li
453.636 262.473 453.336 262.365 453.036 262.293 cv
452.724 262.221 452.424 262.185 452.136 262.185 cv
451.344 262.185 450.744 262.449 450.336 262.977 cv
449.928 263.505 449.688 264.309 449.64 265.365 cv
449.868 265.029 450.156 264.765 450.504 264.585 cv
450.852 264.405 451.236 264.309 451.656 264.309 cv
452.532 264.309 453.228 264.585 453.732 265.113 cv
454.236 265.641 454.5 266.373 454.5 267.285 cv
454.5 268.185 454.224 268.905 453.696 269.445 cv
453.168 269.985 452.46 270.249 451.584 270.249 cv
450.576 270.249 449.796 269.865 449.268 269.097 cv
448.728 268.329 448.464 267.201 448.464 265.725 cv
448.464 264.345 448.788 263.241 449.448 262.425 cv
450.096 261.609 450.984 261.189 452.088 261.189 cv
452.376 261.189 452.676 261.225 452.988 261.273 cv
453.288 261.333 453.6 261.417 453.936 261.537 cv
f
459.072 262.125 mo
458.46 262.125 458.004 262.425 457.692 263.025 cv
457.38 263.625 457.236 264.525 457.236 265.725 cv
457.236 266.925 457.38 267.825 457.692 268.425 cv
458.004 269.025 458.46 269.325 459.072 269.325 cv
459.684 269.325 460.14 269.025 460.452 268.425 cv
460.752 267.825 460.908 266.925 460.908 265.725 cv
460.908 264.525 460.752 263.625 460.452 263.025 cv
460.14 262.425 459.684 262.125 459.072 262.125 cv
459.072 261.189 mo
460.044 261.189 460.788 261.585 461.316 262.353 cv
461.832 263.133 462.096 264.261 462.096 265.725 cv
462.096 267.201 461.832 268.329 461.316 269.097 cv
460.788 269.865 460.044 270.249 459.072 270.249 cv
458.088 270.249 457.332 269.865 456.816 269.097 cv
456.3 268.329 456.048 267.201 456.048 265.725 cv
456.048 264.261 456.3 263.133 456.816 262.353 cv
457.332 261.585 458.088 261.189 459.072 261.189 cv
f
483.132 256.968 mo
483.132 252.968 li
f
483.132 256.968 mo
483.132 252.968 li
@
483.132 29.88 mo
483.132 33.88 li
f
483.132 29.88 mo
483.132 33.88 li
@
477.366 261.345 mo
482.994 261.345 li
482.994 261.849 li
479.814 270.093 li
478.578 270.093 li
481.566 262.341 li
477.366 262.341 li
477.366 261.345 li
f
487.83 262.125 mo
487.218 262.125 486.762 262.425 486.45 263.025 cv
486.138 263.625 485.994 264.525 485.994 265.725 cv
485.994 266.925 486.138 267.825 486.45 268.425 cv
486.762 269.025 487.218 269.325 487.83 269.325 cv
488.442 269.325 488.898 269.025 489.21 268.425 cv
489.51 267.825 489.666 266.925 489.666 265.725 cv
489.666 264.525 489.51 263.625 489.21 263.025 cv
488.898 262.425 488.442 262.125 487.83 262.125 cv
487.83 261.189 mo
488.802 261.189 489.546 261.585 490.074 262.353 cv
490.59 263.133 490.854 264.261 490.854 265.725 cv
490.854 267.201 490.59 268.329 490.074 269.097 cv
489.546 269.865 488.802 270.249 487.83 270.249 cv
486.846 270.249 486.09 269.865 485.574 269.097 cv
485.058 268.329 484.806 267.201 484.806 265.725 cv
484.806 264.261 485.058 263.133 485.574 262.353 cv
486.09 261.585 486.846 261.189 487.83 261.189 cv
f
511.82 256.968 mo
511.82 252.968 li
f
511.82 256.968 mo
511.82 252.968 li
@
511.82 29.88 mo
511.82 33.88 li
f
511.82 29.88 mo
511.82 33.88 li
@
508.8 265.941 mo
508.236 265.941 507.792 266.097 507.468 266.397 cv
507.144 266.697 506.988 267.105 506.988 267.633 cv
506.988 268.161 507.144 268.581 507.468 268.881 cv
507.792 269.181 508.236 269.325 508.8 269.325 cv
509.352 269.325 509.796 269.181 510.12 268.869 cv
510.444 268.569 510.612 268.161 510.612 267.633 cv
510.612 267.105 510.444 266.697 510.132 266.397 cv
509.808 266.097 509.364 265.941 508.8 265.941 cv
507.612 265.437 mo
507.108 265.317 506.712 265.077 506.424 264.729 cv
506.136 264.381 506.004 263.961 506.004 263.457 cv
506.004 262.761 506.244 262.209 506.748 261.801 cv
507.24 261.393 507.924 261.189 508.8 261.189 cv
509.664 261.189 510.348 261.393 510.852 261.801 cv
511.344 262.209 511.596 262.761 511.596 263.457 cv
511.596 263.961 511.452 264.381 511.164 264.729 cv
510.876 265.077 510.492 265.317 509.988 265.437 cv
510.552 265.569 510.996 265.833 511.32 266.217 cv
511.632 266.601 511.8 267.081 511.8 267.633 cv
511.8 268.485 511.536 269.133 511.02 269.577 cv
510.492 270.033 509.76 270.249 508.8 270.249 cv
507.828 270.249 507.084 270.033 506.568 269.577 cv
506.052 269.133 505.8 268.485 505.8 267.633 cv
505.8 267.081 505.956 266.601 506.28 266.217 cv
506.592 265.833 507.036 265.569 507.612 265.437 cv
507.18 263.565 mo
507.18 264.021 507.312 264.381 507.6 264.633 cv
507.888 264.885 508.284 265.005 508.8 265.005 cv
509.304 265.005 509.7 264.885 509.988 264.633 cv
510.276 264.381 510.42 264.021 510.42 263.565 cv
510.42 263.109 510.276 262.761 509.988 262.509 cv
509.7 262.257 509.304 262.125 508.8 262.125 cv
508.284 262.125 507.888 262.257 507.6 262.509 cv
507.312 262.761 507.18 263.109 507.18 263.565 cv
f
516.432 262.125 mo
515.82 262.125 515.364 262.425 515.052 263.025 cv
514.74 263.625 514.596 264.525 514.596 265.725 cv
514.596 266.925 514.74 267.825 515.052 268.425 cv
515.364 269.025 515.82 269.325 516.432 269.325 cv
517.044 269.325 517.5 269.025 517.812 268.425 cv
518.112 267.825 518.268 266.925 518.268 265.725 cv
518.268 264.525 518.112 263.625 517.812 263.025 cv
517.5 262.425 517.044 262.125 516.432 262.125 cv
516.432 261.189 mo
517.404 261.189 518.148 261.585 518.676 262.353 cv
519.192 263.133 519.456 264.261 519.456 265.725 cv
519.456 267.201 519.192 268.329 518.676 269.097 cv
518.148 269.865 517.404 270.249 516.432 270.249 cv
515.448 270.249 514.692 269.865 514.176 269.097 cv
513.66 268.329 513.408 267.201 513.408 265.725 cv
513.408 264.261 513.66 263.133 514.176 262.353 cv
514.692 261.585 515.448 261.189 516.432 261.189 cv
f
540.508 256.968 mo
540.508 252.968 li
f
540.508 256.968 mo
540.508 252.968 li
@
540.508 29.88 mo
540.508 33.88 li
f
540.508 29.88 mo
540.508 33.88 li
@
534.961 269.913 mo
534.961 268.833 li
535.249 268.977 535.549 269.085 535.861 269.157 cv
536.161 269.229 536.461 269.265 536.761 269.265 cv
537.529 269.265 538.129 269.013 538.537 268.485 cv
538.945 267.957 539.185 267.165 539.257 266.085 cv
539.017 266.421 538.729 266.685 538.393 266.865 cv
538.045 267.045 537.661 267.129 537.241 267.129 cv
536.353 267.129 535.657 266.865 535.153 266.337 cv
534.649 265.809 534.397 265.089 534.397 264.165 cv
534.397 263.277 534.661 262.557 535.189 262.005 cv
535.717 261.465 536.425 261.189 537.313 261.189 cv
538.321 261.189 539.101 261.585 539.629 262.353 cv
540.157 263.133 540.433 264.261 540.433 265.725 cv
540.433 267.117 540.097 268.209 539.449 269.025 cv
538.789 269.841 537.913 270.249 536.809 270.249 cv
536.509 270.249 536.209 270.213 535.909 270.165 cv
535.597 270.117 535.285 270.033 534.961 269.913 cv
537.313 266.205 mo
537.841 266.205 538.261 266.025 538.573 265.665 cv
538.885 265.305 539.041 264.801 539.041 264.165 cv
539.041 263.541 538.885 263.037 538.573 262.677 cv
538.261 262.317 537.841 262.125 537.313 262.125 cv
536.785 262.125 536.365 262.317 536.053 262.677 cv
535.741 263.037 535.585 263.541 535.585 264.165 cv
535.585 264.801 535.741 265.305 536.053 265.665 cv
536.365 266.025 536.785 266.205 537.313 266.205 cv
f
545.089 262.125 mo
544.477 262.125 544.021 262.425 543.709 263.025 cv
543.397 263.625 543.253 264.525 543.253 265.725 cv
543.253 266.925 543.397 267.825 543.709 268.425 cv
544.021 269.025 544.477 269.325 545.089 269.325 cv
545.701 269.325 546.157 269.025 546.469 268.425 cv
546.769 267.825 546.925 266.925 546.925 265.725 cv
546.925 264.525 546.769 263.625 546.469 263.025 cv
546.157 262.425 545.701 262.125 545.089 262.125 cv
545.089 261.189 mo
546.061 261.189 546.805 261.585 547.333 262.353 cv
547.849 263.133 548.113 264.261 548.113 265.725 cv
548.113 267.201 547.849 268.329 547.333 269.097 cv
546.805 269.865 546.061 270.249 545.089 270.249 cv
544.105 270.249 543.349 269.865 542.833 269.097 cv
542.317 268.329 542.065 267.201 542.065 265.725 cv
542.065 264.261 542.317 263.133 542.833 262.353 cv
543.349 261.585 544.105 261.189 545.089 261.189 cv
f
52.812 256.968 mo
56.812 256.968 li
f
52.812 256.968 mo
56.812 256.968 li
@
569.196 256.968 mo
565.196 256.968 li
f
569.196 256.968 mo
565.196 256.968 li
@
46.5811 252.312 mo
45.9691 252.312 45.5131 252.612 45.2011 253.212 cv
44.8891 253.812 44.7451 254.712 44.7451 255.912 cv
44.7451 257.112 44.8891 258.012 45.2011 258.612 cv
45.5131 259.212 45.9691 259.512 46.5811 259.512 cv
47.1931 259.512 47.6491 259.212 47.9611 258.612 cv
48.2611 258.012 48.4171 257.112 48.4171 255.912 cv
48.4171 254.712 48.2611 253.812 47.9611 253.212 cv
47.6491 252.612 47.1931 252.312 46.5811 252.312 cv
46.5811 251.376 mo
47.5531 251.376 48.2971 251.772 48.8251 252.54 cv
49.3411 253.32 49.6051 254.448 49.6051 255.912 cv
49.6051 257.388 49.3411 258.516 48.8251 259.284 cv
48.2971 260.052 47.5531 260.436 46.5811 260.436 cv
45.5971 260.436 44.8411 260.052 44.3251 259.284 cv
43.8091 258.516 43.5571 257.388 43.5571 255.912 cv
43.5571 254.448 43.8091 253.32 44.3251 252.54 cv
44.8411 251.772 45.5971 251.376 46.5811 251.376 cv
f
52.812 224.527 mo
56.812 224.527 li
f
52.812 224.527 mo
56.812 224.527 li
@
569.196 224.527 mo
565.196 224.527 li
f
569.196 224.527 mo
565.196 224.527 li
@
36.5455 219.091 mo
41.1895 219.091 li
41.1895 220.087 li
37.6255 220.087 li
37.6255 222.235 li
37.7935 222.175 37.9735 222.127 38.1415 222.103 cv
38.3095 222.079 38.4895 222.055 38.6575 222.055 cv
39.6295 222.055 40.3975 222.331 40.9735 222.859 cv
41.5495 223.399 41.8375 224.119 41.8375 225.031 cv
41.8375 225.979 41.5375 226.711 40.9495 227.227 cv
40.3615 227.743 39.5335 227.995 38.4775 227.995 cv
38.1055 227.995 37.7335 227.959 37.3495 227.911 cv
36.9655 227.851 36.5815 227.767 36.1735 227.635 cv
36.1735 226.447 li
36.5215 226.639 36.8815 226.783 37.2655 226.879 cv
37.6375 226.975 38.0335 227.011 38.4535 227.011 cv
39.1255 227.011 39.6655 226.843 40.0615 226.483 cv
40.4455 226.123 40.6495 225.643 40.6495 225.031 cv
40.6495 224.431 40.4455 223.951 40.0615 223.591 cv
39.6655 223.231 39.1255 223.051 38.4535 223.051 cv
38.1415 223.051 37.8175 223.087 37.5055 223.159 cv
37.1935 223.231 36.8695 223.339 36.5455 223.483 cv
36.5455 219.091 li
f
46.6975 219.871 mo
46.0855 219.871 45.6295 220.171 45.3175 220.771 cv
45.0055 221.371 44.8615 222.271 44.8615 223.471 cv
44.8615 224.671 45.0055 225.571 45.3175 226.171 cv
45.6295 226.771 46.0855 227.071 46.6975 227.071 cv
47.3095 227.071 47.7655 226.771 48.0775 226.171 cv
48.3775 225.571 48.5335 224.671 48.5335 223.471 cv
48.5335 222.271 48.3775 221.371 48.0775 220.771 cv
47.7655 220.171 47.3095 219.871 46.6975 219.871 cv
46.6975 218.935 mo
47.6695 218.935 48.4135 219.331 48.9415 220.099 cv
49.4575 220.879 49.7215 222.007 49.7215 223.471 cv
49.7215 224.947 49.4575 226.075 48.9415 226.843 cv
48.4135 227.611 47.6695 227.995 46.6975 227.995 cv
45.7135 227.995 44.9575 227.611 44.4415 226.843 cv
43.9255 226.075 43.6735 224.947 43.6735 223.471 cv
43.6735 222.007 43.9255 220.879 44.4415 220.099 cv
44.9575 219.331 45.7135 218.935 46.6975 218.935 cv
f
52.812 192.086 mo
56.812 192.086 li
f
52.812 192.086 mo
56.812 192.086 li
@
569.196 192.086 mo
565.196 192.086 li
f
569.196 192.086 mo
565.196 192.086 li
@
29.4875 194.402 mo
31.4195 194.402 li
31.4195 187.73 li
29.3195 188.15 li
29.3195 187.07 li
31.4075 186.65 li
32.5955 186.65 li
32.5955 194.402 li
34.5275 194.402 li
34.5275 195.398 li
29.4875 195.398 li
29.4875 194.402 li
f
39.4475 187.43 mo
38.8355 187.43 38.3795 187.73 38.0675 188.33 cv
37.7555 188.93 37.6115 189.83 37.6115 191.03 cv
37.6115 192.23 37.7555 193.13 38.0675 193.73 cv
38.3795 194.33 38.8355 194.63 39.4475 194.63 cv
40.0595 194.63 40.5155 194.33 40.8275 193.73 cv
41.1275 193.13 41.2835 192.23 41.2835 191.03 cv
41.2835 189.83 41.1275 188.93 40.8275 188.33 cv
40.5155 187.73 40.0595 187.43 39.4475 187.43 cv
39.4475 186.494 mo
40.4195 186.494 41.1635 186.89 41.6915 187.658 cv
42.2075 188.438 42.4715 189.566 42.4715 191.03 cv
42.4715 192.506 42.2075 193.634 41.6915 194.402 cv
41.1635 195.17 40.4195 195.554 39.4475 195.554 cv
38.4635 195.554 37.7075 195.17 37.1915 194.402 cv
36.6755 193.634 36.4235 192.506 36.4235 191.03 cv
36.4235 189.566 36.6755 188.438 37.1915 187.658 cv
37.7075 186.89 38.4635 186.494 39.4475 186.494 cv
f
47.0795 187.43 mo
46.4675 187.43 46.0115 187.73 45.6995 188.33 cv
45.3875 188.93 45.2435 189.83 45.2435 191.03 cv
45.2435 192.23 45.3875 193.13 45.6995 193.73 cv
46.0115 194.33 46.4675 194.63 47.0795 194.63 cv
47.6915 194.63 48.1475 194.33 48.4595 193.73 cv
48.7595 193.13 48.9155 192.23 48.9155 191.03 cv
48.9155 189.83 48.7595 188.93 48.4595 188.33 cv
48.1475 187.73 47.6915 187.43 47.0795 187.43 cv
47.0795 186.494 mo
48.0515 186.494 48.7955 186.89 49.3235 187.658 cv
49.8395 188.438 50.1035 189.566 50.1035 191.03 cv
50.1035 192.506 49.8395 193.634 49.3235 194.402 cv
48.7955 195.17 48.0515 195.554 47.0795 195.554 cv
46.0955 195.554 45.3395 195.17 44.8235 194.402 cv
44.3075 193.634 44.0555 192.506 44.0555 191.03 cv
44.0555 189.566 44.3075 188.438 44.8235 187.658 cv
45.3395 186.89 46.0955 186.494 47.0795 186.494 cv
f
52.812 159.645 mo
56.812 159.645 li
f
52.812 159.645 mo
56.812 159.645 li
@
569.196 159.645 mo
565.196 159.645 li
f
569.196 159.645 mo
565.196 159.645 li
@
29.4875 161.961 mo
31.4195 161.961 li
31.4195 155.289 li
29.3195 155.709 li
29.3195 154.629 li
31.4075 154.209 li
32.5955 154.209 li
32.5955 161.961 li
34.5275 161.961 li
34.5275 162.957 li
29.4875 162.957 li
29.4875 161.961 li
f
36.9275 154.209 mo
41.5715 154.209 li
41.5715 155.205 li
38.0075 155.205 li
38.0075 157.353 li
38.1755 157.293 38.3555 157.245 38.5235 157.221 cv
38.6915 157.197 38.8715 157.173 39.0395 157.173 cv
40.0115 157.173 40.7795 157.449 41.3555 157.977 cv
41.9315 158.517 42.2195 159.237 42.2195 160.149 cv
42.2195 161.097 41.9195 161.829 41.3315 162.345 cv
40.7435 162.861 39.9155 163.113 38.8595 163.113 cv
38.4875 163.113 38.1155 163.077 37.7315 163.029 cv
37.3475 162.969 36.9635 162.885 36.5555 162.753 cv
36.5555 161.565 li
36.9035 161.757 37.2635 161.901 37.6475 161.997 cv
38.0195 162.093 38.4155 162.129 38.8355 162.129 cv
39.5075 162.129 40.0475 161.961 40.4435 161.601 cv
40.8275 161.241 41.0315 160.761 41.0315 160.149 cv
41.0315 159.549 40.8275 159.069 40.4435 158.709 cv
40.0475 158.349 39.5075 158.169 38.8355 158.169 cv
38.5235 158.169 38.1995 158.205 37.8875 158.277 cv
37.5755 158.349 37.2515 158.457 36.9275 158.601 cv
36.9275 154.209 li
f
47.0795 154.989 mo
46.4675 154.989 46.0115 155.289 45.6995 155.889 cv
45.3875 156.489 45.2435 157.389 45.2435 158.589 cv
45.2435 159.789 45.3875 160.689 45.6995 161.289 cv
46.0115 161.889 46.4675 162.189 47.0795 162.189 cv
47.6915 162.189 48.1475 161.889 48.4595 161.289 cv
48.7595 160.689 48.9155 159.789 48.9155 158.589 cv
48.9155 157.389 48.7595 156.489 48.4595 155.889 cv
48.1475 155.289 47.6915 154.989 47.0795 154.989 cv
47.0795 154.053 mo
48.0515 154.053 48.7955 154.449 49.3235 155.217 cv
49.8395 155.997 50.1035 157.125 50.1035 158.589 cv
50.1035 160.065 49.8395 161.193 49.3235 161.961 cv
48.7955 162.729 48.0515 163.113 47.0795 163.113 cv
46.0955 163.113 45.3395 162.729 44.8235 161.961 cv
44.3075 161.193 44.0555 160.065 44.0555 158.589 cv
44.0555 157.125 44.3075 155.997 44.8235 155.217 cv
45.3395 154.449 46.0955 154.053 47.0795 154.053 cv
f
52.812 127.203 mo
56.812 127.203 li
f
52.812 127.203 mo
56.812 127.203 li
@
569.196 127.203 mo
565.196 127.203 li
f
569.196 127.203 mo
565.196 127.203 li
@
29.866 129.52 mo
33.994 129.52 li
33.994 130.516 li
28.438 130.516 li
28.438 129.52 li
28.882 129.064 29.494 128.44 30.274 127.648 cv
31.042 126.868 31.534 126.364 31.738 126.136 cv
32.122 125.716 32.386 125.356 32.53 125.056 cv
32.674 124.768 32.758 124.468 32.758 124.18 cv
32.758 123.724 32.59 123.34 32.266 123.052 cv
31.942 122.764 31.522 122.608 30.994 122.608 cv
30.622 122.608 30.226 122.68 29.818 122.8 cv
29.41 122.932 28.966 123.124 28.498 123.388 cv
28.498 122.188 li
28.978 121.996 29.422 121.852 29.83 121.756 cv
30.238 121.66 30.622 121.612 30.97 121.612 cv
31.87 121.612 32.59 121.84 33.13 122.296 cv
33.67 122.752 33.946 123.352 33.946 124.108 cv
33.946 124.468 33.874 124.816 33.742 125.128 cv
33.61 125.452 33.37 125.836 33.01 126.268 cv
32.914 126.388 32.602 126.712 32.074 127.252 cv
31.546 127.792 30.814 128.548 29.866 129.52 cv
f
39.01 122.548 mo
38.398 122.548 37.942 122.848 37.63 123.448 cv
37.318 124.048 37.174 124.948 37.174 126.148 cv
37.174 127.348 37.318 128.248 37.63 128.848 cv
37.942 129.448 38.398 129.748 39.01 129.748 cv
39.622 129.748 40.078 129.448 40.39 128.848 cv
40.69 128.248 40.846 127.348 40.846 126.148 cv
40.846 124.948 40.69 124.048 40.39 123.448 cv
40.078 122.848 39.622 122.548 39.01 122.548 cv
39.01 121.612 mo
39.982 121.612 40.726 122.008 41.254 122.776 cv
41.77 123.556 42.034 124.684 42.034 126.148 cv
42.034 127.624 41.77 128.752 41.254 129.52 cv
40.726 130.288 39.982 130.672 39.01 130.672 cv
38.026 130.672 37.27 130.288 36.754 129.52 cv
36.238 128.752 35.986 127.624 35.986 126.148 cv
35.986 124.684 36.238 123.556 36.754 122.776 cv
37.27 122.008 38.026 121.612 39.01 121.612 cv
f
46.642 122.548 mo
46.03 122.548 45.574 122.848 45.262 123.448 cv
44.95 124.048 44.806 124.948 44.806 126.148 cv
44.806 127.348 44.95 128.248 45.262 128.848 cv
45.574 129.448 46.03 129.748 46.642 129.748 cv
47.254 129.748 47.71 129.448 48.022 128.848 cv
48.322 128.248 48.478 127.348 48.478 126.148 cv
48.478 124.948 48.322 124.048 48.022 123.448 cv
47.71 122.848 47.254 122.548 46.642 122.548 cv
46.642 121.612 mo
47.614 121.612 48.358 122.008 48.886 122.776 cv
49.402 123.556 49.666 124.684 49.666 126.148 cv
49.666 127.624 49.402 128.752 48.886 129.52 cv
48.358 130.288 47.614 130.672 46.642 130.672 cv
45.658 130.672 44.902 130.288 44.386 129.52 cv
43.87 128.752 43.618 127.624 43.618 126.148 cv
43.618 124.684 43.87 123.556 44.386 122.776 cv
44.902 122.008 45.658 121.612 46.642 121.612 cv
f
52.812 94.7623 mo
56.812 94.7623 li
f
52.812 94.7623 mo
56.812 94.7623 li
@
569.196 94.7623 mo
565.196 94.7623 li
f
569.196 94.7623 mo
565.196 94.7623 li
@
29.866 97.0788 mo
33.994 97.0788 li
33.994 98.0748 li
28.438 98.0748 li
28.438 97.0788 li
28.882 96.6228 29.494 95.9988 30.274 95.2068 cv
31.042 94.4268 31.534 93.9228 31.738 93.6948 cv
32.122 93.2748 32.386 92.9148 32.53 92.6148 cv
32.674 92.3268 32.758 92.0268 32.758 91.7388 cv
32.758 91.2828 32.59 90.8988 32.266 90.6108 cv
31.942 90.3228 31.522 90.1668 30.994 90.1668 cv
30.622 90.1668 30.226 90.2388 29.818 90.3588 cv
29.41 90.4908 28.966 90.6828 28.498 90.9468 cv
28.498 89.7468 li
28.978 89.5548 29.422 89.4108 29.83 89.3148 cv
30.238 89.2188 30.622 89.1708 30.97 89.1708 cv
31.87 89.1708 32.59 89.3988 33.13 89.8548 cv
33.67 90.3108 33.946 90.9108 33.946 91.6668 cv
33.946 92.0268 33.874 92.3748 33.742 92.6868 cv
33.61 93.0108 33.37 93.3948 33.01 93.8268 cv
32.914 93.9468 32.602 94.2708 32.074 94.8108 cv
31.546 95.3508 30.814 96.1068 29.866 97.0788 cv
f
36.49 89.3268 mo
41.134 89.3268 li
41.134 90.3228 li
37.57 90.3228 li
37.57 92.4708 li
37.738 92.4108 37.918 92.3628 38.086 92.3388 cv
38.254 92.3148 38.434 92.2908 38.602 92.2908 cv
39.574 92.2908 40.342 92.5668 40.918 93.0948 cv
41.494 93.6348 41.782 94.3548 41.782 95.2668 cv
41.782 96.2148 41.482 96.9468 40.894 97.4628 cv
40.306 97.9788 39.478 98.2308 38.422 98.2308 cv
38.05 98.2308 37.678 98.1948 37.294 98.1468 cv
36.91 98.0868 36.526 98.0028 36.118 97.8708 cv
36.118 96.6828 li
36.466 96.8748 36.826 97.0188 37.21 97.1148 cv
37.582 97.2108 37.978 97.2468 38.398 97.2468 cv
39.07 97.2468 39.61 97.0788 40.006 96.7188 cv
40.39 96.3588 40.594 95.8788 40.594 95.2668 cv
40.594 94.6668 40.39 94.1868 40.006 93.8268 cv
39.61 93.4668 39.07 93.2868 38.398 93.2868 cv
38.086 93.2868 37.762 93.3228 37.45 93.3948 cv
37.138 93.4668 36.814 93.5748 36.49 93.7188 cv
36.49 89.3268 li
f
46.642 90.1068 mo
46.03 90.1068 45.574 90.4068 45.262 91.0068 cv
44.95 91.6068 44.806 92.5068 44.806 93.7068 cv
44.806 94.9068 44.95 95.8068 45.262 96.4068 cv
45.574 97.0068 46.03 97.3068 46.642 97.3068 cv
47.254 97.3068 47.71 97.0068 48.022 96.4068 cv
48.322 95.8068 48.478 94.9068 48.478 93.7068 cv
48.478 92.5068 48.322 91.6068 48.022 91.0068 cv
47.71 90.4068 47.254 90.1068 46.642 90.1068 cv
46.642 89.1708 mo
47.614 89.1708 48.358 89.5668 48.886 90.3348 cv
49.402 91.1148 49.666 92.2428 49.666 93.7068 cv
49.666 95.1828 49.402 96.3108 48.886 97.0788 cv
48.358 97.8468 47.614 98.2308 46.642 98.2308 cv
45.658 98.2308 44.902 97.8468 44.386 97.0788 cv
43.87 96.3108 43.618 95.1828 43.618 93.7068 cv
43.618 92.2428 43.87 91.1148 44.386 90.3348 cv
44.902 89.5668 45.658 89.1708 46.642 89.1708 cv
f
52.812 62.3211 mo
56.812 62.3211 li
f
52.812 62.3211 mo
56.812 62.3211 li
@
569.196 62.3211 mo
565.196 62.3211 li
f
569.196 62.3211 mo
565.196 62.3211 li
@
32.4809 60.9176 mo
33.0449 61.0376 33.4889 61.2896 33.8009 61.6736 cv
34.1129 62.0576 34.2809 62.5376 34.2809 63.0896 cv
34.2809 63.9536 33.9809 64.6256 33.3929 65.0936 cv
32.7929 65.5616 31.9529 65.7896 30.8609 65.7896 cv
30.4889 65.7896 30.1049 65.7536 29.7209 65.6816 cv
29.3369 65.6216 28.9289 65.5136 28.5209 65.3696 cv
28.5209 64.2296 li
28.8449 64.4216 29.2049 64.5656 29.6009 64.6616 cv
29.9849 64.7576 30.3929 64.8056 30.8249 64.8056 cv
31.5689 64.8056 32.1329 64.6616 32.5169 64.3736 cv
32.9009 64.0856 33.1049 63.6536 33.1049 63.0896 cv
33.1049 62.5856 32.9249 62.1776 32.5649 61.8896 cv
32.2049 61.6016 31.7009 61.4456 31.0529 61.4456 cv
30.0329 61.4456 li
30.0329 60.4736 li
31.1009 60.4736 li
31.6769 60.4736 32.1209 60.3656 32.4329 60.1256 cv
32.7449 59.8976 32.9009 59.5616 32.9009 59.1176 cv
32.9009 58.6736 32.7329 58.3256 32.4209 58.0856 cv
32.0969 57.8456 31.6409 57.7256 31.0529 57.7256 cv
30.7289 57.7256 30.3809 57.7616 30.0089 57.8336 cv
29.6369 57.9056 29.2289 58.0136 28.7849 58.1576 cv
28.7849 57.1016 li
29.2289 56.9816 29.6489 56.8856 30.0449 56.8256 cv
30.4289 56.7656 30.8009 56.7296 31.1609 56.7296 cv
32.0489 56.7296 32.7569 56.9336 33.2849 57.3416 cv
33.8129 57.7496 34.0769 58.3016 34.0769 58.9976 cv
34.0769 59.4776 33.9329 59.8856 33.6569 60.2216 cv
33.3809 60.5576 32.9849 60.7976 32.4809 60.9176 cv
f
39.0569 57.6656 mo
38.4449 57.6656 37.9889 57.9656 37.6769 58.5656 cv
37.3649 59.1656 37.2209 60.0656 37.2209 61.2656 cv
37.2209 62.4656 37.3649 63.3656 37.6769 63.9656 cv
37.9889 64.5656 38.4449 64.8656 39.0569 64.8656 cv
39.6689 64.8656 40.1249 64.5656 40.4369 63.9656 cv
40.7369 63.3656 40.8929 62.4656 40.8929 61.2656 cv
40.8929 60.0656 40.7369 59.1656 40.4369 58.5656 cv
40.1249 57.9656 39.6689 57.6656 39.0569 57.6656 cv
39.0569 56.7296 mo
40.0289 56.7296 40.7729 57.1256 41.3009 57.8936 cv
41.8169 58.6736 42.0809 59.8016 42.0809 61.2656 cv
42.0809 62.7416 41.8169 63.8696 41.3009 64.6376 cv
40.7729 65.4056 40.0289 65.7896 39.0569 65.7896 cv
38.0729 65.7896 37.3169 65.4056 36.8009 64.6376 cv
36.2849 63.8696 36.0329 62.7416 36.0329 61.2656 cv
36.0329 59.8016 36.2849 58.6736 36.8009 57.8936 cv
37.3169 57.1256 38.0729 56.7296 39.0569 56.7296 cv
f
46.6889 57.6656 mo
46.0769 57.6656 45.6209 57.9656 45.3089 58.5656 cv
44.9969 59.1656 44.8529 60.0656 44.8529 61.2656 cv
44.8529 62.4656 44.9969 63.3656 45.3089 63.9656 cv
45.6209 64.5656 46.0769 64.8656 46.6889 64.8656 cv
47.3009 64.8656 47.7569 64.5656 48.0689 63.9656 cv
48.3689 63.3656 48.5249 62.4656 48.5249 61.2656 cv
48.5249 60.0656 48.3689 59.1656 48.0689 58.5656 cv
47.7569 57.9656 47.3009 57.6656 46.6889 57.6656 cv
46.6889 56.7296 mo
47.6609 56.7296 48.4049 57.1256 48.9329 57.8936 cv
49.4489 58.6736 49.7129 59.8016 49.7129 61.2656 cv
49.7129 62.7416 49.4489 63.8696 48.9329 64.6376 cv
48.4049 65.4056 47.6609 65.7896 46.6889 65.7896 cv
45.7049 65.7896 44.9489 65.4056 44.4329 64.6376 cv
43.9169 63.8696 43.6649 62.7416 43.6649 61.2656 cv
43.6649 59.8016 43.9169 58.6736 44.4329 57.8936 cv
44.9489 57.1256 45.7049 56.7296 46.6889 56.7296 cv
f
52.812 29.88 mo
56.812 29.88 li
f
52.812 29.88 mo
56.812 29.88 li
@
569.196 29.88 mo
565.196 29.88 li
f
569.196 29.88 mo
565.196 29.88 li
@
32.4809 28.4765 mo
33.0449 28.5965 33.4889 28.8485 33.8009 29.2325 cv
34.1129 29.6165 34.2809 30.0965 34.2809 30.6485 cv
34.2809 31.5125 33.9809 32.1845 33.3929 32.6525 cv
32.7929 33.1205 31.9529 33.3485 30.8609 33.3485 cv
30.4889 33.3485 30.1049 33.3125 29.7209 33.2405 cv
29.3369 33.1805 28.9289 33.0725 28.5209 32.9285 cv
28.5209 31.7885 li
28.8449 31.9805 29.2049 32.1245 29.6009 32.2205 cv
29.9849 32.3165 30.3929 32.3645 30.8249 32.3645 cv
31.5689 32.3645 32.1329 32.2205 32.5169 31.9325 cv
32.9009 31.6445 33.1049 31.2125 33.1049 30.6485 cv
33.1049 30.1445 32.9249 29.7365 32.5649 29.4485 cv
32.2049 29.1605 31.7009 29.0045 31.0529 29.0045 cv
30.0329 29.0045 li
30.0329 28.0325 li
31.1009 28.0325 li
31.6769 28.0325 32.1209 27.9245 32.4329 27.6845 cv
32.7449 27.4565 32.9009 27.1205 32.9009 26.6765 cv
32.9009 26.2325 32.7329 25.8845 32.4209 25.6445 cv
32.0969 25.4045 31.6409 25.2845 31.0529 25.2845 cv
30.7289 25.2845 30.3809 25.3205 30.0089 25.3925 cv
29.6369 25.4645 29.2289 25.5725 28.7849 25.7165 cv
28.7849 24.6605 li
29.2289 24.5405 29.6489 24.4445 30.0449 24.3845 cv
30.4289 24.3245 30.8009 24.2885 31.1609 24.2885 cv
32.0489 24.2885 32.7569 24.4925 33.2849 24.9005 cv
33.8129 25.3085 34.0769 25.8605 34.0769 26.5565 cv
34.0769 27.0365 33.9329 27.4445 33.6569 27.7805 cv
33.3809 28.1165 32.9849 28.3565 32.4809 28.4765 cv
f
36.5369 24.4445 mo
41.1809 24.4445 li
41.1809 25.4405 li
37.6169 25.4405 li
37.6169 27.5885 li
37.7849 27.5285 37.9649 27.4805 38.1329 27.4565 cv
38.3009 27.4325 38.4809 27.4085 38.6489 27.4085 cv
39.6209 27.4085 40.3889 27.6845 40.9649 28.2125 cv
41.5409 28.7525 41.8289 29.4725 41.8289 30.3845 cv
41.8289 31.3325 41.5289 32.0645 40.9409 32.5805 cv
40.3529 33.0965 39.5249 33.3485 38.4689 33.3485 cv
38.0969 33.3485 37.7249 33.3125 37.3409 33.2645 cv
36.9569 33.2045 36.5729 33.1205 36.1649 32.9885 cv
36.1649 31.8005 li
36.5129 31.9925 36.8729 32.1365 37.2569 32.2325 cv
37.6289 32.3285 38.0249 32.3645 38.4449 32.3645 cv
39.1169 32.3645 39.6569 32.1965 40.0529 31.8365 cv
40.4369 31.4765 40.6409 30.9965 40.6409 30.3845 cv
40.6409 29.7845 40.4369 29.3045 40.0529 28.9445 cv
39.6569 28.5845 39.1169 28.4045 38.4449 28.4045 cv
38.1329 28.4045 37.8089 28.4405 37.4969 28.5125 cv
37.1849 28.5845 36.8609 28.6925 36.5369 28.8365 cv
36.5369 24.4445 li
f
46.6889 25.2245 mo
46.0769 25.2245 45.6209 25.5245 45.3089 26.1245 cv
44.9969 26.7245 44.8529 27.6245 44.8529 28.8245 cv
44.8529 30.0245 44.9969 30.9245 45.3089 31.5245 cv
45.6209 32.1245 46.0769 32.4245 46.6889 32.4245 cv
47.3009 32.4245 47.7569 32.1245 48.0689 31.5245 cv
48.3689 30.9245 48.5249 30.0245 48.5249 28.8245 cv
48.5249 27.6245 48.3689 26.7245 48.0689 26.1245 cv
47.7569 25.5245 47.3009 25.2245 46.6889 25.2245 cv
46.6889 24.2885 mo
47.6609 24.2885 48.4049 24.6845 48.9329 25.4525 cv
49.4489 26.2325 49.7129 27.3605 49.7129 28.8245 cv
49.7129 30.3005 49.4489 31.4285 48.9329 32.1965 cv
48.4049 32.9645 47.6609 33.3485 46.6889 33.3485 cv
45.7049 33.3485 44.9489 32.9645 44.4329 32.1965 cv
43.9169 31.4285 43.6649 30.3005 43.6649 28.8245 cv
43.6649 27.3605 43.9169 26.2325 44.4329 25.4525 cv
44.9489 24.6845 45.7049 24.2885 46.6889 24.2885 cv
f
5 22.6719 mo
193.219 22.6719 li
193.219 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
5 22.6719 mo
193.219 22.6719 li
193.219 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
12 13.0938 mo
26 13.0938 li
@
9 16.0938 mo
15 16.0938 li
15 10.0938 li
9 10.0938 li
cp
f
.5 lw
0 lc
0 lj
9 16.0938 mo
15 16.0938 li
15 10.0938 li
9 10.0938 li
cp
@
23 16.0938 mo
29 16.0938 li
29 10.0938 li
23 10.0938 li
cp
f
23 16.0938 mo
29 16.0938 li
29 10.0938 li
23 10.0938 li
cp
@
40.71 8.99375 mo
40.71 9.74375 li
39.85 9.74375 li
39.53 9.74375 39.3 9.81375 39.18 9.94375 cv
39.05 10.0737 38.99 10.3037 38.99 10.6437 cv
38.99 11.1237 li
40.47 11.1237 li
40.47 11.8237 li
38.99 11.8237 li
38.99 16.5938 li
38.09 16.5938 li
38.09 11.8237 li
37.23 11.8237 li
37.23 11.1237 li
38.09 11.1237 li
38.09 10.7437 li
38.09 10.1437 38.23 9.69375 38.51 9.41375 cv
38.79 9.13375 39.24 8.99375 39.86 8.99375 cv
40.71 8.99375 li
f
45.0601 11.9537 mo
45.0601 8.99375 li
45.9601 8.99375 li
45.9601 16.5938 li
45.0601 16.5938 li
45.0601 15.7738 li
44.87 16.1038 44.6301 16.3438 44.34 16.4937 cv
44.05 16.6437 43.71 16.7237 43.3101 16.7237 cv
42.6501 16.7237 42.1101 16.4638 41.69 15.9438 cv
41.2701 15.4237 41.07 14.7238 41.07 13.8637 cv
41.07 13.0037 41.2701 12.3137 41.69 11.7837 cv
42.1101 11.2638 42.6501 10.9937 43.3101 10.9937 cv
43.71 10.9937 44.05 11.0737 44.34 11.2337 cv
44.6301 11.3937 44.87 11.6337 45.0601 11.9537 cv
42 13.8637 mo
42 14.5238 42.1301 15.0437 42.4001 15.4237 cv
42.6701 15.8038 43.05 15.9838 43.5301 15.9838 cv
44 15.9838 44.37 15.8038 44.6501 15.4237 cv
44.9201 15.0437 45.0601 14.5238 45.0601 13.8637 cv
45.0601 13.2037 44.9201 12.6937 44.6501 12.3137 cv
44.37 11.9338 44 11.7437 43.5301 11.7437 cv
43.05 11.7437 42.6701 11.9338 42.4001 12.3137 cv
42.1301 12.6937 42 13.2037 42 13.8637 cv
f
50.3 13.8438 mo
49.57 13.8438 49.07 13.9338 48.79 14.0938 cv
48.51 14.2638 48.37 14.5437 48.37 14.9438 cv
48.37 15.2638 48.47 15.5238 48.68 15.7037 cv
48.89 15.8938 49.18 15.9838 49.54 15.9838 cv
50.04 15.9838 50.44 15.8138 50.74 15.4537 cv
51.04 15.1038 51.19 14.6337 51.19 14.0437 cv
51.19 13.8438 li
50.3 13.8438 li
52.09 13.4738 mo
52.09 16.5938 li
51.19 16.5938 li
51.19 15.7638 li
50.98 16.1038 50.72 16.3438 50.42 16.4937 cv
50.12 16.6437 49.74 16.7237 49.3 16.7237 cv
48.74 16.7237 48.29 16.5737 47.96 16.2638 cv
47.63 15.9537 47.47 15.5337 47.47 15.0037 cv
47.47 14.3938 47.67 13.9338 48.09 13.6137 cv
48.5 13.3038 49.11 13.1437 49.93 13.1437 cv
51.19 13.1437 li
51.19 13.0538 li
51.19 12.6437 51.05 12.3237 50.78 12.0938 cv
50.51 11.8737 50.13 11.7537 49.64 11.7537 cv
49.32 11.7537 49.02 11.7937 48.72 11.8737 cv
48.42 11.9537 48.14 12.0637 47.87 12.2037 cv
47.87 11.3737 li
48.19 11.2537 48.51 11.1537 48.82 11.0938 cv
49.13 11.0337 49.43 10.9937 49.73 10.9937 cv
50.52 10.9937 51.11 11.2037 51.5 11.6137 cv
51.89 12.0238 52.09 12.6437 52.09 13.4738 cv
f
53.4901 13.4537 mo
56.1201 13.4537 li
56.1201 14.2537 li
53.4901 14.2537 li
53.4901 13.4537 li
f
61.49 11.3337 mo
61.49 12.1737 li
61.23 12.0337 60.98 11.9338 60.72 11.8637 cv
60.46 11.7937 60.21 11.7537 59.95 11.7537 cv
59.37 11.7537 58.91 11.9438 58.59 12.3137 cv
58.27 12.6838 58.11 13.2037 58.11 13.8637 cv
58.11 14.5337 58.27 15.0538 58.59 15.4237 cv
58.91 15.7937 59.37 15.9738 59.95 15.9738 cv
60.21 15.9738 60.46 15.9438 60.72 15.8737 cv
60.98 15.8038 61.23 15.6938 61.49 15.5538 cv
61.49 16.3838 li
61.23 16.5037 60.97 16.5938 60.71 16.6437 cv
60.44 16.6938 60.15 16.7237 59.85 16.7237 cv
59.03 16.7237 58.37 16.4737 57.89 15.9537 cv
57.4 15.4438 57.16 14.7437 57.16 13.8637 cv
57.16 12.9737 57.4 12.2738 57.89 11.7638 cv
58.38 11.2537 59.05 10.9937 59.91 10.9937 cv
60.19 10.9937 60.46 11.0238 60.72 11.0837 cv
60.98 11.1437 61.24 11.2237 61.49 11.3337 cv
f
63.05 11.1237 mo
63.95 11.1237 li
63.95 16.5938 li
63.05 16.5938 li
63.05 11.1237 li
63.05 8.99375 mo
63.95 8.99375 li
63.95 10.1337 li
63.05 10.1337 li
63.05 8.99375 li
f
66.72 9.57375 mo
66.72 11.1237 li
68.57 11.1237 li
68.57 11.8237 li
66.72 11.8237 li
66.72 14.7937 li
66.72 15.2437 66.78 15.5337 66.9 15.6537 cv
67.02 15.7837 67.27 15.8438 67.65 15.8438 cv
68.57 15.8438 li
68.57 16.5938 li
67.65 16.5938 li
66.95 16.5938 66.47 16.4638 66.21 16.2038 cv
65.95 15.9438 65.82 15.4738 65.82 14.7937 cv
65.82 11.8237 li
65.16 11.8237 li
65.16 11.1237 li
65.82 11.1237 li
65.82 9.57375 li
66.72 9.57375 li
f
1 lw
1 lj
[6 6 ] 0 dsh
91.3281 13.0938 mo
105.328 13.0938 li
@
91.3281 17.3364 mo
93.8737 13.0938 li
91.3281 8.8511 li
88.7825 13.0938 li
cp
f
.5 lw
0 lj
[] 0 dsh
91.3281 17.3364 mo
93.8737 13.0938 li
91.3281 8.8511 li
88.7825 13.0938 li
cp
@
105.328 17.3364 mo
107.874 13.0938 li
105.328 8.8511 li
102.783 13.0938 li
cp
f
105.328 17.3364 mo
107.874 13.0938 li
105.328 8.8511 li
102.783 13.0938 li
cp
@
117.268 11.1237 mo
118.168 11.1237 li
118.168 16.5938 li
117.268 16.5938 li
117.268 11.1237 li
117.268 8.99375 mo
118.168 8.99375 li
118.168 10.1337 li
117.268 10.1337 li
117.268 8.99375 li
f
123.988 11.3337 mo
123.988 12.1737 li
123.728 12.0337 123.478 11.9338 123.218 11.8637 cv
122.958 11.7937 122.708 11.7537 122.448 11.7537 cv
121.868 11.7537 121.408 11.9438 121.088 12.3137 cv
120.768 12.6838 120.608 13.2037 120.608 13.8637 cv
120.608 14.5337 120.768 15.0538 121.088 15.4237 cv
121.408 15.7937 121.868 15.9738 122.448 15.9738 cv
122.708 15.9738 122.958 15.9438 123.218 15.8737 cv
123.478 15.8038 123.728 15.6938 123.988 15.5538 cv
123.988 16.3838 li
123.728 16.5037 123.468 16.5938 123.208 16.6437 cv
122.938 16.6938 122.648 16.7237 122.348 16.7237 cv
121.528 16.7237 120.868 16.4737 120.388 15.9537 cv
119.898 15.4438 119.658 14.7437 119.658 13.8637 cv
119.658 12.9737 119.898 12.2738 120.388 11.7638 cv
120.878 11.2537 121.548 10.9937 122.408 10.9937 cv
122.688 10.9937 122.958 11.0238 123.218 11.0837 cv
123.478 11.1437 123.738 11.2237 123.988 11.3337 cv
f
126.438 9.57375 mo
126.438 11.1237 li
128.288 11.1237 li
128.288 11.8237 li
126.438 11.8237 li
126.438 14.7937 li
126.438 15.2437 126.498 15.5337 126.618 15.6537 cv
126.738 15.7837 126.988 15.8438 127.368 15.8438 cv
128.288 15.8438 li
128.288 16.5938 li
127.368 16.5938 li
126.668 16.5938 126.188 16.4638 125.928 16.2038 cv
125.668 15.9438 125.538 15.4738 125.538 14.7937 cv
125.538 11.8237 li
124.878 11.8237 li
124.878 11.1237 li
125.538 11.1237 li
125.538 9.57375 li
126.438 9.57375 li
f
1 lw
1 lj
[1 3 ] 0 dsh
150.359 13.0938 mo
164.359 13.0938 li
@
gsave
147.109 16.3438 mo
153.609 16.3438 li
153.609 9.84375 li
147.109 9.84375 li
cp
clp
.5 lw
[] 0 dsh
150.359 16.0938 mo
151.155 16.0938 151.918 15.7777 152.481 15.2151 cv
153.043 14.6525 153.359 13.8894 153.359 13.0938 cv
153.359 12.2981 153.043 11.535 152.481 10.9724 cv
151.918 10.4098 151.155 10.0938 150.359 10.0938 cv
149.564 10.0938 148.801 10.4098 148.238 10.9724 cv
147.675 11.535 147.359 12.2981 147.359 13.0938 cv
147.359 13.8894 147.675 14.6525 148.238 15.2151 cv
148.801 15.7777 149.564 16.0938 150.359 16.0938 cv
cp
@
grestore
gsave
161.109 16.3438 mo
167.609 16.3438 li
167.609 9.84375 li
161.109 9.84375 li
cp
clp
.5 lw
[] 0 dsh
164.359 16.0938 mo
165.155 16.0938 165.918 15.7777 166.481 15.2151 cv
167.043 14.6525 167.359 13.8894 167.359 13.0938 cv
167.359 12.2981 167.043 11.535 166.481 10.9724 cv
165.918 10.4098 165.155 10.0938 164.359 10.0938 cv
163.564 10.0938 162.801 10.4098 162.238 10.9724 cv
161.675 11.535 161.359 12.2981 161.359 13.0938 cv
161.359 13.8894 161.675 14.6525 162.238 15.2151 cv
162.801 15.7777 163.564 16.0938 164.359 16.0938 cv
cp
@
grestore
179.789 11.2837 mo
179.789 12.1337 li
179.529 12.0138 179.269 11.9137 178.999 11.8438 cv
178.719 11.7837 178.439 11.7437 178.149 11.7437 cv
177.699 11.7437 177.359 11.8137 177.139 11.9537 cv
176.919 12.0938 176.809 12.2937 176.809 12.5637 cv
176.809 12.7738 176.889 12.9338 177.049 13.0538 cv
177.209 13.1737 177.529 13.2937 178.009 13.3937 cv
178.319 13.4637 li
178.959 13.6038 179.409 13.8038 179.679 14.0437 cv
179.939 14.2937 180.079 14.6438 180.079 15.0837 cv
180.079 15.5938 179.879 15.9937 179.479 16.2838 cv
179.079 16.5837 178.519 16.7237 177.819 16.7237 cv
177.519 16.7237 177.219 16.6938 176.899 16.6437 cv
176.579 16.5938 176.249 16.5138 175.899 16.3937 cv
175.899 15.4637 li
176.229 15.6438 176.559 15.7738 176.879 15.8538 cv
177.199 15.9438 177.519 15.9838 177.839 15.9838 cv
178.259 15.9838 178.589 15.9137 178.819 15.7738 cv
179.039 15.6337 179.159 15.4237 179.159 15.1537 cv
179.159 14.9137 179.069 14.7238 178.909 14.5938 cv
178.749 14.4637 178.389 14.3337 177.829 14.2137 cv
177.519 14.1437 li
176.959 14.0238 176.549 13.8438 176.309 13.6038 cv
176.059 13.3637 175.939 13.0337 175.939 12.6038 cv
175.939 12.0938 176.119 11.6937 176.479 11.4137 cv
176.839 11.1337 177.359 10.9937 178.039 10.9937 cv
178.369 10.9937 178.679 11.0238 178.979 11.0737 cv
179.269 11.1237 179.539 11.1937 179.789 11.2837 cv
f
185.449 11.3337 mo
185.449 12.1737 li
185.189 12.0337 184.939 11.9338 184.679 11.8637 cv
184.419 11.7937 184.169 11.7537 183.909 11.7537 cv
183.329 11.7537 182.869 11.9438 182.549 12.3137 cv
182.229 12.6838 182.069 13.2037 182.069 13.8637 cv
182.069 14.5337 182.229 15.0538 182.549 15.4237 cv
182.869 15.7937 183.329 15.9738 183.909 15.9738 cv
184.169 15.9738 184.419 15.9438 184.679 15.8737 cv
184.939 15.8038 185.189 15.6938 185.449 15.5538 cv
185.449 16.3838 li
185.189 16.5037 184.929 16.5938 184.669 16.6437 cv
184.399 16.6938 184.109 16.7237 183.809 16.7237 cv
182.989 16.7237 182.329 16.4737 181.849 15.9537 cv
181.359 15.4438 181.119 14.7437 181.119 13.8637 cv
181.119 12.9737 181.359 12.2738 181.849 11.7638 cv
182.339 11.2537 183.009 10.9937 183.869 10.9937 cv
184.149 10.9937 184.419 11.0238 184.679 11.0837 cv
184.939 11.1437 185.199 11.2237 185.449 11.3337 cv
f
187.899 9.57375 mo
187.899 11.1237 li
189.749 11.1237 li
189.749 11.8237 li
187.899 11.8237 li
187.899 14.7937 li
187.899 15.2437 187.959 15.5337 188.079 15.6537 cv
188.199 15.7837 188.449 15.8438 188.829 15.8438 cv
189.749 15.8438 li
189.749 16.5938 li
188.829 16.5938 li
188.129 16.5938 187.649 16.4638 187.389 16.2038 cv
187.129 15.9438 186.999 15.4738 186.999 14.7937 cv
186.999 11.8237 li
186.339 11.8237 li
186.339 11.1237 li
186.999 11.1237 li
186.999 9.57375 li
187.899 9.57375 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
